{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/claims/ClaimFramesList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/claims/ClaimFramesList.vue","mtime":1641326767935},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBBUEkgZnJvbSAnLi4vLi4vYXBpJzsKaW1wb3J0IERhdGFUYWJsZSBmcm9tICdAL2NvbXBvbmVudHMvRGF0YVRhYmxlJzsKaW1wb3J0IEluZm9Ub29sdGlwIGZyb20gJ0AvY29tcG9uZW50cy9JbmZvVG9vbHRpcCc7CmltcG9ydCB7IG1hcEdldHRlcnMsIG1hcE11dGF0aW9ucywgbWFwU3RhdGUgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsKICAgIFRBQkxFRklFTERNQVBQSU5HLAogICAgVEFCTEVTRUxFQ1RJT05TLAogICAgTk9EQVRBTUVTU0FHRSwKICAgIERBVEFUWVBFUywKICAgIHNvcnRDYXNlSW5zZW5zaXRpdmUsCiAgICBnZXREYXRlU3RyaW5nLAogICAgcGx1cmFsaXplLAogICAgVGFibGVTZXR0aW5ncywKICAgIEhlYWRlckNvbmZpZywKICAgIG1ha2VQZXJjZW50YWdlCn0gZnJvbSAnLi4vLi4vdXRpbHMnOwoKZnVuY3Rpb24gaW5pdGlhbFN0YXRlKCkgewogICAgcmV0dXJuIHsKICAgICAgICBzb3J0OiB7W1RBQkxFU0VMRUNUSU9OUy5zb3J0QnldOiBUQUJMRUZJRUxETUFQUElORy5oZWFkbGluZSwgW1RBQkxFU0VMRUNUSU9OUy5zb3J0RGVzY106IGZhbHNlfSwKICAgICAgICBwYWdpbmc6IHtbVEFCTEVTRUxFQ1RJT05TLml0ZW1zUGVyUGFnZV06J0FsbCd9LAogICAgICAgIHN0YXR1c01lc3NhZ2U6ICcnLAogICAgICAgIGNsYWltczoge30sCiAgICAgICAgY2xhaW1Ub3BpY3M6IHt9LAogICAgICAgIGZpbHRlclR5cGVzOiBbXSwKICAgICAgICBTSU46IHt9LAogICAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICAgIHRvZ2dsZVRhYmxlczoge30sCiAgICAgICAgdG9nZ2xlU2V0dGluZ3M6IHttaW5pbWl6ZToge21lc3NhZ2U6J01pbmltaXplIFNlY3Rpb24nLCBpY29uOidtZGktY2hldnJvbi1kb3duJ30sIG1heGltaXplOiB7bWVzc2FnZTonTWF4aW1pemUgU2VjdGlvbicsIGljb246J21kaS1jaGV2cm9uLXVwJ319CiAgICB9Cn0KZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ0NsYWltRnJhbWVzTGlzdCcsCiAgICBjb21wb25lbnRzOiB7RGF0YVRhYmxlLCBJbmZvVG9vbHRpcH0sCiAgICBkYXRhOiAoKSA9PiAoaW5pdGlhbFN0YXRlKCkpLAogICAgY3JlYXRlZCgpIHsKICAgICAgICB0aGlzLk5PREFUQU1FU1NBR0UgPSBOT0RBVEFNRVNTQUdFOwogICAgICAgIHRoaXMuVEFCTEVGSUVMRE1BUFBJTkcgPSBUQUJMRUZJRUxETUFQUElORzsKICAgICAgICB0aGlzLmZpbHRlclR5cGVzID0gW0RBVEFUWVBFUy50b3BpYy5pZCwgREFUQVRZUEVTLnN1YnRvcGljLmlkXTsKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIHRoaXMuc2V0Q2xhaW1zKCk7CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICAuLi5tYXBHZXR0ZXJzKFsnZ2V0RmlsdGVyS2V5cyddKSwKICAgICAgICAuLi5tYXBTdGF0ZShbJ2ZpbHRlcnMnLCAnZmlsdGVyU3VibWlzc2lvbiddKSwKICAgICAgICBjbGFpbUZyYW1lcygpIHsKICAgICAgICAgICAgaWYodGhpcy5maWx0ZXJTdWJtaXNzaW9uKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldENsYWltcygpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jbGFpbXMpLmxlbmd0aCA+IDAgPyB0aGlzLmNsYWltcyA6IG51bGw7CiAgICAgICAgfSwKICAgICAgICB0b3BpY3MoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYWltVG9waWNzOwogICAgICAgIH0sCiAgICAgICAgdG9nZ2xlVG9waWNzKCkgewogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50b2dnbGVUYWJsZXMpLmxlbmd0aCA+IDAgPyB0aGlzLnRvZ2dsZVRhYmxlcyA6IG51bGw7CiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICAuLi5tYXBNdXRhdGlvbnMoWyd1cGRhdGVGaWx0ZXJTdWJtaXNzaW9uJ10pLAogICAgICAgIGNvbXBsZXRlZFNlYXJjaCh2YWx1ZSkgewogICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NvbXBsZXRlZCBzZWFyY2gnLCB2YWx1ZSkKICAgICAgICB9LAogICAgICAgIGdldFByZXR0eUxhYmVscyhpdGVtcykgewogICAgICAgICAgICAvL3JlbW92ZSBkdXBsaWNhdGVzIGFuZCBzb3J0CiAgICAgICAgICAgcmV0dXJuICBPYmplY3Qua2V5cyhpdGVtcykgPyBzb3J0Q2FzZUluc2Vuc2l0aXZlKFsuLi5PYmplY3Qua2V5cyhpdGVtcyldKSA6IGl0ZW1zOwogICAgICAgIH0sCiAgICAgICAgZ2V0UmVmSWQoaWQpIHsKICAgICAgICAgICAgcmV0dXJuICdjbGFpbVRvcGljVG9vbHRpcCcgKyBpZDsKICAgICAgICB9LAogICAgICAgIGJ1aWxkVGFibGVDb25maWd1cmF0aW9uKHN1YlRvcGljLCBjbGFpbVRlbXBsYXRlKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICB0YWJsZVNldHRpbmdzOiBuZXcgVGFibGVTZXR0aW5ncyhUQUJMRUZJRUxETUFQUElORy5pZCwgZmFsc2UsIHN1YlRvcGljLCBjbGFpbVRlbXBsYXRlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIFRBQkxFRklFTERNQVBQSU5HLnBlcmNlbnRhZ2UsIHRydWUpLAogICAgICAgICAgICAgICAgcHJpbWFyeUhlYWRlcnM6IFsKICAgICAgICAgICAgICAgICAgICBuZXcgSGVhZGVyQ29uZmlnKCdEZXNjcmlwdGlvbicsICdzdGFydCcsIHRydWUsIFRBQkxFRklFTERNQVBQSU5HLmhlYWRsaW5lKSwKICAgICAgICAgICAgICAgICAgICBuZXcgSGVhZGVyQ29uZmlnKCdDbGFpbWVyJywgJ3N0YXJ0JywgdHJ1ZSwgVEFCTEVGSUVMRE1BUFBJTkcuY2xhaW1lciksCiAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnVmFyaWFibGUgWCcsICdzdGFydCcsIHRydWUsIFRBQkxFRklFTERNQVBQSU5HLnZhcmlhYmxlTGlzdCksCiAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnTG9jYXRpb24nLCAnc3RhcnQnLCB0cnVlLCBUQUJMRUZJRUxETUFQUElORy5sb2NhdGlvbiksCiAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnRGF0ZScsICdzdGFydCcsIHRydWUsIFRBQkxFRklFTERNQVBQSU5HLmRhdGVzKSwKICAgICAgICAgICAgICAgICAgICBuZXcgSGVhZGVyQ29uZmlnKCdJbXBvcnRhbmNlJywgJ2NlbnRlcicsIHRydWUsIFRBQkxFRklFTERNQVBQSU5HLnBlcmNlbnRhZ2UpCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0b2dnbGVUb3BpY1NlY3Rpb24oaW5kZXgpIHsKICAgICAgICAgICAgY29uc3QgdG9nZ2xlSWQgPSB0aGlzLmdldFJlZklkKGluZGV4KTsKICAgICAgICAgICAgaWYodGhpcy4kcmVmc1t0b2dnbGVJZF0ubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLiRyZWZzW3RvZ2dsZUlkXVswXTsKICAgICAgICAgICAgICAgIGlmKHRoaXMudG9nZ2xlVGFibGVzLmhhc093blByb3BlcnR5KHRvZ2dsZUlkKSkgewogICAgICAgICAgICAgICAgICAgIGlmKGVsLmljb24gPT09ICdtZGktY2hldnJvbi1kb3duJykgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRhYmxlc1t0b2dnbGVJZF0ubWVzc2FnZSA9IHRoaXMudG9nZ2xlU2V0dGluZ3MubWF4aW1pemUubWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVUYWJsZXNbdG9nZ2xlSWRdLmljb24gPSB0aGlzLnRvZ2dsZVNldHRpbmdzLm1heGltaXplLmljb247CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRhYmxlc1t0b2dnbGVJZF0ubWVzc2FnZSA9IHRoaXMudG9nZ2xlU2V0dGluZ3MubWluaW1pemUubWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVUYWJsZXNbdG9nZ2xlSWRdLmljb24gPSB0aGlzLnRvZ2dsZVNldHRpbmdzLm1pbmltaXplLmljb247CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlVGFibGVzW3RvZ2dsZUlkXS5jbG9zZWQgPSAhdGhpcy50b2dnbGVUYWJsZXNbdG9nZ2xlSWRdLmNsb3NlZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2V0Q2xhaW1zKCkgewogICAgICAgICAgICAvL3VwZGF0ZXMgdGhlIGNsYWltcyBkYXRhIGFuZCBtZW1iZXIgdHlwZXMKICAgICAgICAgICAgbGV0IGZvcm1hdHRlZERhdGEgPSB7fTsKICAgICAgICAgICAgdGhpcy5jbGFpbVRvcGljcyA9IHt9OwogICAgICAgICAgICB0aGlzLmNsYWltcyA9IHt9OwogICAgICAgICAgICBsZXQgdG9nZ2xlRGF0YSA9IHt9OwogICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICB0aGlzLnVwZGF0ZUZpbHRlclN1Ym1pc3Npb24oZmFsc2UpOwogICAgICAgICAgICBjb25zdCBjbGFpbUZpbHRlcnMgPSB7fTsKCiAgICAgICAgICAgIC8vaWYgZmlsdGVycyBleGlzdCwgY3JlYXRlIGZvcm1hdHRlZCBjbGFpbXMgdG8gc3VibWl0IGFzIEFQSSBwYXJhbWV0ZXJzCiAgICAgICAgICAgIGNvbnN0IGZpbHRlcktleXMgPSB0aGlzLmdldEZpbHRlcktleXM7CiAgICAgICAgICAgIGlmIChmaWx0ZXJLZXlzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiB0aGlzLmZpbHRlclR5cGVzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoZmlsdGVyS2V5cy5pbmNsdWRlcyh0eXBlKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjbGFpbUZpbHRlcnNbcGx1cmFsaXplKHR5cGUpXSA9IHRoaXMuZmlsdGVyc1t0eXBlXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEFQSS5nZXRDbGFpbUZyYW1lcyhjbGFpbUZpbHRlcnMpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICAgICAgY29uc3QgY2xhaW1GcmFtZURhdGEgPSByZXNwb25zZS5kYXRhOwogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGNsYWltRnJhbWVEYXRhKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgLy9NYXAgY2xhaW1zIGJhc2VkIG9uIHRvcGljIGFuZCB0aGVuIHN1YnRvcGljCiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjbGFpbUZyYW1lIG9mIGNsYWltRnJhbWVEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvcGljID0gY2xhaW1GcmFtZVtUQUJMRUZJRUxETUFQUElORy50b3BpY107CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YlRvcGljID0gY2xhaW1GcmFtZVtUQUJMRUZJRUxETUFQUElORy5zdWJ0b3BpY107CgogICAgICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBuZXN0ZWQgb2JqZWN0J3MgdG9waWMga2V5CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoZm9ybWF0dGVkRGF0YSkuaW5jbHVkZXModG9waWMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWREYXRhW3RvcGljXSA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBuZXN0ZWQgb2JqZWN0J3Mgc3VidG9waWMga2V5IHVuZGVyIHRvcGljCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoZm9ybWF0dGVkRGF0YVt0b3BpY10pLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkRGF0YVt0b3BpY10gPSB7W3N1YlRvcGljXSA6IHt9fTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKCFPYmplY3Qua2V5cyhmb3JtYXR0ZWREYXRhW3RvcGljXSkuaW5jbHVkZXMoc3ViVG9waWMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWREYXRhW3RvcGljXVtzdWJUb3BpY10gPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy9BZGQgbmFtZXMgZm9yIHhWYXJpYWJsZXMKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHhWYXJpYWJsZXMgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgY2xhaW1GcmFtZS5jb21wb25lbnRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb21wb25lbnQucHJvcGVydHlOYW1lID09PSAneFZhcmlhYmxlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcENvbXBvbmVudCBvZiBjb21wb25lbnQudmFsdWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhWYXJpYWJsZXMucHVzaChwcm9wQ29tcG9uZW50LmNvbXBvbmVudE5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBjbGFpbUZyYW1lW1RBQkxFRklFTERNQVBQSU5HLnZhcmlhYmxlTGlzdF0gPSB4VmFyaWFibGVzOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2xhaW1GcmFtZVtUQUJMRUZJRUxETUFQUElORy5oZWFkbGluZV0gPSBjbGFpbUZyYW1lLmRlc2NyaXB0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICBjbGFpbUZyYW1lW1RBQkxFRklFTERNQVBQSU5HLnBlcmNlbnRhZ2VdID0gbWFrZVBlcmNlbnRhZ2UoY2xhaW1GcmFtZS5pbXBvcnRhbmNlLCAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhaW1GcmFtZVtUQUJMRUZJRUxETUFQUElORy5kYXRlc10gPSBjbGFpbUZyYW1lLmRhdGVzICYmIFsuLi5uZXcgU2V0KGNsYWltRnJhbWUuZGF0ZXMubWFwKGdldERhdGVTdHJpbmcpKV0uc29ydCgpOwogICAgICAgICAgICAgICAgICAgICAgICBjbGFpbUZyYW1lW1RBQkxFRklFTERNQVBQSU5HLmNhdGVnb3J5XSA9IERBVEFUWVBFUy50b3BpYy5pZAogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlID0gY2xhaW1GcmFtZS5kYXRlcyA/IGNsYWltRnJhbWUuZGF0ZXMudG9TdHJpbmcoKSA6IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGNsYWltRnJhbWUuY2xhaW1JZCArIGRhdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYWltRnJhbWVbVEFCTEVGSUVMRE1BUFBJTkcuaWRdID0gY2xhaW1GcmFtZS5jbGFpbUlkOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWR1cGxpY2F0ZQogICAgICAgICAgICAgICAgICAgICAgICBpZighZm9ybWF0dGVkRGF0YVt0b3BpY11bc3ViVG9waWNdLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGFbdG9waWNdW3N1YlRvcGljXVtrZXldID0gY2xhaW1GcmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUga2V5cyBmcm9tIGV2ZW50IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGZvcihsZXQgZGF0YVRvcGljIGluIGZvcm1hdHRlZERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZm9ybWF0dGVkRGF0YS5oYXNPd25Qcm9wZXJ0eShkYXRhVG9waWMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBkYXRhU3ViVG9waWMgaW4gZm9ybWF0dGVkRGF0YVtkYXRhVG9waWNdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdHRlZERhdGFbZGF0YVRvcGljXS5oYXNPd25Qcm9wZXJ0eShkYXRhU3ViVG9waWMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGFbZGF0YVRvcGljXVtkYXRhU3ViVG9waWNdID0gT2JqZWN0LnZhbHVlcyhmb3JtYXR0ZWREYXRhW2RhdGFUb3BpY11bZGF0YVN1YlRvcGljXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYWltcyA9IGZvcm1hdHRlZERhdGE7CgogICAgICAgICAgICAgICAgICAgIGZvcihjb25zdCBbY1RvcGljLCBjU3ViVG9waWNdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuY2xhaW1zKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYWltVG9waWNzW2NUb3BpY10gPSBPYmplY3Qua2V5cyhjU3ViVG9waWMpLnNvcnQoKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vZGVmYXVsdCBzZXQgdXAgZm9yIHRvcGljIHNlY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpPTA7IGkgPE9iamVjdC5rZXlzKHRoaXMuY2xhaW1Ub3BpY3MpLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZURhdGFbdGhpcy5nZXRSZWZJZChpKV0gPSB7bWVzc2FnZSA6IHRoaXMudG9nZ2xlU2V0dGluZ3MubWF4aW1pemUubWVzc2FnZSwgaWNvbiA6IHRoaXMudG9nZ2xlU2V0dGluZ3MubWF4aW1pemUuaWNvbiwgY2xvc2VkIDogKE9iamVjdC5rZXlzKGNsYWltRmlsdGVycykubGVuZ3RoID09PSAwKX07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlVGFibGVzID0gdG9nZ2xlRGF0YTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzTWVzc2FnZSA9IHRoaXMuTk9EQVRBTUVTU0FHRTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IpCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KfQo="},{"version":3,"sources":["ClaimFramesList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ClaimFramesList.vue","sourceRoot":"src/views/claims","sourcesContent":["<!--\n  - Copyright 2021 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  - Created by s.nordt on 11/23/21\n-->\n\n<template>\n    <div class=\"page-content\">\n        <div class=\"kb-details\">\n            <div class=\"kb-description-wrapper\">\n                <div class=\"element-list-header\">\n                    <div class=\"primary-page-header-left\">Claim Frames</div>\n                </div>\n            </div>\n        </div>\n <!--       <Claims :searchType=\"SEARCHTYPES.multi\" :claimSearchFilters=\"formattedClaims\" @completedSearch=completedSearch($event) ></Claims>-->\n        <div v-if=\"loading===true\" class=\"loading-section\">\n            <v-progress-linear indeterminate></v-progress-linear>\n            <div class=\"loading-message-clear\">{{statusMessage}}</div>\n        </div>\n        <div v-else>\n            <div v-if=\"statusMessage === NODATAMESSAGE\"  class=\"loading-message-clear\">{{statusMessage}}</div>\n            <div v-else-if=\"topics && Object.keys(topics).length > 0 && claimFrames && Object.keys(claimFrames).length > 0\">\n                <div v-for=\"(topic, topicIndex) in Object.keys(topics)\" :key=\"topicIndex\" class=\"topic-space\">\n                    <div class=\"element-list-header\">\n                        <div class=\"page-header-left topic-title\">{{topic}}</div>\n                        <div class=\"page-header-right\">\n                            <div class=\"button-icon\" @click=\"toggleTopicSection(topicIndex)\">\n                                <InfoTooltip :ref=\"getRefId(topicIndex)\" :message=\"toggleTopics[getRefId(topicIndex)].message\" :icon=\"toggleTopics[getRefId(topicIndex)].icon\" :iconStyle=\"'teal-large'\"></InfoTooltip>\n                            </div>\n                        </div>\n                    </div>\n                    <div v-for=\"(subTopic, subTopicIndex) in topics[topic]\" :key=\"subTopicIndex\" :class=\"subTopicIndex > 0 && !toggleTopics[getRefId(topicIndex)].closed ? 'section-space' : ''\">\n                        <DataTable\n                                :data=\"claimFrames[topic][subTopic]\"\n                                :sort=\"sort\"\n                                :loading=\"Object.keys(claimFrames[topic][subTopic]).length === 0\"\n                                :paging=\"paging\"\n                                :tableConfiguration=\"buildTableConfiguration(subTopic, claimFrames[topic][subTopic][subTopicIndex][TABLEFIELDMAPPING.claimTemplate])\"\n                                :statusMessage=\"statusMessage\"\n                                :hideData=\"toggleTopics[getRefId(topicIndex)].closed\"\n                                :hideFooter=true\n                        ></DataTable>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import API from '../../api';\n    import DataTable from '@/components/DataTable';\n    import InfoTooltip from '@/components/InfoTooltip';\n    import { mapGetters, mapMutations, mapState } from 'vuex';\n    import {\n        TABLEFIELDMAPPING,\n        TABLESELECTIONS,\n        NODATAMESSAGE,\n        DATATYPES,\n        sortCaseInsensitive,\n        getDateString,\n        pluralize,\n        TableSettings,\n        HeaderConfig,\n        makePercentage\n    } from '../../utils';\n\n    function initialState() {\n        return {\n            sort: {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.headline, [TABLESELECTIONS.sortDesc]: false},\n            paging: {[TABLESELECTIONS.itemsPerPage]:'All'},\n            statusMessage: '',\n            claims: {},\n            claimTopics: {},\n            filterTypes: [],\n            SIN: {},\n            loading: false,\n            toggleTables: {},\n            toggleSettings: {minimize: {message:'Minimize Section', icon:'mdi-chevron-down'}, maximize: {message:'Maximize Section', icon:'mdi-chevron-up'}}\n        }\n    }\n    export default {\n        name: 'ClaimFramesList',\n        components: {DataTable, InfoTooltip},\n        data: () => (initialState()),\n        created() {\n            this.NODATAMESSAGE = NODATAMESSAGE;\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.filterTypes = [DATATYPES.topic.id, DATATYPES.subtopic.id];\n        },\n        mounted() {\n            this.setClaims();\n        },\n        computed: {\n            ...mapGetters(['getFilterKeys']),\n            ...mapState(['filters', 'filterSubmission']),\n            claimFrames() {\n                if(this.filterSubmission) {\n                    this.setClaims();\n                }\n\n                return Object.keys(this.claims).length > 0 ? this.claims : null;\n            },\n            topics() {\n                return this.claimTopics;\n            },\n            toggleTopics() {\n                return Object.keys(this.toggleTables).length > 0 ? this.toggleTables : null;\n            }\n        },\n        methods: {\n            ...mapMutations(['updateFilterSubmission']),\n            completedSearch(value) {\n                console.warn('completed search', value)\n            },\n            getPrettyLabels(items) {\n                //remove duplicates and sort\n               return  Object.keys(items) ? sortCaseInsensitive([...Object.keys(items)]) : items;\n            },\n            getRefId(id) {\n                return 'claimTopicTooltip' + id;\n            },\n            buildTableConfiguration(subTopic, claimTemplate) {\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.id, false, subTopic, claimTemplate, false, false, false, false, false, TABLEFIELDMAPPING.percentage, true),\n                    primaryHeaders: [\n                        new HeaderConfig('Description', 'start', true, TABLEFIELDMAPPING.headline),\n                        new HeaderConfig('Claimer', 'start', true, TABLEFIELDMAPPING.claimer),\n                        new HeaderConfig('Variable X', 'start', true, TABLEFIELDMAPPING.variableList),\n                        new HeaderConfig('Location', 'start', true, TABLEFIELDMAPPING.location),\n                        new HeaderConfig('Date', 'start', true, TABLEFIELDMAPPING.dates),\n                        new HeaderConfig('Importance', 'center', true, TABLEFIELDMAPPING.percentage)\n                    ]\n                };\n            },\n            toggleTopicSection(index) {\n                const toggleId = this.getRefId(index);\n                if(this.$refs[toggleId].length > 0) {\n                    const el = this.$refs[toggleId][0];\n                    if(this.toggleTables.hasOwnProperty(toggleId)) {\n                        if(el.icon === 'mdi-chevron-down') {\n                            this.toggleTables[toggleId].message = this.toggleSettings.maximize.message;\n                            this.toggleTables[toggleId].icon = this.toggleSettings.maximize.icon;\n                        }\n                        else {\n                            this.toggleTables[toggleId].message = this.toggleSettings.minimize.message;\n                            this.toggleTables[toggleId].icon = this.toggleSettings.minimize.icon;\n                        }\n                        this.toggleTables[toggleId].closed = !this.toggleTables[toggleId].closed;\n                    }\n                }\n            },\n            setClaims() {\n                //updates the claims data and member types\n                let formattedData = {};\n                this.claimTopics = {};\n                this.claims = {};\n                let toggleData = {};\n                this.loading = true;\n                this.updateFilterSubmission(false);\n                const claimFilters = {};\n\n                //if filters exist, create formatted claims to submit as API parameters\n                const filterKeys = this.getFilterKeys;\n                if (filterKeys.length > 0) {\n                    for (const type of this.filterTypes) {\n                        if(filterKeys.includes(type)) {\n                            claimFilters[pluralize(type)] = this.filters[type];\n                        }\n                    }\n                }\n\n                API.getClaimFrames(claimFilters).then(response => {\n                    const claimFrameData = response.data;\n                    if (Object.keys(claimFrameData).length > 0) {\n                        //Map claims based on topic and then subtopic\n                        for (const claimFrame of claimFrameData) {\n                            const topic = claimFrame[TABLEFIELDMAPPING.topic];\n                            const subTopic = claimFrame[TABLEFIELDMAPPING.subtopic];\n\n                            //Create nested object's topic key\n                            if (!Object.keys(formattedData).includes(topic)) {\n                                formattedData[topic] = {};\n                            }\n\n                            //Create nested object's subtopic key under topic\n                            if (!Object.keys(formattedData[topic]).length) {\n                                formattedData[topic] = {[subTopic] : {}};\n                            }\n                            else if(!Object.keys(formattedData[topic]).includes(subTopic)) {\n                                formattedData[topic][subTopic] = {};\n                            }\n\n                            //Add names for xVariables\n                            let xVariables = [];\n                            for (const component of claimFrame.components) {\n                                if(component.propertyName === 'xVariable') {\n                                    for (const propComponent of component.values) {\n                                        xVariables.push(propComponent.componentName);\n                                    }\n                                }\n                            }\n                            claimFrame[TABLEFIELDMAPPING.variableList] = xVariables;\n\n                            claimFrame[TABLEFIELDMAPPING.headline] = claimFrame.description;\n                            claimFrame[TABLEFIELDMAPPING.percentage] = makePercentage(claimFrame.importance, 0);\n                            claimFrame[TABLEFIELDMAPPING.dates] = claimFrame.dates && [...new Set(claimFrame.dates.map(getDateString))].sort();\n                            claimFrame[TABLEFIELDMAPPING.category] = DATATYPES.topic.id\n                            const date = claimFrame.dates ? claimFrame.dates.toString() : null;\n                            const key = claimFrame.claimId + date;\n                            claimFrame[TABLEFIELDMAPPING.id] = claimFrame.claimId;\n\n                            //deduplicate\n                            if(!formattedData[topic][subTopic].hasOwnProperty(key)) {\n                                formattedData[topic][subTopic][key] = claimFrame;\n                            }\n                        }\n\n                        //remove keys from event object\n                        for(let dataTopic in formattedData) {\n                            if(formattedData.hasOwnProperty(dataTopic)) {\n                                for (let dataSubTopic in formattedData[dataTopic]) {\n                                    if (formattedData[dataTopic].hasOwnProperty(dataSubTopic)) {\n                                        formattedData[dataTopic][dataSubTopic] = Object.values(formattedData[dataTopic][dataSubTopic]);\n                                    }\n                                }\n                            }\n                        }\n\n                        this.claims = formattedData;\n\n                        for(const [cTopic, cSubTopic] of Object.entries(this.claims)) {\n                            this.claimTopics[cTopic] = Object.keys(cSubTopic).sort();\n                        }\n\n                        //default set up for topic sections\n                        for(let i=0; i <Object.keys(this.claimTopics).length; i++) {\n                            toggleData[this.getRefId(i)] = {message : this.toggleSettings.maximize.message, icon : this.toggleSettings.maximize.icon, closed : (Object.keys(claimFilters).length === 0)};\n                        }\n                        this.toggleTables = toggleData;\n                        this.loading = false;\n                    }\n                    else {\n                        this.statusMessage = this.NODATAMESSAGE;\n                        this.loading = false;\n                    }\n                }).catch((error) => {\n                    console.warn(error)\n                });\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .query-div {\n        @extend .kb-description-wrapper;\n        padding: 10px 0;\n        justify-content: space-between;\n    }\n\n    .query-field-column-wrapper{\n        @include flex-column-nowrap;\n        padding : 0 4px 6px 0;\n    }\n\n    .loading-section {\n        margin: 48px 0;\n    }\n\n    .loading-message-clear {\n        @include flex-row-nowrap;\n        justify-content: center;\n        height: 60px;\n        padding: 16px;\n    }\n\n    .topic-space:not(:first-child) {\n        margin: 40px 0 32px;\n    }\n\n    .topic-title {\n        font-size: 18px;\n        @extend .bold-text;\n        width: 100%;\n        color: $theme-teal-text;\n        line-height: 32px;\n        font-style: italic;\n    }\n\n</style>\n\n"]}]}