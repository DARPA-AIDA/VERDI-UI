{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/EvalJob.vue?vue&type=style&index=0&id=073a31fe&scoped=true&lang=css&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/EvalJob.vue","mtime":1640207172527},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/css-loader/dist/cjs.js","mtime":1641411773021},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1641411774047},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/postcss-loader/src/index.js","mtime":1641411773350},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5kZXRhaWxzIHsKICAgIG1hcmdpbi1sZWZ0OiAzMHB4Owp9Ci5jbGlja2FibGUgewogICAgY3Vyc29yOiBwb2ludGVyOwp9Ci5kaXNhYmxlZCB7CiAgICBjb2xvcjogIzllOWU5ZQp9Cg=="},{"version":3,"sources":["EvalJob.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EvalJob.vue","sourceRoot":"src/components","sourcesContent":["<!--\n  - Copyright 2021 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <div>\n        <span :class=\"disabled ? 'disabled' : 'clickable'\" @click=\"toggle\">\n            <v-icon v-if=\"open\">mdi-minus-box-outline</v-icon>\n            <v-icon v-else>mdi-plus-box-outline</v-icon>\n            <span>{{ job }}</span>\n        </span>\n        <v-icon v-on:click=\"removeJob()\">mdi-trash-can-outline</v-icon>\n        <div class=details v-if=\"open\">\n            <div>{{ details }}</div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import {evalClient} from '../api'\n    export default {\n        data: () => ({\n            open: false,\n            details: {},\n            futurePoll: null,\n            currentPoll: null,\n            disabled: false\n        }),\n        props: {\n            job: {\n                type: String,\n                required: true\n            }\n        },\n        methods: {\n            removeJob() {\n                this.open = false;\n                this.disabled = true;\n                evalClient.delete('job/' + this.job)\n                .then(() => {\n                    this.$emit('removed', {job: this.job})\n                }).catch(err => {\n                    this.$emit('removed', {err: 'Error during removal: ' + JSON.stringify(err)});\n                });\n            },\n            toggle() {\n                if (!this.disabled) {\n                    this.open = !this.open;\n                    if (this.open) {\n                        this.startPolling();\n                    } else {\n                        this.removeFuturePoll();\n                    }\n                }\n            },\n            startPolling() {\n                this.removeFuturePoll();\n                if (!this.currentPoll) {\n                    this.currentPoll = evalClient.get('job/' + this.job)\n                        .then(res => this.details = res.data)\n                        .catch(err => this.details = err.response ? err.response.status : err.message + '. Please contact the aministrator')\n                        .finally(() => {\n                            this.currentPoll = null;\n                            if (this.open) {\n                                this.futurePoll = setTimeout(this.startPolling, 1000);\n                            }\n                        });\n                }\n            },\n            removeFuturePoll() {\n                if (this.futurePoll !== null) {\n                    clearTimeout(this.futurePoll);\n                    this.futurePoll = null;\n                }\n            }\n        },\n        beforeDestroy() {\n            this.open = false;\n            this.removeFuturePoll();\n        }\n    }\n</script>\n\n<style scoped>\n    .details {\n        margin-left: 30px;\n    }\n    .clickable {\n        cursor: pointer;\n    }\n    .disabled {\n        color: #9e9e9e\n    }\n</style>\n"]}]}