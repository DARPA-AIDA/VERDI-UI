{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/explore/Explore.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/explore/Explore.vue","mtime":1640207172537},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Explore.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Explore.vue","sourceRoot":"src/views/explore","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <div class=\"page-content\">\n        <div class=\"primary-padded-heading\">Explore the Knowledge Base</div>\n<!-- TODO: Being used for query testing, will remove once filters are completed-->\n<!--        <p v-for=\"(filter, index) in filterSet\" :key=\"index\">\n            {{index}} : {{filter}}\n        </p>-->\n        <Tabs :titles=\"tabTitles\" :activeTabTitle=\"selectedTab\" @tabSelection=\"updateSelectedTab($event)\">\n            <TableAndGrid :slot=\"tabTitles[0]\"\n                          :showTable=true\n                          :data=\"eventData\"\n                          :sort=\"sort\"\n                          :paging=\"paging\"\n                          :tableConfiguration=\"getDefaultTableConfiguration()\"\n                          :cardConfiguration=\"cardConfiguration\"\n                          @currentItems=\"updateItems($event)\"\n            ></TableAndGrid>\n            <DataTable :slot=\"tabTitles[1]\"\n                       :data=\"relationData\"\n                       :sort=\"sort\"\n                       :paging=\"paging\"\n                       :tableConfiguration=\"modifyTableConfiguration()\"\n                       @currentItems=\"updateItems($event)\"\n            ></DataTable>\n        </Tabs>\n    </div>\n</template>\n\n<script>\n    import TableAndGrid from '@/components/TableAndGrid';\n    import DataTable from '@/components/DataTable';\n    import Tabs from '@/components/Tabs';\n    import API from '../../api';\n    import QueryViewMixin from '@/mixins/QueryViewMixin';\n    import {mapState, mapActions} from 'vuex';\n    import {\n        TABLESELECTIONS,\n        DATATYPES,\n        TABLEFIELDMAPPING,\n        formatPrototypeArguments,\n        TableSettings,\n        HeaderConfig,\n        SecondaryCaption,\n        SecondaryExpand\n    } from '../../utils';\n\n    const tableDescription = 'Explore clusters in the knowledge base using the filters provided.';\n    const currentRequests = new Map();\n\n    export default {\n        name: 'Explore',\n        mixins: [QueryViewMixin],\n        components: {TableAndGrid, DataTable, Tabs},\n        data: () => ({\n            tabTitles: ['Events', 'Relations'],\n            //variables for the card view\n            cardConfiguration: {},\n            //TODO: TA2 Browser variables - will be removed once search and filter are working\n            //filterSet: {}\n        }),\n/*        watch: { //TODO: Using in order to test queries, will remove once filter testing is complete\n            '$route' (to, from) {\n                this.filterSet = {};\n                if(to.query.filter !== from.query.filter || to.query.term !== from.query.term) {\n                    this.filterSet = API.compileApiParams();\n                }\n            }\n        },*/\n        created() {\n            this.TABLESELECTIONS = TABLESELECTIONS;\n            this.DATATYPES = DATATYPES;\n            this.cardConfiguration = {\n                cardSettings: {\n                    showToggleIcon: true,\n                        tableDescription: tableDescription,\n                        cardKey: TABLEFIELDMAPPING.clusterUri,\n                        iconKey: TABLEFIELDMAPPING.headline\n                },\n                cardKeys: [ //all fields that will be displayed in the card\n                    TABLEFIELDMAPPING.headline,\n                    TABLEFIELDMAPPING.types,\n                    TABLEFIELDMAPPING.prototypeId,\n                    TABLEFIELDMAPPING.nodeCount\n                ],\n                    exclusiveCardKeys: {\n                    title: TABLEFIELDMAPPING.headline,\n                        countDisplay: [{\n                        field: TABLEFIELDMAPPING.nodes,\n                        title: 'Arguments',\n                        value: TABLEFIELDMAPPING.nodeCount\n                    }],\n                        listDisplay: [{\n                        field: TABLEFIELDMAPPING.types\n                    }]\n                },\n                cardIcons: {\n                    Artifact: {icon: 'mdi-calendar-month'},\n                    Conflict: {icon: 'mdi-account-multiple-outline'},\n                    Contact: {icon: 'mdi-forum-outline'},\n                    Transaction: {icon: 'mdi-account-switch'}\n                }\n            };\n        },\n        mounted() {\n            //Preset the tab to 'Event'\n            if(!this.exploreSelections[TABLESELECTIONS.tab]) {\n                this.updateExploreSelections({option: TABLESELECTIONS.tab, value: this.tabTitles[0].slice(0,-1)});\n            }\n\n            //load arguments and types if data has not been previously loaded\n            if(Object.keys(this.categoryArguments).length === 0 || !this.categoryArguments[DATATYPES.eventType.id]) {\n                API.setCategoryData();\n            }\n\n            //load data, if data has not been previously loaded\n            if(Object.keys(this.knowledgeBase).length === 0 || !this.knowledgeBase[DATATYPES.eventType.id]) {\n                this.loadData(DATATYPES.eventType.id);\n            }\n        },\n        computed: {\n            ...mapState(['knowledgeBase', 'exploreSelections', 'term', 'currentDataSource', 'categoryArguments']),\n            sort() {\n                return this.exploreSelections[TABLESELECTIONS.sort] ? this.exploreSelections[TABLESELECTIONS.sort] :\n                    {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.nodeCount, [TABLESELECTIONS.sortDesc]: true};\n            },\n            paging() {\n                return this.exploreSelections[TABLESELECTIONS.paging] ? this.exploreSelections[TABLESELECTIONS.paging] :\n                    null;\n            },\n            eventData() {\n                return this.knowledgeBase[DATATYPES.eventType.id] ? Object.values(this.knowledgeBase[DATATYPES.eventType.id]) : [];\n            },\n            relationData() {\n                return this.knowledgeBase[DATATYPES.relationType.id] ? Object.values(this.knowledgeBase[DATATYPES.relationType.id]): [];\n            }\n        },\n        methods: {\n            ...mapActions(['updateExploreSelections', 'updatePrototypeRoles']),\n            updateItems(currentItems) {\n                const category = this.selectedTab.toLowerCase();\n                const toPopulate = currentItems.filter(item => !item[TABLEFIELDMAPPING.prototype][TABLEFIELDMAPPING.nodes] && \n                    !currentRequests.has(item[TABLEFIELDMAPPING.clusterUri]));\n                for (const cluster of toPopulate) {\n                    const promise = API.getPrototypeArguments(cluster[TABLEFIELDMAPPING.prototypeUri], this.currentDataSource);\n                    const clusterId = cluster[TABLEFIELDMAPPING.clusterUri];\n                    currentRequests.set(clusterId, promise);\n                    promise.then(role => {\n                        this.updatePrototypeRoles({\n                            category: category,\n                            id: clusterId,\n                            nodes: formatPrototypeArguments(role.data)});\n                        currentRequests.delete(clusterId);\n                    });\n                }\n            },\n            getDefaultTableConfiguration() {\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.clusterUri, true, '', tableDescription, true, false, false, false, false, 'node_count', true),\n                    primaryHeaders: [\n                        new HeaderConfig('Event Cluster ID', 'start', true, TABLEFIELDMAPPING.headline),\n                        new HeaderConfig('Prototype ID', 'start', true, TABLEFIELDMAPPING.prototypeId),\n                        new HeaderConfig('Event Types', 'start', true, TABLEFIELDMAPPING.types),\n                        new HeaderConfig('Arguments', 'center', true, TABLEFIELDMAPPING.nodeCount),\n                        new HeaderConfig('', 'center', false, 'data-table-expand')\n                    ],\n                    secondaryHeaders: {\n                        caption: new SecondaryCaption(TABLEFIELDMAPPING.prototype, TABLEFIELDMAPPING.nodes, TABLEFIELDMAPPING.roles),\n                        expanded: new SecondaryExpand(TABLEFIELDMAPPING.prototype, TABLEFIELDMAPPING.nodes,\n                            [\n                                new HeaderConfig('Name', 'start', false, TABLEFIELDMAPPING.headline),\n                                new HeaderConfig('ID', 'start', false, TABLEFIELDMAPPING.id),\n                                new HeaderConfig('Roles', 'start', false, TABLEFIELDMAPPING.roles),\n                                new HeaderConfig('Types', 'start', false, TABLEFIELDMAPPING.types)\n                            ]\n                        )\n                    }\n                }\n            },\n            modifyTableConfiguration() {\n                let tableConfig = this.getDefaultTableConfiguration();\n                tableConfig.tableSettings.showToggleIcon = false;\n                tableConfig.primaryHeaders[0].text = 'Relation Cluster ID';\n                tableConfig.primaryHeaders[2].text = 'Relation Types';\n                return tableConfig;\n            },\n            updateSelectedTab(value) {\n                this.updateExploreSelections({option: TABLESELECTIONS.tab, value: value.slice(0,-1)});\n                //The auto-complete options are reset based on if the Event or Relations tab is selected\n                this.resetList();\n                if(!this.knowledgeBase[DATATYPES.eventType.id] || !this.knowledgeBase[DATATYPES.relationType.id]) {\n                    this.resetTabData();\n                }\n            }\n        }\n    }\n</script>\n"]}]}