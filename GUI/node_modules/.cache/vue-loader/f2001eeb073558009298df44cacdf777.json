{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/MultiSelectAutoComplete.vue?vue&type=style&index=0&id=92515886&lang=scss&scoped=true&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/MultiSelectAutoComplete.vue","mtime":1640207172528},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/css-loader/dist/cjs.js","mtime":1641411773021},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1641411774047},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/postcss-loader/src/index.js","mtime":1641411773350},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/sass-loader/dist/cjs.js","mtime":1641411772200},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm11bHRpLXNlbGVjdC1jaGlwIHsKICAgIG1heC13aWR0aDoxMDAlOwp9CgoubXVsdGktc2VsZWN0LWNoaXAtd2l0aC1jYXB0aW9uIHsKICAgIG1heC13aWR0aDo3OCU7Cn0KCi5tdWx0aS1zZWxlY3QtY2FwdGlvbiB7CiAgICBjb2xvcjogJHRoZW1lLXByaW1hcnktY29sb3I7Cn0K"},{"version":3,"sources":["MultiSelectAutoComplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"MultiSelectAutoComplete.vue","sourceRoot":"src/components","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <div>\n        <v-autocomplete\n                :ref=\"'multi_select_autocomplete' + index\"\n                v-model=\"selections\"\n                :disabled=disabled\n                :required=required\n                :loading=false\n                multiple\n                clearable\n                chips\n                deletable-chips\n                :no-data-text=\"message\"\n                :items=\"items\"\n                :label=placeholder\n                @click:clear=\"$emit('autoCompleteClear', $event.target.value)\"\n                :change=\"submitInputChange()\"\n        >\n            <template v-slot:prepend-item>\n                <v-list-item\n                        ripple\n                        @click=\"toggle\"\n                >\n                    <v-list-item-action>\n                        <v-icon :color=\"selections.length > 0 ? 'indigo darken-4' : ''\">\n                            {{ icon }}\n                        </v-icon>\n                    </v-list-item-action>\n                    <v-list-item-content>\n                        <v-list-item-title>\n                            Select All\n                        </v-list-item-title>\n                    </v-list-item-content>\n                </v-list-item>\n                <hr class=\"hr-light\">\n            </template>\n            <template v-if=\"!showAllChips\" v-slot:selection=\"{ item, index }\">\n                <v-chip v-if=\"index === 0\" :class=\"selections.length > 1 ? 'multi-select-chip-with-caption' : 'multi-select-chip'\">\n                    <span>{{ item }}</span>\n                </v-chip>\n                <span v-if=\"index === 1\" class=\"text-caption multi-select-caption\">\n                    (+{{updateCount()}} more)\n                 </span>\n            </template>\n        </v-autocomplete>\n        <ValidationTooltip :icon=\"'mdi-alert-box'\" :message=\"errorMessage\" :displayClass=\"'autocomplete'\" :refId=\"index\" :showTooltip=\"validate\" @updateShowTooltip=\"updateShowTooltip($event)\"></ValidationTooltip>\n    </div>\n</template>\n\n<script>\n    import RouteParametersMixin from '@/mixins/RouteParametersMixin';\n    import {NODATAMESSAGE, arraysMatch} from '../utils';\n    import ValidationTooltip from '@/components/ValidationTooltip';\n\n    export default {\n        name: 'MultiSelectAutoComplete',\n        mixins: [RouteParametersMixin],\n        components: {ValidationTooltip},\n        props: {\n            items: Array,\n            index: {\n               type:Number,\n                default: 0,\n               required: false\n            },\n            required: Boolean,\n            disabled: {\n                type: Boolean,\n                default: false\n            },\n            placeholder: String,\n            enterKeySubmit: {\n                type: Boolean,\n                default: false\n            },\n            message: {\n                type: String,\n                default: NODATAMESSAGE,\n                required: false\n            },\n            showAllChips: {\n                type: Boolean,\n                default: true,\n                required:false\n            }\n        },\n        data: () => ({\n            selections: [],\n            prevSelections: [],\n            requestToValidate: false,\n            errorNote : ''\n        }),\n        computed: {\n            errorMessage() {\n                return this.errorNote;\n            },\n            allSelected() {\n                return this.selections.length === this.items.length;\n            },\n            someSelected() {\n                return this.selections.length > 0 && !this.allSelected;\n            },\n            icon() {\n                return this.allSelected ? 'mdi-close-box' : this.someSelected ? 'mdi-minus-box' : 'mdi-checkbox-blank-outline';\n            },\n            validate() {\n                return this.requestToValidate;\n            }\n        },\n        methods : {\n            updateShowTooltip(value) {\n                this.requestToValidate = value;\n            },\n            updateCount() {\n                let count = this.selections.length - 1;\n                if(this.items.length < this.selections.length) {\n                    count = this.items.length - 1;\n                }\n                return count;\n            },\n            submitInputChange() {\n                //if selection is made using the Select All option, emit the submission event\n                this.$nextTick(() => {\n                    if(this.selections.length > 0) {\n                        //If no items were passed in reset the selections\n                        if(this.items.length === 0) {\n                            this.selections = [];\n                        } //if selections have changed, emit updated selections\n                        else if(!arraysMatch(this.prevSelections, this.selections)) {\n                            this.prevSelections = this.selections;\n                            this.$emit('autoCompleteSubmission', this.selections);\n\n                        }\n                    } //if previous selections have been deleted, emit no selections\n                    else if(!arraysMatch(this.prevSelections, this.selections)) {\n                        this.prevSelections = [];\n                        this.$emit('autoCompleteSubmission', []);\n                    }\n                });\n            },\n            toggle () {\n                //Set the selected items based on the Select All action\n                this.$nextTick(() => {\n                    const autocomplete = this.$refs['multi_select_autocomplete' + this.index];\n                    if (this.allSelected) {\n                        this.selections = []\n                    }\n                    else if(autocomplete.filteredItems.length >= 50) {\n                        this.errorNote = autocomplete.filteredItems.length + ' filters were submitted. Please limit to 50 filters.';\n                        this.requestToValidate = true;\n                    }\n                    else {\n                        this.selections = autocomplete.filteredItems;\n                    }\n                });\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n    .multi-select-chip {\n        max-width:100%;\n    }\n\n    .multi-select-chip-with-caption {\n        max-width:78%;\n    }\n\n    .multi-select-caption {\n        color: $theme-primary-color;\n    }\n</style>\n"]}]}