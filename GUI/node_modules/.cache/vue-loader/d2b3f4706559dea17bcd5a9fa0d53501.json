{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/forms/DateFilter.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/forms/DateFilter.vue","mtime":1640207172531},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/css-loader/dist/cjs.js","mtime":1641411773021},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1641411774047},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/postcss-loader/src/index.js","mtime":1641411773350},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/sass-loader/dist/cjs.js","mtime":1641411772200},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc2VsZWN0LXdyYXBwZXIgewogICAgQGluY2x1ZGUgZmxleC1jb2x1bW4tbm93cmFwOwp9Cg=="},{"version":3,"sources":["DateFilter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA;AACA;AACA","file":"DateFilter.vue","sourceRoot":"src/components/forms","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <div class=\"form-wrapper\">\n        <label class=\"secondary-heading\">Date</label>\n        <div class=\"validation-field-wrapper\">\n            <div class=\"select-wrapper\">\n                <label class=\"field-label\">Range Selector</label>\n                <SelectDropdown :options=\"operatorOptions\" :selectDisplay=\"selectDisplay\" @selectDropdownChange=\"onDateOptionChange($event)\"></SelectDropdown>\n            </div>\n        </div>\n        <div class=\"validation-field-wrapper date-picker\">\n            <DatePicker :date=\"startDate\" :label=\"startLabel\" :maxDate=\"maxDate\" @selectedFilterDate = \"updateStartDate($event)\"></DatePicker>\n            <DatePicker :date=\"endDate\" :label=\"endLabel\" :maxDate=\"maxDate\" :showDateTooltip=\"showTooltip\" :message=\"endDateError\"\n                        @selectedFilterDate = \"updateEndDate($event)\"\n                        @updateShowTooltip = \"updateShowTooltip($event)\"\n            ></DatePicker>\n        </div>\n    </div>\n</template>\n\n<script>\n    import DatePicker from '@/components/DatePicker';\n    import SelectDropdown from '@/components/SelectDropdown';\n    import {DATATYPES, SELECTDISPLAY} from '../../utils';\n    import {mapActions} from 'vuex';\n\n    let calcYesterday = new Date();\n    calcYesterday.setDate(calcYesterday.getUTCDate() - 1);\n    calcYesterday.setHours(0,0,0,0);\n\n    let calcToday = new Date();\n    calcToday.setHours(23,59,59,999);\n\n    export default {\n        name: 'DateFilter',\n        props: {\n            showDateTooltip: Boolean\n        },\n        data: () => ({\n            dateOperator: 0,\n            operatorOptions: [\n                'Between',\n                'Last 30 Days',\n                'Last 60 Days',\n                'Last 90 Days',\n                'Year'\n            ],\n            startDate: calcYesterday,\n            endDate: calcToday,\n            maxDate: calcToday,\n            startLabel: 'From',\n            endLabel: 'To',\n            endDateError: 'Please select a valid end date.',\n            showTooltip: false,\n            selectDisplay: ''\n\n        }),\n        components: {DatePicker, SelectDropdown},\n        created() {\n            let dateObject =  {start: this.startDate, end: this.endDate};\n            this.updateFilters({type: DATATYPES.dateRange.id, filter:dateObject});\n            this.showTooltip = this.showDateTooltip;\n            this.selectDisplay = SELECTDISPLAY.button;\n        },\n        methods: {\n            ...mapActions(['removeFilter', 'updateFilters']),\n            onDateOptionChange(event) {\n                //set all start times to the beginning of the day and end times to the end of the day\n                switch(event.target.value) {\n                    case this.operatorOptions[0] : //Between\n                        this.startDate = calcYesterday;\n                        break;\n                    case this.operatorOptions[1] : //30 Days\n                        this.calculateNewDate(30, false);\n                        break;\n                    case this.operatorOptions[2] : //60 Days\n                        this.calculateNewDate(60, false);\n                        break;\n                    case this.operatorOptions[3] : //90 Days\n                        this.calculateNewDate(90, false);\n                        break;\n                    case this.operatorOptions[4] : //1 Year\n                        this.calculateNewDate(1, true);\n                        break;\n                }\n\n                this.updateDateFilters();\n            },\n            calculateNewDate(number, isYear) {\n                let calcNewDate = new Date();\n                if(isYear) {\n                    calcNewDate.setFullYear(calcNewDate.getUTCFullYear() - number);\n                }\n                else {\n                    calcNewDate.setDate(calcNewDate.getUTCDate() - number);\n                }\n\n                this.startDate = calcNewDate;\n                this.startDate.setHours(0,0,0,0);\n            },\n            updateStartDate(start) {\n                this.startDate = start;\n                this.updateDateFilters();\n            },\n            updateEndDate(end) {\n                this.endDate = end;\n                this.updateDateFilters();\n            },\n            updateDateFilters() {\n                if(this.validForm()) {\n                    let dateObject =  {start: this.startDate, end: this.endDate};\n                    this.updateFilters({type: DATATYPES.dateRange.id, filter:dateObject})\n                }\n                else {\n                    this.showTooltip = true;\n                    this.removeFilter({type: DATATYPES.dateRange.id});\n                }\n            },\n            validForm() {\n                return !(!(this.startDate instanceof Date) || !(this.endDate instanceof Date) ||\n                    this.startDate > this.endDate);\n            },\n            updateShowTooltip(value) {\n                this.showTooltip = value;\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    .select-wrapper {\n        @include flex-column-nowrap;\n    }\n</style>\n"]}]}