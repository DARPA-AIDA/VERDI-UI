{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/analyze/HypothesisDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/analyze/HypothesisDetails.vue","mtime":1640207172535},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7CiAgICBUQUJMRUZJRUxETUFQUElORywKICAgIERBVEFUWVBFUywKICAgIExPQURJTkdNRVNTQUdFLAogICAgTk9EQVRBTUVTU0FHRSwKICAgIFZVRVJPVVRFUywKICAgIFRBQkxFU0VMRUNUSU9OUywKICAgIFBBUkFNRVRFUk5BTUVTLAogICAgdXBwZXJGaXJzdExldHRlciwKICAgIGZvcm1hdENsdXN0ZXIsCiAgICBmb3JtYXRIeXBvdGhlc2lzQ2x1c3RlciwKICAgIGZvcm1hdEh5cG90aGVzaXNFbnRpdGllcywKICAgIGRlZHVwbGljYXRlQXJyYXksCiAgICBwcmV0dHlQbHVyYWxpemUsCiAgICBwbHVyYWxpemUsCiAgICBzb3J0QXJyYXlPZk9iamVjdHMsCiAgICBUYWJsZVNldHRpbmdzLAogICAgSGVhZGVyQ29uZmlnLAogICAgU2Vjb25kYXJ5Q2FwdGlvbiwKICAgIFNlY29uZGFyeUV4cGFuZAp9IGZyb20gJy4uLy4uL3V0aWxzJzsKaW1wb3J0IERhdGFUYWJsZSBmcm9tICdAL2NvbXBvbmVudHMvRGF0YVRhYmxlJzsKaW1wb3J0IERvY3VtZW50R3JpZCBmcm9tICdAL2NvbXBvbmVudHMvRG9jdW1lbnRHcmlkJzsKaW1wb3J0IFF1ZXJ5U3VibWlzc2lvbk1peGluIGZyb20gJ0AvbWl4aW5zL1F1ZXJ5U3VibWlzc2lvbk1peGluJzsKaW1wb3J0IFJvdXRlUGFyYW1ldGVyc01peGluIGZyb20gJ0AvbWl4aW5zL1JvdXRlUGFyYW1ldGVyc01peGluJzsKaW1wb3J0IEluZm9Ub29sdGlwIGZyb20gJ0AvY29tcG9uZW50cy9JbmZvVG9vbHRpcCc7CmltcG9ydCBIeXBvdGhlc2lzRGlhbG9nIGZyb20gJ0AvY29tcG9uZW50cy9mb3Jtcy9IeXBvdGhlc2lzRGlhbG9nJzsKaW1wb3J0IEFQSSBmcm9tICcuLi8uLi9hcGknOwppbXBvcnQge21hcEFjdGlvbnMsIG1hcE11dGF0aW9ucywgbWFwR2V0dGVycywgbWFwU3RhdGV9IGZyb20gJ3Z1ZXgnOwoKY2xhc3MgQnJlYWRDcnVtYiB7CiAgICBjb25zdHJ1Y3RvciAoaWQsIHRleHQsIGRpc2FibGVkKSB7CiAgICAgICAgdGhpcy5pZCA9IGlkOwogICAgICAgIHRoaXMudGV4dCA9IHRleHQ7CiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGRpc2FibGVkOwogICAgfQp9CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnSHlwb3RoZXNpc0RldGFpbHMnLAogICAgbWl4aW5zOiBbUXVlcnlTdWJtaXNzaW9uTWl4aW4sIFJvdXRlUGFyYW1ldGVyc01peGluXSwKICAgIGNvbXBvbmVudHM6IHtEYXRhVGFibGUsIERvY3VtZW50R3JpZCwgSW5mb1Rvb2x0aXAsIEh5cG90aGVzaXNEaWFsb2d9LAogICAgZGF0YTogKCkgPT4gKHsKICAgICAgICBzdGF0dXNNZXNzYWdlOiAnJywKICAgICAgICByb3V0ZUlkOiAnJywKICAgICAgICBlbnRpdHlTb3J0OiB7fSwKICAgICAgICBkZWZhdWx0U29ydDoge30sCiAgICAgICAgZGVmYXVsdFBhZ2luZzogbnVsbCwKICAgICAgICB0YWJsZVNldHVwOiB7fSwKICAgICAgICBldmVudE9wdGlvbnM6IFtdLAogICAgICAgIHR5cGVPcHRpb25zOiBbXSwKICAgICAgICBjcnVtYnM6IHsKICAgICAgICAgICAgYWRkQ2F0ZWdvcnkgOiBuZXcgQnJlYWRDcnVtYignYWRkQ2F0ZWdvcnknLCAnQWRkIEV2ZW50JywgZmFsc2UpLAogICAgICAgICAgICBhZGRBcmd1bWVudCA6IG5ldyBCcmVhZENydW1iKCdhZGRBcmd1bWVudCcsICdBZGQgQXJndW1lbnRzJywgdHJ1ZSksCiAgICAgICAgICAgIHJldmlldyA6IG5ldyBCcmVhZENydW1iKCdyZXZpZXcnLCAnUmV2aWV3JywgdHJ1ZSksCiAgICAgICAgfSwKICAgICAgICBzZWxlY3RlZEFkZENhdGVnb3J5OiAnJywKICAgICAgICBzaG93QWRkRGlhbG9nOiBmYWxzZSwKICAgICAgICBoeXBvdGhlc2lzQ2x1c3RlckRldGFpbHM6IHt9CiAgICB9KSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgdGhpcy5UQUJMRVNFTEVDVElPTlMgPSBUQUJMRVNFTEVDVElPTlM7CiAgICAgICAgdGhpcy5UQUJMRUZJRUxETUFQUElORyA9IFRBQkxFRklFTERNQVBQSU5HOwogICAgICAgIHRoaXMuREFUQVRZUEVTID0gREFUQVRZUEVTOwogICAgICAgIHRoaXMuVlVFUk9VVEVTID0gVlVFUk9VVEVTOwogICAgICAgIHRoaXMuTk9EQVRBTUVTU0FHRSA9IE5PREFUQU1FU1NBR0U7CiAgICAgICAgdGhpcy5lbnRpdHlTb3J0ID0ge1tUQUJMRVNFTEVDVElPTlMuc29ydEJ5XTogVEFCTEVGSUVMRE1BUFBJTkcuaGVhZGxpbmUsIFtUQUJMRVNFTEVDVElPTlMuc29ydERlc2NdOiBmYWxzZX07CiAgICAgICAgdGhpcy5kZWZhdWx0U29ydCA9IHtbVEFCTEVTRUxFQ1RJT05TLnNvcnRCeV06IFRBQkxFRklFTERNQVBQSU5HLmVudGl0eUNvdW50LCBbVEFCTEVTRUxFQ1RJT05TLnNvcnREZXNjXTogdHJ1ZX07CiAgICAgICAgdGhpcy5zZWxlY3RlZEFkZENhdGVnb3J5ID0gREFUQVRZUEVTLmV2ZW50VHlwZS5pZDsKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIGlmKHRoaXMuJHJvdXRlLnF1ZXJ5Lmhhc093blByb3BlcnR5KFBBUkFNRVRFUk5BTUVTLmRhdGFzb3VyZSkpIHsKICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50RGF0YVNvdXJjZSAhPT0gdGhpcy4kcm91dGUucXVlcnlbUEFSQU1FVEVSTkFNRVMuZGF0YXNvdXJlXSkgewogICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50RGF0YVNvdXJjZSh0aGlzLiRyb3V0ZS5xdWVyeVtQQVJBTUVURVJOQU1FUy5kYXRhc291cmVdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLnJlZnJlc2hEYXRhKCk7CgogICAgICAgIC8vbG9hZCBkYXRhLCBpZiBkYXRhIGhhcyBub3QgYmVlbiBwcmV2aW91c2x5IGxvYWRlZAogICAgICAgIGZvcihjb25zdCB0eXBlIG9mIFtEQVRBVFlQRVMuZXZlbnRUeXBlLmlkLCBEQVRBVFlQRVMucmVsYXRpb25UeXBlLmlkXSkgewogICAgICAgICAgICBpZihPYmplY3Qua2V5cyh0aGlzLmtub3dsZWRnZUJhc2UpLmxlbmd0aCA9PT0gMCB8fCAhdGhpcy5rbm93bGVkZ2VCYXNlW3R5cGVdKSB7CiAgICAgICAgICAgICAgICB0aGlzLmxvYWREYXRhKHR5cGUsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgIGNvbXB1dGVkOiB7CiAgICAgICAgLi4ubWFwU3RhdGUoWydub2RlU2VsZWN0aW9uJywgJ2N1cnJlbnREYXRhU291cmNlJywgJ2tub3dsZWRnZUJhc2UnLCAnc2F2ZWRIeXBvdGhlc2VzJywgJ2h5cG90aGVzaXNTZWxlY3Rpb24nLCAnc2F2ZWRVcmxQYXJhbWV0ZXJzJ10pLAogICAgICAgIC4uLm1hcEdldHRlcnMoWydnZXRTdG9yZUJ5Um91dGUnLCAnZ2V0U2F2ZWRIeXBvdGhlc2lzQnlJZCddKSwKICAgICAgICByb3V0ZVBhcmFtcygpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHJvdXRlLnBhcmFtczsKICAgICAgICB9LAogICAgICAgIGVudGl0eURhdGEoKSB7CiAgICAgICAgICAgIGxldCBlbnRpdHlEYXRhID0gdGhpcy5oeXBvdGhlc2lzU2VsZWN0aW9uW3BsdXJhbGl6ZShEQVRBVFlQRVMuZW50aXR5VHlwZS5pZCldOwogICAgICAgICAgICByZXR1cm4gZW50aXR5RGF0YSA/IGVudGl0eURhdGE6IFtdOwogICAgICAgIH0sCiAgICAgICAgZXZlbnREYXRhKCkgewogICAgICAgICAgICBsZXQgZXZlbnREYXRhID0gdGhpcy5oeXBvdGhlc2lzU2VsZWN0aW9uW3BsdXJhbGl6ZShEQVRBVFlQRVMuZXZlbnRUeXBlLmlkKV07CiAgICAgICAgICAgIHJldHVybiBldmVudERhdGEgPyBPYmplY3QudmFsdWVzKGV2ZW50RGF0YSk6IFtdOwogICAgICAgIH0sCiAgICAgICAgcmVsYXRpb25EYXRhKCkgewogICAgICAgICAgICBsZXQgcmVsYXRpb25EYXRhID0gdGhpcy5oeXBvdGhlc2lzU2VsZWN0aW9uW3BsdXJhbGl6ZShEQVRBVFlQRVMucmVsYXRpb25UeXBlLmlkKV07CiAgICAgICAgICAgIHJldHVybiByZWxhdGlvbkRhdGEgPyBPYmplY3QudmFsdWVzKHJlbGF0aW9uRGF0YSk6IFtdOwogICAgICAgIH0sCiAgICAgICAgZG9jdW1lbnRMaXN0KCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5oeXBvdGhlc2lzU2VsZWN0aW9uW1RBQkxFRklFTERNQVBQSU5HLmRvY3VtZW50TGlzdF07CiAgICAgICAgfSwKICAgICAgICBzZWxlY3RlZENhdGVnb3J5KCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEFkZENhdGVnb3J5OwogICAgICAgIH0sCiAgICAgICAgc2hvd0RpYWxvZygpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd0FkZERpYWxvZzsKICAgICAgICB9CgogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICAuLi5tYXBNdXRhdGlvbnMoWyd1cGRhdGVTYXZlZEh5cG90aGVzZXMnLCAndXBkYXRlSHlwb3RoZXNpc01lbWJlcicsICd1cGRhdGVIeXBvdGhlc2lzU2VsZWN0aW9uJ10pLAogICAgICAgIC4uLm1hcEFjdGlvbnMoWyd1cGRhdGVDdXJyZW50RGF0YVNvdXJjZSddKSwKICAgICAgICBnZXRDbHVzdGVyQ2F0ZWdvcnkoKSB7CiAgICAgICAgICAgIGlmKHRoaXMucm91dGVQYXJhbXMuaWQgIT09IHRoaXMucm91dGVJZCkgewogICAgICAgICAgICAgICAgdGhpcy5yb3V0ZUlkID0gdGhpcy5yb3V0ZVBhcmFtcy5pZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHVwcGVyRmlyc3RMZXR0ZXIoREFUQVRZUEVTLmh5cG90aGVzaXMuZGlzcGxheSk7CiAgICAgICAgfSwKICAgICAgICBnZXREZWZhdWx0VGFibGVDb25maWd1cmF0aW9uKGNhdGVnb3J5KSB7CiAgICAgICAgICAgIGxldCB0YWJsZUNvbmZpZ3VyYXRpb24gPSB7fTsKICAgICAgICAgICAgaWYoY2F0ZWdvcnkgPT09IERBVEFUWVBFUy5lbnRpdHlUeXBlLmlkKSB7CiAgICAgICAgICAgICAgICB0YWJsZUNvbmZpZ3VyYXRpb24gPSB7CiAgICAgICAgICAgICAgICAgICAgdGFibGVTZXR0aW5nczogbmV3IFRhYmxlU2V0dGluZ3MoVEFCTEVGSUVMRE1BUFBJTkcuY2x1c3RlclVyaSwgZmFsc2UsICcnLCAnJywgZmFsc2UsIGZhbHNlLCBmYWxzZSksCiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUhlYWRlcnM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnTmFtZScsICdzdGFydCcsIHRydWUsIFRBQkxFRklFTERNQVBQSU5HLmhlYWRsaW5lKSwKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnSUQnLCAnc3RhcnQnLCB0cnVlLCBUQUJMRUZJRUxETUFQUElORy5pZCksCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBIZWFkZXJDb25maWcoJ1R5cGVzJywgJ3N0YXJ0JywgdHJ1ZSwgVEFCTEVGSUVMRE1BUFBJTkcudHlwZXMpCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdGFibGVDb25maWd1cmF0aW9uID0gewogICAgICAgICAgICAgICAgICAgIHRhYmxlU2V0dGluZ3M6IG5ldyBUYWJsZVNldHRpbmdzKFRBQkxFRklFTERNQVBQSU5HLmNsdXN0ZXJVcmksIHRydWUsICcnLCAnJywgZmFsc2UsIGZhbHNlLCBmYWxzZSwgVEFCTEVGSUVMRE1BUFBJTkcuaGlnaGxpZ2h0KSwKICAgICAgICAgICAgICAgICAgICBwcmltYXJ5SGVhZGVyczogWwogICAgICAgICAgICAgICAgICAgICAgICBuZXcgSGVhZGVyQ29uZmlnKCdEZXNjcmlwdGlvbicsICdzdGFydCcsIHRydWUsIFRBQkxFRklFTERNQVBQSU5HLmhlYWRsaW5lKSwKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnSUQnLCAnc3RhcnQnLCB0cnVlLCBUQUJMRUZJRUxETUFQUElORy5pZCksCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBIZWFkZXJDb25maWcoJ1R5cGVzJywgJ3N0YXJ0JywgdHJ1ZSwgVEFCTEVGSUVMRE1BUFBJTkcudHlwZXMpLAogICAgICAgICAgICAgICAgICAgICAgICBuZXcgSGVhZGVyQ29uZmlnKCdBcmd1bWVudHMnLCAnY2VudGVyJywgdHJ1ZSwgVEFCTEVGSUVMRE1BUFBJTkcuZW50aXR5Q291bnQpLAogICAgICAgICAgICAgICAgICAgICAgICBuZXcgSGVhZGVyQ29uZmlnKCcnLCAnY2VudGVyJywgZmFsc2UsICdkYXRhLXRhYmxlLWV4cGFuZCcpCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnlIZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb246IG5ldyBTZWNvbmRhcnlDYXB0aW9uKFRBQkxFRklFTERNQVBQSU5HLnByb3RvdHlwZSwgVEFCTEVGSUVMRE1BUFBJTkcuZW50aXR5TGlzdCwgVEFCTEVGSUVMRE1BUFBJTkcucm9sZXMpLAogICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZDogbmV3IFNlY29uZGFyeUV4cGFuZChUQUJMRUZJRUxETUFQUElORy5wcm90b3R5cGUsIFRBQkxFRklFTERNQVBQSU5HLmVudGl0eUxpc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnTmFtZScsICdzdGFydCcsIGZhbHNlLCBUQUJMRUZJRUxETUFQUElORy5oZWFkbGluZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnSUQnLCAnc3RhcnQnLCBmYWxzZSwgVEFCTEVGSUVMRE1BUFBJTkcuY2x1c3RlcklkTGlzdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhlYWRlckNvbmZpZygnUm9sZXMnLCAnc3RhcnQnLCBmYWxzZSwgVEFCTEVGSUVMRE1BUFBJTkcucm9sZXMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBIZWFkZXJDb25maWcoJ1R5cGVzJywgJ3N0YXJ0JywgZmFsc2UsIFRBQkxFRklFTERNQVBQSU5HLnR5cGVzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0YWJsZUNvbmZpZ3VyYXRpb247CiAgICAgICAgfSwKICAgICAgICByZWZyZXNoRGF0YSgpIHsKICAgICAgICAgICAgdGhpcy51cGRhdGVIeXBvdGhlc2lzU2VsZWN0aW9uKHt9KTsKICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5zdGF0dXNNZXNzYWdlID0gTE9BRElOR01FU1NBR0U7CiAgICAgICAgICAgIGNvbnN0IGh5cG90aGVzaXMgPSB0aGlzLmdldFNhdmVkSHlwb3RoZXNpc0J5SWQoZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMucm91dGVQYXJhbXMuaWQpKTsKICAgICAgICAgICAgLy9JZiBoeXBvdGhlc2lzIGhhcyBiZWVuIGVkaXRlZCBhbmQgc2F2ZWQsIHJldHJpZXZlIHRoZSBlZGl0ZWQgaHlwb3RoZXNpcyBmcm9tIHRoZSBWVUUgc3RvcmUsIG90aGVyd2lzZQogICAgICAgICAgICAvL3JldHJpZXZlIHRoZSBoeXBvdGhlc2lzIGZyb20gdGhlIHRyaXBsZXN0b3JlCiAgICAgICAgICAgIGlmKGh5cG90aGVzaXMgJiYgT2JqZWN0LmtleXMoaHlwb3RoZXNpcykubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgdGhpcy5oeXBvdGhlc2lzQ2x1c3RlckRldGFpbHMgPSBoeXBvdGhlc2lzOwogICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIeXBvdGhlc2lzU2VsZWN0aW9uKGh5cG90aGVzaXMpOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBBUEkuZ2V0Q2x1c3RlckRldGFpbHMoZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMucm91dGVQYXJhbXMuaWQpLCBEQVRBVFlQRVMuaHlwb3RoZXNpcy5pZCwgdGhpcy5jdXJyZW50RGF0YVNvdXJjZSkudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSAmJiBPYmplY3Qua2V5cyhyZXNwb25zZS5kYXRhKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaHlwb3RoZXNpc0NsdXN0ZXJEZXRhaWxzID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIeXBvdGhlc2lzU2VsZWN0aW9uKGZvcm1hdEh5cG90aGVzaXNDbHVzdGVyKHJlc3BvbnNlLmRhdGEsIERBVEFUWVBFUy5oeXBvdGhlc2lzLmlkKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNNZXNzYWdlICYmIHJlc3BvbnNlLnN0YXR1c01lc3NhZ2UubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c01lc3NhZ2UgPSByZXNwb25zZS5zdGF0dXNNZXNzYWdlOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUh5cG90aGVzaXNTZWxlY3Rpb24oe30pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBnZXRUYWJsZUNvbmZpZ3VyYXRpb24oY2F0ZWdvcnkpIHsKICAgICAgICAgICAgbGV0IHRhYmxlQ29uZmlnID0gdGhpcy5nZXREZWZhdWx0VGFibGVDb25maWd1cmF0aW9uKGNhdGVnb3J5KTsKICAgICAgICAgICAgdGFibGVDb25maWcudGFibGVTZXR0aW5ncy50YWJsZUhlYWRpbmcgPSBwcmV0dHlQbHVyYWxpemUoY2F0ZWdvcnkpOwogICAgICAgICAgICByZXR1cm4gdGFibGVDb25maWc7CiAgICAgICAgfSwKICAgICAgICBvcGVuRGlhbG9nKGNhdGVnb3J5KSB7CiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRBZGRDYXRlZ29yeSA9IGNhdGVnb3J5OwogICAgICAgICAgICB0aGlzLmNydW1icy5hZGRDYXRlZ29yeS50ZXh0ID0gJ0FkZCAnICsgdXBwZXJGaXJzdExldHRlcihjYXRlZ29yeSk7CiAgICAgICAgICAgIHRoaXMuc2hvd0FkZERpYWxvZyA9IHRydWU7CiAgICAgICAgfSwKICAgICAgICBtb2RpZnlEaWFsb2coY3J1bWJTZWxlY3Rpb24pIHsKICAgICAgICAgICAgZm9yIChjb25zdCBjcnVtYiBpbiB0aGlzLmNydW1icykgewogICAgICAgICAgICAgICAgdGhpcy5jcnVtYnNbY3J1bWJdLmRpc2FibGVkID0gY3J1bWIgIT09IGNydW1iU2VsZWN0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXRIeXBvdGhlc2lzRnJvbVN0b3JlKCkgewogICAgICAgICAgICBjb25zdCBoeXBvdGhlc2lzID0gdGhpcy5nZXRTYXZlZEh5cG90aGVzaXNCeUlkKGRlY29kZVVSSUNvbXBvbmVudCh0aGlzLnJvdXRlUGFyYW1zLmlkKSk7CiAgICAgICAgICAgIGlmIChoeXBvdGhlc2lzICYmIE9iamVjdC5rZXlzKGh5cG90aGVzaXMpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHRoaXMuaHlwb3RoZXNpc0NsdXN0ZXJEZXRhaWxzID0gaHlwb3RoZXNpczsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgdXBkYXRlSHlwb3RoZXNpc0RldGFpbHMoY2x1c3RlckFkZCkgewogICAgICAgICAgICBjbHVzdGVyQWRkW1tUQUJMRUZJRUxETUFQUElORy5jYXRlZ29yeV1dID0gdGhpcy5zZWxlY3RlZEFkZENhdGVnb3J5OwogICAgICAgICAgICBjbHVzdGVyQWRkW1RBQkxFRklFTERNQVBQSU5HLmhpZ2hsaWdodF0gPSB0cnVlOwogICAgICAgICAgICBjb25zdCBkb2N1bWVudHMgPSBjbHVzdGVyQWRkLmhhc093blByb3BlcnR5KCdtZW1iZXJzJykgPyBbLi4ubmV3IFNldChjbHVzdGVyQWRkLm1lbWJlcnMuZmxhdE1hcChtZW1iZXIgPT4gbWVtYmVyLmRvY3MpKV0gOiBbXTsKICAgICAgICAgICAgY29uc3QgZmlsbGVycyA9IGNsdXN0ZXJBZGQuaGFzT3duUHJvcGVydHkoVEFCTEVGSUVMRE1BUFBJTkcucHJvdG90eXBlKSA/IFsuLi5uZXcgU2V0KGNsdXN0ZXJBZGQucHJvdG90eXBlLmFyZ3VtZW50cy5mbGF0TWFwKGFyZ3VtZW50ID0+IHsKICAgICAgICAgICAgICAgIGFyZ3VtZW50LmZpbGxlcnMubWFwKGZpbGxlciA9PiB7CiAgICAgICAgICAgICAgICAgICAgZmlsbGVyLmNsdXN0ZXJJZHMgPSBbZmlsbGVyLmlkXTsKICAgICAgICAgICAgICAgICAgICBmaWxsZXJbVEFCTEVGSUVMRE1BUFBJTkcuaGlnaGxpZ2h0XSA9IHRydWU7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudC5maWxsZXJzOwogICAgICAgICAgICB9KSldIDogW107CgogICAgICAgICAgICAvL0lmIHRoZSBoeXBvdGhlc2lzIGRvZXMgbm90IGhhdmUgbWVtYmVycywgdGhlbiBpdCBoYXMgYWxyZWFkeSBiZWVuIGZvcm1hdHRlZC4gSW4gdGhpcyBjYXNlLCBpbiBvcmRlcgogICAgICAgICAgICAvL3RvIGFkZCBhIG1lbWJlciwgdGhlIG1lbWJlciBkYXRhIG11c3QgYmUgZm9ybWF0dGVkIGZpcnN0LiBPdGhlcndpc2UsIHRoZSBkYXRhIGNhbiBiZSBhZGRlZCBhcyBpcwogICAgICAgICAgICBpZighdGhpcy5oeXBvdGhlc2lzQ2x1c3RlckRldGFpbHMubWVtYmVycykgewogICAgICAgICAgICAgICAgdGhpcy5zZXRIeXBvdGhlc2lzRnJvbVN0b3JlKCk7CiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRBZGRlZENsdXN0ZXIgPSBmb3JtYXRDbHVzdGVyKGNsdXN0ZXJBZGQsIERBVEFUWVBFUy5oeXBvdGhlc2lzLmlkKTsKICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdEFkZGVkRW50aXRpZXMgPSBmb3JtYXRIeXBvdGhlc2lzRW50aXRpZXMoZmlsbGVycyk7CgogICAgICAgICAgICAgICAgdGhpcy5oeXBvdGhlc2lzQ2x1c3RlckRldGFpbHNbCiAgICAgICAgICAgICAgICAgICAgY2x1c3RlckFkZC5jYXRlZ29yeSA9PT0gREFUQVRZUEVTLmV2ZW50VHlwZS5pZCA/CiAgICAgICAgICAgICAgICAgICAgICAgIFRBQkxFRklFTERNQVBQSU5HLmV2ZW50TGlzdCA6CiAgICAgICAgICAgICAgICAgICAgICAgIFRBQkxFRklFTERNQVBQSU5HLnJlbGF0aW9uTGlzdAogICAgICAgICAgICAgICAgICAgIF0ucHVzaChmb3JtYXRBZGRlZENsdXN0ZXIpOwoKICAgICAgICAgICAgICAgIHRoaXMuaHlwb3RoZXNpc0NsdXN0ZXJEZXRhaWxzW1RBQkxFRklFTERNQVBQSU5HLmVudGl0eUxpc3RdID0KICAgICAgICAgICAgICAgICAgICBkZWR1cGxpY2F0ZUFycmF5KFsuLi50aGlzLmh5cG90aGVzaXNDbHVzdGVyRGV0YWlsc1tUQUJMRUZJRUxETUFQUElORy5lbnRpdHlMaXN0XSwgLi4uZm9ybWF0QWRkZWRFbnRpdGllc10pOwogICAgICAgICAgICAgICAgdGhpcy5oeXBvdGhlc2lzQ2x1c3RlckRldGFpbHNbVEFCTEVGSUVMRE1BUFBJTkcuZG9jdW1lbnRMaXN0XSA9CiAgICAgICAgICAgICAgICAgICAgc29ydEFycmF5T2ZPYmplY3RzKGRlZHVwbGljYXRlQXJyYXkoWy4uLnRoaXMuaHlwb3RoZXNpc0NsdXN0ZXJEZXRhaWxzW1RBQkxFRklFTERNQVBQSU5HLmRvY3VtZW50TGlzdF0sIC4uLmRvY3VtZW50c10pKTsKICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSHlwb3RoZXNpc1NlbGVjdGlvbih0aGlzLmh5cG90aGVzaXNDbHVzdGVyRGV0YWlscyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmh5cG90aGVzaXNDbHVzdGVyRGV0YWlscy5tZW1iZXJzLnB1c2goY2x1c3RlckFkZCk7CiAgICAgICAgICAgICAgICB0aGlzLmh5cG90aGVzaXNDbHVzdGVyRGV0YWlscy5maWxsZXJzID0gZGVkdXBsaWNhdGVBcnJheShbLi4udGhpcy5oeXBvdGhlc2lzQ2x1c3RlckRldGFpbHMuZmlsbGVycywgLi4uZmlsbGVyc10pOwogICAgICAgICAgICAgICAgdGhpcy5oeXBvdGhlc2lzQ2x1c3RlckRldGFpbHNbVEFCTEVGSUVMRE1BUFBJTkcuZG9jdW1lbnRMaXN0XSA9IGRlZHVwbGljYXRlQXJyYXkoWy4uLnRoaXMuaHlwb3RoZXNpc0NsdXN0ZXJEZXRhaWxzW1RBQkxFRklFTERNQVBQSU5HLmRvY3VtZW50TGlzdF0sIC4uLmRvY3VtZW50c10pOwogICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIeXBvdGhlc2lzU2VsZWN0aW9uKGZvcm1hdEh5cG90aGVzaXNDbHVzdGVyKHRoaXMuaHlwb3RoZXNpc0NsdXN0ZXJEZXRhaWxzLCBEQVRBVFlQRVMuaHlwb3RoZXNpcy5pZCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnVwZGF0ZVNhdmVkSHlwb3RoZXNlcyh7CiAgICAgICAgICAgICAgICBpZDogdGhpcy5oeXBvdGhlc2lzU2VsZWN0aW9uW1RBQkxFRklFTERNQVBQSU5HLmlkVXJpXSwKICAgICAgICAgICAgICAgIGRldGFpbHM6IHRoaXMuaHlwb3RoZXNpc1NlbGVjdGlvbgogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIHVwZGF0ZUFkZGVkU3RhdHVzKHJvd0l0ZW0pIHsKICAgICAgICAgICAgLy9TcGVjaWZpY2FsbHkgZm9yIHVwZGF0aW5nKHJlbW92aW5nIHRoZSBoaWdobGlnaHRpbmcgZmVhdHVyZSkgYSBtZW1iZXIgb2YgdGhlIHNhdmVkIGh5cG90aGVzaXMKICAgICAgICAgICAgY29uc3QgaHlwb3RoZXNpc1VyaSA9IHRoaXMuaHlwb3RoZXNpc1NlbGVjdGlvbltUQUJMRUZJRUxETUFQUElORy5pZFVyaV07CiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSByb3dJdGVtID8gcm93SXRlbSA6IHRoaXMubm9kZVNlbGVjdGlvbjsKICAgICAgICAgICAgaWYodGhpcy5zYXZlZEh5cG90aGVzZXMuaGFzT3duUHJvcGVydHkoaHlwb3RoZXNpc1VyaSkgJiYgaXRlbS5oYXNPd25Qcm9wZXJ0eShUQUJMRUZJRUxETUFQUElORy5jbHVzdGVyVXJpKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkSXRlbSA9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlZEh5cG90aGVzZXNbaHlwb3RoZXNpc1VyaV1bcGx1cmFsaXplKGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcuY2F0ZWdvcnldKV0uCiAgICAgICAgICAgICAgICAgICAgZmluZCgobWVtYmVyKSA9PiBtZW1iZXJbVEFCTEVGSUVMRE1BUFBJTkcuY2x1c3RlclVyaV0gPT09IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcuY2x1c3RlclVyaV0pOwogICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtW1RBQkxFRklFTERNQVBQSU5HLmhpZ2hsaWdodF0gPSBmYWxzZTsKICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSHlwb3RoZXNpc01lbWJlcih7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGh5cG90aGVzaXNVcmksCiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IHBsdXJhbGl6ZShzZWxlY3RlZEl0ZW0uY2F0ZWdvcnkpLAogICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHNlbGVjdGVkSXRlbQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cgp9Cg=="},{"version":3,"sources":["HypothesisDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"HypothesisDetails.vue","sourceRoot":"src/views/analyze","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <div class=\"page-content\">\n        <HypothesisDialog\n                :category=\"selectedCategory\"\n                :showDialog=\"showDialog\"\n                :crumbs=\"crumbs\"\n                @crumbSelection=\"modifyDialog($event)\"\n                @closeDialog=\"showAddDialog = false\"\n                @addCluster=\"updateHypothesisDetails($event)\"\n        ></HypothesisDialog>\n        <div class=\"kb-details\">\n            <div class=\"kb-description-wrapper\">\n                <div class=\"kb-heading\">{{hypothesisSelection[TABLEFIELDMAPPING.headline]}}</div>\n                <div><span class=\"kb-labels\">Category: </span><span>{{getClusterCategory()}}</span></div>\n                <div class=\"row-wrapper-flex\">\n                    <div class=\"page-header-left\"><span class=\"kb-labels\">Hypothesis ID: </span><span>{{hypothesisSelection[TABLEFIELDMAPPING.idUri]}}</span></div>\n                    <div class=\"page-header-right\">\n                        <span class=\"icon-wrapper-div\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-graphql'\" :message=\"'View as graph'\"></InfoTooltip></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"section-space\">\n            <div class=\"icon-justify-right\">\n                <span class=\"icon-wrapper-div\" @click.prevent=\"openDialog(DATATYPES.eventType.id)\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-plus-thick'\" :message=\"'Add Event'\"></InfoTooltip></span>\n                <span class=\"icon-wrapper-div\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-pencil'\" :message=\"'Edit Mode'\"></InfoTooltip></span>\n            </div>\n            <DataTable\n                    :data=\"eventData\"\n                    :sort=\"defaultSort\"\n                    :loading=\"loading\"\n                    :paging=\"defaultPaging\"\n                    :tableConfiguration=\"getTableConfiguration(DATATYPES.eventType.id)\"\n                    :statusMessage=\"Object.keys(eventData).length > 0 ? statusMessage : NODATAMESSAGE\"\n                    @updateItem=\"updateAddedStatus($event)\"\n                    @currentItems=\"updateAddedStatus()\"\n            ></DataTable>\n        </div>\n        <div class=\"section-space\">\n            <DataTable\n                :data=\"entityData\"\n                :sort=\"entitySort\"\n                :loading=\"loading\"\n                :paging=\"defaultPaging\"\n                :tableConfiguration=\"getTableConfiguration(DATATYPES.entityType.id)\"\n                :statusMessage=\"Object.keys(entityData).length > 0 ? statusMessage : NODATAMESSAGE\"\n                @updateItem=\"updateAddedStatus($event)\"\n                @currentItems=\"updateAddedStatus()\"\n            ></DataTable>\n        </div>\n        <div class=\"section-space\">\n            <div class=\"icon-justify-right\">\n                <span class=\"icon-wrapper-div\" @click.prevent=\"openDialog(DATATYPES.relationType.id)\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-plus-thick'\" :message=\"'Add Relation'\"></InfoTooltip></span>\n                <span class=\"icon-wrapper-div\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-pencil'\" :message=\"'Edit Mode'\"></InfoTooltip></span>\n            </div>\n            <DataTable\n                :data=\"relationData\"\n                :sort=\"defaultSort\"\n                :loading=\"loading\"\n                :paging=\"defaultPaging\"\n                :tableConfiguration=\"getTableConfiguration(DATATYPES.relationType.id)\"\n                :statusMessage=\"Object.keys(relationData).length > 0 ? statusMessage : NODATAMESSAGE\"\n                @updateItem=\"updateAddedStatus($event)\"\n                @currentItems=\"updateAddedStatus()\"\n            ></DataTable>\n        </div>\n        <DocumentGrid v-if=\"loading===false\" :data=\"documentList\"></DocumentGrid>\n    </div>\n</template>\n\n<script>\n    import {\n        TABLEFIELDMAPPING,\n        DATATYPES,\n        LOADINGMESSAGE,\n        NODATAMESSAGE,\n        VUEROUTES,\n        TABLESELECTIONS,\n        PARAMETERNAMES,\n        upperFirstLetter,\n        formatCluster,\n        formatHypothesisCluster,\n        formatHypothesisEntities,\n        deduplicateArray,\n        prettyPluralize,\n        pluralize,\n        sortArrayOfObjects,\n        TableSettings,\n        HeaderConfig,\n        SecondaryCaption,\n        SecondaryExpand\n    } from '../../utils';\n    import DataTable from '@/components/DataTable';\n    import DocumentGrid from '@/components/DocumentGrid';\n    import QuerySubmissionMixin from '@/mixins/QuerySubmissionMixin';\n    import RouteParametersMixin from '@/mixins/RouteParametersMixin';\n    import InfoTooltip from '@/components/InfoTooltip';\n    import HypothesisDialog from '@/components/forms/HypothesisDialog';\n    import API from '../../api';\n    import {mapActions, mapMutations, mapGetters, mapState} from 'vuex';\n\n    class BreadCrumb {\n        constructor (id, text, disabled) {\n            this.id = id;\n            this.text = text;\n            this.disabled = disabled;\n        }\n    }\n\n    export default {\n        name: 'HypothesisDetails',\n        mixins: [QuerySubmissionMixin, RouteParametersMixin],\n        components: {DataTable, DocumentGrid, InfoTooltip, HypothesisDialog},\n        data: () => ({\n            statusMessage: '',\n            routeId: '',\n            entitySort: {},\n            defaultSort: {},\n            defaultPaging: null,\n            tableSetup: {},\n            eventOptions: [],\n            typeOptions: [],\n            crumbs: {\n                addCategory : new BreadCrumb('addCategory', 'Add Event', false),\n                addArgument : new BreadCrumb('addArgument', 'Add Arguments', true),\n                review : new BreadCrumb('review', 'Review', true),\n            },\n            selectedAddCategory: '',\n            showAddDialog: false,\n            hypothesisClusterDetails: {}\n        }),\n        created() {\n            this.TABLESELECTIONS = TABLESELECTIONS;\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.DATATYPES = DATATYPES;\n            this.VUEROUTES = VUEROUTES;\n            this.NODATAMESSAGE = NODATAMESSAGE;\n            this.entitySort = {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.headline, [TABLESELECTIONS.sortDesc]: false};\n            this.defaultSort = {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.entityCount, [TABLESELECTIONS.sortDesc]: true};\n            this.selectedAddCategory = DATATYPES.eventType.id;\n        },\n        mounted() {\n            if(this.$route.query.hasOwnProperty(PARAMETERNAMES.datasoure)) {\n                if(this.currentDataSource !== this.$route.query[PARAMETERNAMES.datasoure]) {\n                    this.updateCurrentDataSource(this.$route.query[PARAMETERNAMES.datasoure]);\n                }\n            }\n            this.refreshData();\n\n            //load data, if data has not been previously loaded\n            for(const type of [DATATYPES.eventType.id, DATATYPES.relationType.id]) {\n                if(Object.keys(this.knowledgeBase).length === 0 || !this.knowledgeBase[type]) {\n                    this.loadData(type, true);\n                }\n            }\n        },\n        computed: {\n            ...mapState(['nodeSelection', 'currentDataSource', 'knowledgeBase', 'savedHypotheses', 'hypothesisSelection', 'savedUrlParameters']),\n            ...mapGetters(['getStoreByRoute', 'getSavedHypothesisById']),\n            routeParams() {\n                return this.$route.params;\n            },\n            entityData() {\n                let entityData = this.hypothesisSelection[pluralize(DATATYPES.entityType.id)];\n                return entityData ? entityData: [];\n            },\n            eventData() {\n                let eventData = this.hypothesisSelection[pluralize(DATATYPES.eventType.id)];\n                return eventData ? Object.values(eventData): [];\n            },\n            relationData() {\n                let relationData = this.hypothesisSelection[pluralize(DATATYPES.relationType.id)];\n                return relationData ? Object.values(relationData): [];\n            },\n            documentList() {\n                return this.hypothesisSelection[TABLEFIELDMAPPING.documentList];\n            },\n            selectedCategory() {\n                return this.selectedAddCategory;\n            },\n            showDialog() {\n                return this.showAddDialog;\n            }\n\n        },\n        methods: {\n            ...mapMutations(['updateSavedHypotheses', 'updateHypothesisMember', 'updateHypothesisSelection']),\n            ...mapActions(['updateCurrentDataSource']),\n            getClusterCategory() {\n                if(this.routeParams.id !== this.routeId) {\n                    this.routeId = this.routeParams.id;\n                }\n\n                return upperFirstLetter(DATATYPES.hypothesis.display);\n            },\n            getDefaultTableConfiguration(category) {\n                let tableConfiguration = {};\n                if(category === DATATYPES.entityType.id) {\n                    tableConfiguration = {\n                        tableSettings: new TableSettings(TABLEFIELDMAPPING.clusterUri, false, '', '', false, false, false),\n                        primaryHeaders: [\n                            new HeaderConfig('Name', 'start', true, TABLEFIELDMAPPING.headline),\n                            new HeaderConfig('ID', 'start', true, TABLEFIELDMAPPING.id),\n                            new HeaderConfig('Types', 'start', true, TABLEFIELDMAPPING.types)\n                        ]\n                    }\n                }\n                else {\n                    tableConfiguration = {\n                        tableSettings: new TableSettings(TABLEFIELDMAPPING.clusterUri, true, '', '', false, false, false, TABLEFIELDMAPPING.highlight),\n                        primaryHeaders: [\n                            new HeaderConfig('Description', 'start', true, TABLEFIELDMAPPING.headline),\n                            new HeaderConfig('ID', 'start', true, TABLEFIELDMAPPING.id),\n                            new HeaderConfig('Types', 'start', true, TABLEFIELDMAPPING.types),\n                            new HeaderConfig('Arguments', 'center', true, TABLEFIELDMAPPING.entityCount),\n                            new HeaderConfig('', 'center', false, 'data-table-expand')\n                        ],\n                        secondaryHeaders: {\n                            caption: new SecondaryCaption(TABLEFIELDMAPPING.prototype, TABLEFIELDMAPPING.entityList, TABLEFIELDMAPPING.roles),\n                            expanded: new SecondaryExpand(TABLEFIELDMAPPING.prototype, TABLEFIELDMAPPING.entityList,\n                                [\n                                    new HeaderConfig('Name', 'start', false, TABLEFIELDMAPPING.headline),\n                                    new HeaderConfig('ID', 'start', false, TABLEFIELDMAPPING.clusterIdList),\n                                    new HeaderConfig('Roles', 'start', false, TABLEFIELDMAPPING.roles),\n                                    new HeaderConfig('Types', 'start', false, TABLEFIELDMAPPING.types)\n                                ]\n                            )\n                        }\n                    }\n                }\n                return tableConfiguration;\n            },\n            refreshData() {\n                this.updateHypothesisSelection({});\n                this.loading = true;\n                this.statusMessage = LOADINGMESSAGE;\n                const hypothesis = this.getSavedHypothesisById(decodeURIComponent(this.routeParams.id));\n                //If hypothesis has been edited and saved, retrieve the edited hypothesis from the VUE store, otherwise\n                //retrieve the hypothesis from the triplestore\n                if(hypothesis && Object.keys(hypothesis).length > 0) {\n                    this.hypothesisClusterDetails = hypothesis;\n                    this.updateHypothesisSelection(hypothesis);\n                    this.loading = false;\n                }\n                else {\n                    API.getClusterDetails(decodeURIComponent(this.routeParams.id), DATATYPES.hypothesis.id, this.currentDataSource).then((response) => {\n                        if (response.data && Object.keys(response.data).length > 0) {\n                            this.hypothesisClusterDetails = response.data;\n                            this.updateHypothesisSelection(formatHypothesisCluster(response.data, DATATYPES.hypothesis.id));\n                        } else if (response.statusMessage && response.statusMessage.length > 0) {\n                            this.statusMessage = response.statusMessage;\n                            this.updateHypothesisSelection({});\n                        }\n                        this.loading = false;\n                    });\n                }\n            },\n            getTableConfiguration(category) {\n                let tableConfig = this.getDefaultTableConfiguration(category);\n                tableConfig.tableSettings.tableHeading = prettyPluralize(category);\n                return tableConfig;\n            },\n            openDialog(category) {\n                this.selectedAddCategory = category;\n                this.crumbs.addCategory.text = 'Add ' + upperFirstLetter(category);\n                this.showAddDialog = true;\n            },\n            modifyDialog(crumbSelection) {\n                for (const crumb in this.crumbs) {\n                    this.crumbs[crumb].disabled = crumb !== crumbSelection;\n                }\n            },\n            setHypothesisFromStore() {\n                const hypothesis = this.getSavedHypothesisById(decodeURIComponent(this.routeParams.id));\n                if (hypothesis && Object.keys(hypothesis).length > 0) {\n                    this.hypothesisClusterDetails = hypothesis;\n                }\n            },\n            updateHypothesisDetails(clusterAdd) {\n                clusterAdd[[TABLEFIELDMAPPING.category]] = this.selectedAddCategory;\n                clusterAdd[TABLEFIELDMAPPING.highlight] = true;\n                const documents = clusterAdd.hasOwnProperty('members') ? [...new Set(clusterAdd.members.flatMap(member => member.docs))] : [];\n                const fillers = clusterAdd.hasOwnProperty(TABLEFIELDMAPPING.prototype) ? [...new Set(clusterAdd.prototype.arguments.flatMap(argument => {\n                    argument.fillers.map(filler => {\n                        filler.clusterIds = [filler.id];\n                        filler[TABLEFIELDMAPPING.highlight] = true;\n                    });\n                    return argument.fillers;\n                }))] : [];\n\n                //If the hypothesis does not have members, then it has already been formatted. In this case, in order\n                //to add a member, the member data must be formatted first. Otherwise, the data can be added as is\n                if(!this.hypothesisClusterDetails.members) {\n                    this.setHypothesisFromStore();\n                    const formatAddedCluster = formatCluster(clusterAdd, DATATYPES.hypothesis.id);\n                    const formatAddedEntities = formatHypothesisEntities(fillers);\n\n                    this.hypothesisClusterDetails[\n                        clusterAdd.category === DATATYPES.eventType.id ?\n                            TABLEFIELDMAPPING.eventList :\n                            TABLEFIELDMAPPING.relationList\n                        ].push(formatAddedCluster);\n\n                    this.hypothesisClusterDetails[TABLEFIELDMAPPING.entityList] =\n                        deduplicateArray([...this.hypothesisClusterDetails[TABLEFIELDMAPPING.entityList], ...formatAddedEntities]);\n                    this.hypothesisClusterDetails[TABLEFIELDMAPPING.documentList] =\n                        sortArrayOfObjects(deduplicateArray([...this.hypothesisClusterDetails[TABLEFIELDMAPPING.documentList], ...documents]));\n                    this.updateHypothesisSelection(this.hypothesisClusterDetails);\n                }\n                else {\n                    this.hypothesisClusterDetails.members.push(clusterAdd);\n                    this.hypothesisClusterDetails.fillers = deduplicateArray([...this.hypothesisClusterDetails.fillers, ...fillers]);\n                    this.hypothesisClusterDetails[TABLEFIELDMAPPING.documentList] = deduplicateArray([...this.hypothesisClusterDetails[TABLEFIELDMAPPING.documentList], ...documents]);\n                    this.updateHypothesisSelection(formatHypothesisCluster(this.hypothesisClusterDetails, DATATYPES.hypothesis.id));\n                }\n\n                this.updateSavedHypotheses({\n                    id: this.hypothesisSelection[TABLEFIELDMAPPING.idUri],\n                    details: this.hypothesisSelection\n                });\n            },\n            updateAddedStatus(rowItem) {\n                //Specifically for updating(removing the highlighting feature) a member of the saved hypothesis\n                const hypothesisUri = this.hypothesisSelection[TABLEFIELDMAPPING.idUri];\n                const item = rowItem ? rowItem : this.nodeSelection;\n                if(this.savedHypotheses.hasOwnProperty(hypothesisUri) && item.hasOwnProperty(TABLEFIELDMAPPING.clusterUri))\n                {\n                    let selectedItem =\n                        this.savedHypotheses[hypothesisUri][pluralize(item[TABLEFIELDMAPPING.category])].\n                        find((member) => member[TABLEFIELDMAPPING.clusterUri] === item[TABLEFIELDMAPPING.clusterUri]);\n                    selectedItem[TABLEFIELDMAPPING.highlight] = false;\n                    this.updateHypothesisMember({\n                        id: hypothesisUri,\n                        category: pluralize(selectedItem.category),\n                        details: selectedItem\n                    });\n                }\n            }\n        }\n\n    }\n</script>\n\n"]}]}