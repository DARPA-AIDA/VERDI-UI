{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/claims/ClaimFramesList.vue?vue&type=style&index=0&id=3a30e3e2&lang=scss&scoped=true&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/claims/ClaimFramesList.vue","mtime":1641326767935},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/css-loader/dist/cjs.js","mtime":1641411773021},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1641411774047},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/postcss-loader/src/index.js","mtime":1641411773350},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/sass-loader/dist/cjs.js","mtime":1641411772200},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5xdWVyeS1kaXYgewogICAgQGV4dGVuZCAua2ItZGVzY3JpcHRpb24td3JhcHBlcjsKICAgIHBhZGRpbmc6IDEwcHggMDsKICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKfQoKLnF1ZXJ5LWZpZWxkLWNvbHVtbi13cmFwcGVyewogICAgQGluY2x1ZGUgZmxleC1jb2x1bW4tbm93cmFwOwogICAgcGFkZGluZyA6IDAgNHB4IDZweCAwOwp9CgoubG9hZGluZy1zZWN0aW9uIHsKICAgIG1hcmdpbjogNDhweCAwOwp9CgoubG9hZGluZy1tZXNzYWdlLWNsZWFyIHsKICAgIEBpbmNsdWRlIGZsZXgtcm93LW5vd3JhcDsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgaGVpZ2h0OiA2MHB4OwogICAgcGFkZGluZzogMTZweDsKfQoKLnRvcGljLXNwYWNlOm5vdCg6Zmlyc3QtY2hpbGQpIHsKICAgIG1hcmdpbjogNDBweCAwIDMycHg7Cn0KCi50b3BpYy10aXRsZSB7CiAgICBmb250LXNpemU6IDE4cHg7CiAgICBAZXh0ZW5kIC5ib2xkLXRleHQ7CiAgICB3aWR0aDogMTAwJTsKICAgIGNvbG9yOiAkdGhlbWUtdGVhbC10ZXh0OwogICAgbGluZS1oZWlnaHQ6IDMycHg7CiAgICBmb250LXN0eWxlOiBpdGFsaWM7Cn0KCg=="},{"version":3,"sources":["ClaimFramesList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4QA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ClaimFramesList.vue","sourceRoot":"src/views/claims","sourcesContent":["<!--\n  - Copyright 2021 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  - Created by s.nordt on 11/23/21\n-->\n\n<template>\n    <div class=\"page-content\">\n        <div class=\"kb-details\">\n            <div class=\"kb-description-wrapper\">\n                <div class=\"element-list-header\">\n                    <div class=\"primary-page-header-left\">Claim Frames</div>\n                </div>\n            </div>\n        </div>\n <!--       <Claims :searchType=\"SEARCHTYPES.multi\" :claimSearchFilters=\"formattedClaims\" @completedSearch=completedSearch($event) ></Claims>-->\n        <div v-if=\"loading===true\" class=\"loading-section\">\n            <v-progress-linear indeterminate></v-progress-linear>\n            <div class=\"loading-message-clear\">{{statusMessage}}</div>\n        </div>\n        <div v-else>\n            <div v-if=\"statusMessage === NODATAMESSAGE\"  class=\"loading-message-clear\">{{statusMessage}}</div>\n            <div v-else-if=\"topics && Object.keys(topics).length > 0 && claimFrames && Object.keys(claimFrames).length > 0\">\n                <div v-for=\"(topic, topicIndex) in Object.keys(topics)\" :key=\"topicIndex\" class=\"topic-space\">\n                    <div class=\"element-list-header\">\n                        <div class=\"page-header-left topic-title\">{{topic}}</div>\n                        <div class=\"page-header-right\">\n                            <div class=\"button-icon\" @click=\"toggleTopicSection(topicIndex)\">\n                                <InfoTooltip :ref=\"getRefId(topicIndex)\" :message=\"toggleTopics[getRefId(topicIndex)].message\" :icon=\"toggleTopics[getRefId(topicIndex)].icon\" :iconStyle=\"'teal-large'\"></InfoTooltip>\n                            </div>\n                        </div>\n                    </div>\n                    <div v-for=\"(subTopic, subTopicIndex) in topics[topic]\" :key=\"subTopicIndex\" :class=\"subTopicIndex > 0 && !toggleTopics[getRefId(topicIndex)].closed ? 'section-space' : ''\">\n                        <DataTable\n                                :data=\"claimFrames[topic][subTopic]\"\n                                :sort=\"sort\"\n                                :loading=\"Object.keys(claimFrames[topic][subTopic]).length === 0\"\n                                :paging=\"paging\"\n                                :tableConfiguration=\"buildTableConfiguration(subTopic, claimFrames[topic][subTopic][subTopicIndex][TABLEFIELDMAPPING.claimTemplate])\"\n                                :statusMessage=\"statusMessage\"\n                                :hideData=\"toggleTopics[getRefId(topicIndex)].closed\"\n                                :hideFooter=true\n                        ></DataTable>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import API from '../../api';\n    import DataTable from '@/components/DataTable';\n    import InfoTooltip from '@/components/InfoTooltip';\n    import { mapGetters, mapMutations, mapState } from 'vuex';\n    import {\n        TABLEFIELDMAPPING,\n        TABLESELECTIONS,\n        NODATAMESSAGE,\n        DATATYPES,\n        sortCaseInsensitive,\n        getDateString,\n        pluralize,\n        TableSettings,\n        HeaderConfig,\n        makePercentage\n    } from '../../utils';\n\n    function initialState() {\n        return {\n            sort: {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.headline, [TABLESELECTIONS.sortDesc]: false},\n            paging: {[TABLESELECTIONS.itemsPerPage]:'All'},\n            statusMessage: '',\n            claims: {},\n            claimTopics: {},\n            filterTypes: [],\n            SIN: {},\n            loading: false,\n            toggleTables: {},\n            toggleSettings: {minimize: {message:'Minimize Section', icon:'mdi-chevron-down'}, maximize: {message:'Maximize Section', icon:'mdi-chevron-up'}}\n        }\n    }\n    export default {\n        name: 'ClaimFramesList',\n        components: {DataTable, InfoTooltip},\n        data: () => (initialState()),\n        created() {\n            this.NODATAMESSAGE = NODATAMESSAGE;\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.filterTypes = [DATATYPES.topic.id, DATATYPES.subtopic.id];\n        },\n        mounted() {\n            this.setClaims();\n        },\n        computed: {\n            ...mapGetters(['getFilterKeys']),\n            ...mapState(['filters', 'filterSubmission']),\n            claimFrames() {\n                if(this.filterSubmission) {\n                    this.setClaims();\n                }\n\n                return Object.keys(this.claims).length > 0 ? this.claims : null;\n            },\n            topics() {\n                return this.claimTopics;\n            },\n            toggleTopics() {\n                return Object.keys(this.toggleTables).length > 0 ? this.toggleTables : null;\n            }\n        },\n        methods: {\n            ...mapMutations(['updateFilterSubmission']),\n            completedSearch(value) {\n                console.warn('completed search', value)\n            },\n            getPrettyLabels(items) {\n                //remove duplicates and sort\n               return  Object.keys(items) ? sortCaseInsensitive([...Object.keys(items)]) : items;\n            },\n            getRefId(id) {\n                return 'claimTopicTooltip' + id;\n            },\n            buildTableConfiguration(subTopic, claimTemplate) {\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.id, false, subTopic, claimTemplate, false, false, false, false, false, TABLEFIELDMAPPING.percentage, true),\n                    primaryHeaders: [\n                        new HeaderConfig('Description', 'start', true, TABLEFIELDMAPPING.headline),\n                        new HeaderConfig('Claimer', 'start', true, TABLEFIELDMAPPING.claimer),\n                        new HeaderConfig('Variable X', 'start', true, TABLEFIELDMAPPING.variableList),\n                        new HeaderConfig('Location', 'start', true, TABLEFIELDMAPPING.location),\n                        new HeaderConfig('Date', 'start', true, TABLEFIELDMAPPING.dates),\n                        new HeaderConfig('Importance', 'center', true, TABLEFIELDMAPPING.percentage)\n                    ]\n                };\n            },\n            toggleTopicSection(index) {\n                const toggleId = this.getRefId(index);\n                if(this.$refs[toggleId].length > 0) {\n                    const el = this.$refs[toggleId][0];\n                    if(this.toggleTables.hasOwnProperty(toggleId)) {\n                        if(el.icon === 'mdi-chevron-down') {\n                            this.toggleTables[toggleId].message = this.toggleSettings.maximize.message;\n                            this.toggleTables[toggleId].icon = this.toggleSettings.maximize.icon;\n                        }\n                        else {\n                            this.toggleTables[toggleId].message = this.toggleSettings.minimize.message;\n                            this.toggleTables[toggleId].icon = this.toggleSettings.minimize.icon;\n                        }\n                        this.toggleTables[toggleId].closed = !this.toggleTables[toggleId].closed;\n                    }\n                }\n            },\n            setClaims() {\n                //updates the claims data and member types\n                let formattedData = {};\n                this.claimTopics = {};\n                this.claims = {};\n                let toggleData = {};\n                this.loading = true;\n                this.updateFilterSubmission(false);\n                const claimFilters = {};\n\n                //if filters exist, create formatted claims to submit as API parameters\n                const filterKeys = this.getFilterKeys;\n                if (filterKeys.length > 0) {\n                    for (const type of this.filterTypes) {\n                        if(filterKeys.includes(type)) {\n                            claimFilters[pluralize(type)] = this.filters[type];\n                        }\n                    }\n                }\n\n                API.getClaimFrames(claimFilters).then(response => {\n                    const claimFrameData = response.data;\n                    if (Object.keys(claimFrameData).length > 0) {\n                        //Map claims based on topic and then subtopic\n                        for (const claimFrame of claimFrameData) {\n                            const topic = claimFrame[TABLEFIELDMAPPING.topic];\n                            const subTopic = claimFrame[TABLEFIELDMAPPING.subtopic];\n\n                            //Create nested object's topic key\n                            if (!Object.keys(formattedData).includes(topic)) {\n                                formattedData[topic] = {};\n                            }\n\n                            //Create nested object's subtopic key under topic\n                            if (!Object.keys(formattedData[topic]).length) {\n                                formattedData[topic] = {[subTopic] : {}};\n                            }\n                            else if(!Object.keys(formattedData[topic]).includes(subTopic)) {\n                                formattedData[topic][subTopic] = {};\n                            }\n\n                            //Add names for xVariables\n                            let xVariables = [];\n                            for (const component of claimFrame.components) {\n                                if(component.propertyName === 'xVariable') {\n                                    for (const propComponent of component.values) {\n                                        xVariables.push(propComponent.componentName);\n                                    }\n                                }\n                            }\n                            claimFrame[TABLEFIELDMAPPING.variableList] = xVariables;\n\n                            claimFrame[TABLEFIELDMAPPING.headline] = claimFrame.description;\n                            claimFrame[TABLEFIELDMAPPING.percentage] = makePercentage(claimFrame.importance, 0);\n                            claimFrame[TABLEFIELDMAPPING.dates] = claimFrame.dates && [...new Set(claimFrame.dates.map(getDateString))].sort();\n                            claimFrame[TABLEFIELDMAPPING.category] = DATATYPES.topic.id\n                            const date = claimFrame.dates ? claimFrame.dates.toString() : null;\n                            const key = claimFrame.claimId + date;\n                            claimFrame[TABLEFIELDMAPPING.id] = claimFrame.claimId;\n\n                            //deduplicate\n                            if(!formattedData[topic][subTopic].hasOwnProperty(key)) {\n                                formattedData[topic][subTopic][key] = claimFrame;\n                            }\n                        }\n\n                        //remove keys from event object\n                        for(let dataTopic in formattedData) {\n                            if(formattedData.hasOwnProperty(dataTopic)) {\n                                for (let dataSubTopic in formattedData[dataTopic]) {\n                                    if (formattedData[dataTopic].hasOwnProperty(dataSubTopic)) {\n                                        formattedData[dataTopic][dataSubTopic] = Object.values(formattedData[dataTopic][dataSubTopic]);\n                                    }\n                                }\n                            }\n                        }\n\n                        this.claims = formattedData;\n\n                        for(const [cTopic, cSubTopic] of Object.entries(this.claims)) {\n                            this.claimTopics[cTopic] = Object.keys(cSubTopic).sort();\n                        }\n\n                        //default set up for topic sections\n                        for(let i=0; i <Object.keys(this.claimTopics).length; i++) {\n                            toggleData[this.getRefId(i)] = {message : this.toggleSettings.maximize.message, icon : this.toggleSettings.maximize.icon, closed : (Object.keys(claimFilters).length === 0)};\n                        }\n                        this.toggleTables = toggleData;\n                        this.loading = false;\n                    }\n                    else {\n                        this.statusMessage = this.NODATAMESSAGE;\n                        this.loading = false;\n                    }\n                }).catch((error) => {\n                    console.warn(error)\n                });\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .query-div {\n        @extend .kb-description-wrapper;\n        padding: 10px 0;\n        justify-content: space-between;\n    }\n\n    .query-field-column-wrapper{\n        @include flex-column-nowrap;\n        padding : 0 4px 6px 0;\n    }\n\n    .loading-section {\n        margin: 48px 0;\n    }\n\n    .loading-message-clear {\n        @include flex-row-nowrap;\n        justify-content: center;\n        height: 60px;\n        padding: 16px;\n    }\n\n    .topic-space:not(:first-child) {\n        margin: 40px 0 32px;\n    }\n\n    .topic-title {\n        font-size: 18px;\n        @extend .bold-text;\n        width: 100%;\n        color: $theme-teal-text;\n        line-height: 32px;\n        font-style: italic;\n    }\n\n</style>\n\n"]}]}