{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/forms/HypothesisDialog.vue?vue&type=style&index=0&id=633b1414&lang=scss&scoped=true&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/forms/HypothesisDialog.vue","mtime":1640207172531},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/css-loader/dist/cjs.js","mtime":1641411773021},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1641411774047},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/postcss-loader/src/index.js","mtime":1641411773350},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/sass-loader/dist/cjs.js","mtime":1641411772200},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZGlhbG9nLWJ1dHRvbi13cmFwcGVyewogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgYm90dG9tOiAwOwogICAgd2lkdGg6IDkwJTsKICAgIG1hcmdpbjogNjBweCAwIDI4cHg7CgogICAgYnV0dG9uIHsKICAgICAgICB3aWR0aDogMTAwcHg7CiAgICB9Cn0KCi5maWx0ZXItZmllbGQtd3JhcHBlcnsKICAgIEBleHRlbmQgLnNlY3Rpb24tc3BhY2U7CiAgICBAZXh0ZW5kIC5yb3ctd3JhcHBlci1mbGV4OwogICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lOwp9Ci5maWx0ZXItZmllbGQtbGFiZWx7CiAgICBAZXh0ZW5kIC5ib2xkLXRleHQ7CiAgICB3aWR0aDogODBweDsKfQouZGlhbG9nLXRleHQtaW5wdXQgewogICAgcGFkZGluZzogNHB4OwogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRjsKICAgIGNvbG9yOiAkdGhlbWUtcHJpbWFyeS1jb2xvcjsKICAgIGJvcmRlcjogc29saWQgMnB4ICR0aGVtZS1saWdodC10ZWFsLXRyYW5zcGFyZW50OwogICAgd2lkdGg6IDEwMCU7CiAgICByZXNpemU6IG5vbmU7CiAgICBtYXJnaW4tYm90dG9tOiAxNnB4Owp9Ci5ib2R5LWxhYmVsIHsKICAgIG1hcmdpbjogNjBweCAwIDRweCAwOwp9Ci52YWxpZGF0aW9uLXdyYXBwZXIgewogICAgZGlzcGxheTogZmxleDsKICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDsKICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKICAgIG1hcmdpbjogMDsKICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kOwp9Ci50YWJsZS1zY3JvbGwtZGlzcGxheSB7CiAgICBtYXgtaGVpZ2h0OiAxMzZweDsKICAgIG92ZXJmbG93LXk6IGF1dG87Cn0K"},{"version":3,"sources":["HypothesisDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HypothesisDialog.vue","sourceRoot":"src/components/forms","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <Dialog position=\"absolute\" :showDialog=\"openDialog\" @closeDialog=\"resetDialog()\">\n        <template #title>Build a Hypothesis:</template>\n        <template #breadcrumbs><BreadCrumbs :crumbs=\"crumbs\" :clickable=\"false\" @crumbSelection=\"setActiveCrumb($event)\"></BreadCrumbs></template>\n        <template #description>\n            <span class=\"form-label bold-text\"><label>Hypothesis ID</label></span>\n            <p>{{hypothesisSelection[TABLEFIELDMAPPING.idUri]}}</p>\n            <div v-if=\"crumbSelection !== crumbs.addCategory.id\">\n                <span class=\"form-label bold-text\"><label>{{selectedCatgory}} ID</label></span>\n                <p>{{selectedCluster}}</p>\n                <span class=\"form-label bold-text\"><label>{{selectedCatgory}} Description</label></span>\n                <textarea v-if=\"crumbSelection === crumbs.addArgument.id\" class=\"dialog-text-input\" rows=\"2\" cols=\"50\" v-model=\"description\"></textarea>\n                <div v-if=\"crumbSelection === crumbs.review.id\" class=\"row-wrapper-flex\">\n                    <p class=\"page-header-left\">{{description}}</p>\n                    <span class=\"icon-wrapper-div page-header-right\" @click.prevent=\"updateDialogPage(paging.previous)\">\n                        <InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-pencil'\" :message=\"'Edit Description'\" ></InfoTooltip>\n                    </span>\n                </div>\n            </div>\n        </template>\n        <template #body-label><div v-if=\"crumbSelection === crumbs.addCategory.id\" class=\"body-label\">Select the {{category}} from the knowledge base to add to the hypothesis</div></template>\n        <template #body>\n            <div v-if=\"crumbSelection === crumbs.addCategory.id\">\n                <div class=\"filter-field-wrapper\">\n                    <div class=\"filter-field-label\"><label>Type: </label></div>\n                    <div class=\"filter-wrapper flex-grow-1\">\n                        <div class=\"filter-input-box\">\n                            <AutoComplete class=\"filter-input\"\n                                          :inputValue=\"selectedType\"\n                                          :items=\"types\"\n                                          :required=\"false\"\n                                          :placeholder=\"'Search ' + selectedCatgory + ' by Type'\"\n                                          :enterKeySubmit=false\n                                          @autoCompleteSubmission=\"onFilterSubmission({[category]: $event})\"\n                                          @autoCompleteClear=\"onFilterDelete({[category]: $event})\"\n                            ></AutoComplete>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"filter-field-wrapper\">\n                    <span class=\"filter-field-label\"><label>Argument: </label></span>\n                    <div class=\"filter-wrapper flex-grow-1\">\n                        <div class=\"filter-input-box\">\n                            <AutoComplete class=\"filter-input\"\n                                          :inputValue=\"selectedArgumentName\"\n                                          :items=\"argumentNames\"\n                                          :required=\"false\"\n                                          :placeholder=\"'Search ' + selectedCatgory + ' by Argument Name'\"\n                                          :enterKeySubmit=false\n                                          @autoCompleteInputChange=\"!selectedType && argumentInputChange($event)\"\n                                          @autoCompleteSubmission=\"onFilterSubmission({[DATATYPES.argumentName.id]: $event})\"\n                                          @autoCompleteClear=\"onFilterDelete({[DATATYPES.argumentName.id]: $event})\"\n                            ></AutoComplete>\n                        </div>\n                    </div>\n                </div>\n                <span class=\"validation-wrapper\">\n                    <div class=\"validation-field-wrapper\">\n                        <span class=\"filter-field-label\"><label><span class=\"red--text\">* </span>{{selectedCatgory}}:</label></span>\n                        <div class=\"filter-wrapper flex-grow-1\">\n                            <div class=\"filter-input-box\">\n                                <AutoComplete class=\"filter-input\"\n                                              :inputValue=\"selectedCluster\"\n                                              :items=\"clusters\"\n                                              :required=\"requestToValidate\"\n                                              :message=\"loadingMessage\"\n                                              :placeholder=\"'Select ' + selectedCatgory + ' by Cluster ID'\"\n                                              :enterKeySubmit=false\n                                              @autoCompleteInputChange=\"getClusterDetails($event)\"\n                                              @autoCompleteSubmission=\"onClusterSubmission()\"\n                                              @autoCompleteClear=\"clusterId = $event\"\n                                ></AutoComplete>\n                            </div>\n                        </div>\n                    </div>\n                    <ValidationTooltip :icon=\"'mdi-alert-box'\" :message=\"'Please fill out this field.'\" :displayClass=\"'autocomplete'\" :showTooltip=\"validate\" @updateShowTooltip=\"updateShowTooltip($event)\"></ValidationTooltip>\n                </span>\n            </div>\n            <div v-if=\"crumbSelection !== crumbs.addCategory.id\">\n                <span class=\"form-label bold-text\"><label>Arguments ({{selectedClusterArguments.length}})</label></span>\n                <SimpleTable class=\"table-scroll-display\" :headers=\"argumentTableHeaders\" :data=\"selectedClusterArguments\" :scrollOn=\"false\"></SimpleTable>\n            </div>\n            <div class=\"dialog-button-wrapper\">\n                <button v-if=\"crumbSelection !== crumbs.review.id\" type=\"submit\" class=\"light-gray-submit-button\" @click.stop=\"resetDialog()\">\n                    Cancel\n                </button>\n                <button v-if=\"crumbSelection === crumbs.review.id\" type=\"submit\" class=\"light-teal-submit-button\" @click=\"updateDialogPage(paging.add)\">\n                    Add Another\n                </button>\n                <button v-if=\"crumbSelection !== crumbs.addCategory.id\" type=\"submit\" class=\"dark-teal-submit-button\" @click=\"updateDialogPage(paging.previous)\">\n                    Previous\n                </button>\n                <button v-if=\"crumbSelection !== crumbs.review.id\" type=\"submit\" class=\"dark-teal-submit-button\" @click=\"updateDialogPage(paging.next)\">\n                    Next\n                </button>\n                <button v-if=\"crumbSelection === crumbs.review.id\" type=\"submit\" class=\"dark-teal-submit-button\" @click.stop=\"addCluster()\">\n                    Done\n                </button>\n            </div>\n        </template>\n    </Dialog>\n</template>\n\n<script>\n    import {\n        TABLEFIELDMAPPING,\n        DATATYPES,\n        NODATAMESSAGE,\n        LOADINGMESSAGE,\n        getSortedTypes,\n        sortCaseInsensitive,\n        formatPrototypeArguments,\n        upperFirstLetter,\n        HeaderConfig\n    } from '../../utils';\n    import Dialog from '@/components/Dialog';\n    import BreadCrumbs from '@/components/BreadCrumbs';\n    import AutoComplete from '@/components/AutoComplete';\n    import SimpleTable from '@/components/SimpleTable';\n    import InfoTooltip from '@/components/InfoTooltip';\n    import QuerySubmissionMixin from '@/mixins/QuerySubmissionMixin';\n    import API from '../../api';\n    import ValidationTooltip from '@/components/ValidationTooltip';\n    import {mapState} from 'vuex';\n\n\n\n    function initialState() {\n        return {\n            TABLEFIELDMAPPING: TABLEFIELDMAPPING,\n            DATATYPES: DATATYPES,\n            clusterOptions: [],\n            typeOptions: [],\n            argumentOptions: [],\n            clusterId: null,\n            typeValue: null,\n            argumentValue: null,\n            activeCrumb: null,\n            categoryDescription: null,\n            query: {},\n            argumentTableHeaders : [\n                new HeaderConfig('Name', 'start', false, TABLEFIELDMAPPING.headline),\n                new HeaderConfig('Roles', 'start', false, TABLEFIELDMAPPING.roles),\n                new HeaderConfig('Types', 'start', false, TABLEFIELDMAPPING.types)\n            ],\n            selectedClusterDetails: {},\n            selectedClusterArguments: [],\n            requestToValidate: false,\n            paging: { previous: 'previous', next: 'next', add: 'add'},\n            loadingMessage: NODATAMESSAGE\n        }\n    }\n\n    export default {\n        name: 'HypothesisDialog',\n        mixins: [QuerySubmissionMixin],\n        components: {BreadCrumbs, AutoComplete, Dialog, SimpleTable, ValidationTooltip, InfoTooltip},\n        props: {\n            category: String,\n            showDialog: Boolean,\n            crumbs: Object\n        },\n        data: () => (initialState()),\n        computed: {\n            ...mapState(['hypothesisSelection', 'categoryArguments', 'categoryTypes', 'knowledgeBase', 'defaultKbDataSource']),\n            clusters() {\n                return this.clusterOptions.length === 0 && this.knowledgeBase[this.category] ? Object.keys(this.knowledgeBase[this.category]) : this.clusterOptions;\n            },\n            types() {\n                return this.typeOptions.length === 0 ? this.categoryTypes[this.category] : this.typeOptions;\n            },\n            argumentNames() {\n                return this.argumentOptions.length === 0 ? this.categoryArguments[this.category] : this.argumentOptions;\n            },\n            selectedCluster() {\n                return this.clusterId;\n            },\n            selectedCatgory() {\n                return upperFirstLetter(this.category)\n            },\n            selectedType() {\n               return this.typeValue;\n            },\n            selectedArgumentName() {\n                return this.argumentValue;\n            },\n            openDialog() {\n                this.setActiveCrumb(this.crumbs.addCategory.id);\n                return this.showDialog;\n            },\n            crumbSelection() {\n                return this.activeCrumb;\n            },\n            validate() {\n                return this.requestToValidate;\n            },\n            description: {\n                get: function () {\n                    return this.categoryDescription != null ? this.categoryDescription : this.clusterId;\n                },\n                set: function (v) {\n                    this.categoryDescription = v;\n                }\n            }\n        },\n        methods: {\n            argumentInputChange(text) {\n                //To requery for arguments - the argument name must be longer than 2 characters,\n                // not equal to the previously entered argument name\n                if(text && text.length > 2 && text !== this.argumentValue) {\n                    API.getCategoryArguments(\n                        this.defaultKbDataSource, this.category, text\n                    ).then((response) => {\n                        this.argumentOptions = response.data;\n                    });\n                }\n            },\n            onFilterSubmission(selection) {\n                //if a type or argument name is selected, set the value for the autocomplete input\n                // and add it to the query object\n                if(selection[DATATYPES.argumentName.id]) {\n                    this.argumentValue = selection[DATATYPES.argumentName.id];\n                    this.query[DATATYPES.argumentName.id] = this.argumentValue;\n                    this.getClusters();\n                }\n                else if(selection[this.category]) {\n                    this.typeValue = selection[this.category];\n                    this.query[this.category] = this.typeValue;\n                    this.getClusters();\n                }\n            },\n            onFilterDelete(selection) {\n                //empty types or arguments so that the values can be reset in the computed variables\n                if(selection[DATATYPES.argumentName.id] === '') {\n                    delete this.query[DATATYPES.argumentName.id];\n                    this.argumentValue = null;\n                    this.typeOptions = [];\n                }\n                else if(selection[this.category] === '') {\n                    delete this.query[this.category];\n                    this.typeValue = null;\n                    this.argumentOptions = [];\n                }\n                this.getClusters();\n\n            },\n            onClusterSubmission() {\n                if(!this.clusterId || this.clusterId === '' && Object.keys(this.selectedClusterDetails).length === 0) {\n                    this.getClusterDetails(this.clusterId);\n                }\n            },\n            getClusters() {\n                //query for clusters of a specific type and/or argument\n                API.getClustersByQueryParams(\n                    this.defaultKbDataSource, this.category, this.query\n                ).then((response) => {\n                    this.clusterOptions = [];\n                    this.clusterId = null;\n                    //if there is no current argument selected, update arguments\n                    //if there is no current type selected, update types\n                    if(response.data) {\n                        for(const r of response.data) {\n                            this.clusterOptions.push(r.cluster);\n                            if(!this.typeValue) {\n                                this.typeOptions = [...this.typeOptions, ...r.types];\n                            }\n                            if(!this.argumentValue) {\n                                this.argumentOptions = [...this.argumentOptions, ...r.names];\n                            }\n                        }\n\n                        this.typeOptions = getSortedTypes(this.typeOptions);\n                        this.argumentOptions = sortCaseInsensitive(this.argumentOptions);\n\n                        //if there is only one option in the clusterOptions list, automatically populate inputValue for autocomplete\n                        if(this.clusterOptions.length === 1) {\n                            this.clusterId = this.clusterOptions[0];\n                        }\n                        else {\n                            this.clusterOptions = sortCaseInsensitive(this.clusterOptions);\n                        }\n                    }\n                });\n            },\n            getClusterDetails(id) {\n                if(id && id.length > 2 && id !== this.clusterId) {\n                    this.loadingMessage = LOADINGMESSAGE;\n                    API.getClusterDetails(\n                        id, this.category, this.defaultKbDataSource\n                    ).then((response) => {\n                        if(response.data) {\n                            this.selectedClusterDetails = response.data;\n                            this.selectedClusterArguments = formatPrototypeArguments(response.data.prototype.arguments);\n                            this.clusterId = id;\n                        }\n                        else{\n                            throw new Error(response.statusText);\n                        }\n                    }).catch(e => {\n                        this.loadingMessage = NODATAMESSAGE;\n                        console.warn('the cluster id could not be retrieved: ', e);\n                    });\n                }\n            },\n            setActiveCrumb(crumb) {\n                this.activeCrumb = crumb;\n                this.$emit('crumbSelection',crumb);\n            },\n            resetDialog() {\n                this.$emit('closeDialog');\n                Object.assign(this.$data, initialState());\n            },\n            addCluster() {\n                this.selectedClusterDetails['handle']  = this.categoryDescription ? this.categoryDescription : this.clusterId;\n                this.$emit('addCluster', this.selectedClusterDetails);\n                this.resetDialog();\n            },\n            updateShowTooltip(value) {\n                this.requestToValidate = value;\n            },\n            updateDialogPage(option) {\n                if(option === this.paging.next) {\n                    this.requestToValidate = !this.clusterId && !this.categoryDescription;\n                    if(!this.requestToValidate) {\n                        if(this.activeCrumb === this.crumbs.addCategory.id) {\n                            this.setActiveCrumb(this.crumbs.addArgument.id);\n                        }\n                        else if(this.activeCrumb === this.crumbs.addArgument.id) {\n                            this.setActiveCrumb(this.crumbs.review.id);\n                        }\n                    }\n                }\n                else if(option === this.paging.previous) {\n                    if(this.activeCrumb === this.crumbs.review.id) {\n                        this.setActiveCrumb(this.crumbs.addArgument.id);\n                    }\n                    else if(this.activeCrumb === this.crumbs.addArgument.id) {\n                        this.setActiveCrumb(this.crumbs.addCategory.id);\n                    }\n                }\n                else if(option === this.paging.add) {\n                    this.selectedClusterDetails['handle']  = this.description;\n                    this.$emit('addCluster', this.selectedClusterDetails);\n\n                    Object.assign(this.$data, initialState());\n                    this.setActiveCrumb(this.crumbs.addCategory.id);\n                }\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\n    .dialog-button-wrapper{\n        display: flex;\n        align-content: center;\n        justify-content: center;\n        position: absolute;\n        bottom: 0;\n        width: 90%;\n        margin: 60px 0 28px;\n\n        button {\n            width: 100px;\n        }\n    }\n\n    .filter-field-wrapper{\n        @extend .section-space;\n        @extend .row-wrapper-flex;\n        align-items: baseline;\n    }\n    .filter-field-label{\n        @extend .bold-text;\n        width: 80px;\n    }\n    .dialog-text-input {\n        padding: 4px;\n        background-color: #FFF;\n        color: $theme-primary-color;\n        border: solid 2px $theme-light-teal-transparent;\n        width: 100%;\n        resize: none;\n        margin-bottom: 16px;\n    }\n    .body-label {\n        margin: 60px 0 4px 0;\n    }\n    .validation-wrapper {\n        display: flex;\n        flex-flow: column nowrap;\n        align-content: center;\n        margin: 0;\n        justify-content: space-around;\n    }\n    .table-scroll-display {\n        max-height: 136px;\n        overflow-y: auto;\n    }\n</style>\n\n"]}]}