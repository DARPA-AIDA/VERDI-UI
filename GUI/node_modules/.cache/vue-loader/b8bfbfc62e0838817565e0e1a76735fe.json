{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/CardGrid.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/CardGrid.vue","mtime":1640207172525},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBTZWxlY3REcm9wZG93biBmcm9tICdAL2NvbXBvbmVudHMvU2VsZWN0RHJvcGRvd24nOwppbXBvcnQgRGF0YURpc3BsYXlNaXhpbiBmcm9tICdAL21peGlucy9EYXRhRGlzcGxheU1peGluJzsKaW1wb3J0IHtTRUxFQ1RESVNQTEFZLCBWVUVST1VURVMsIFRBQkxFRklFTERNQVBQSU5HLCBMT0FESU5HTUVTU0FHRSwgREFUQVRZUEVTLCBOT0RBVEFNRVNTQUdFLCBidWlsZFJvdXRlfSBmcm9tICcuLi91dGlscycKaW1wb3J0IHttYXBNdXRhdGlvbnN9IGZyb20gJ3Z1ZXgnOwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ0NhcmRHcmlkJywKICAgIG1peGluczogW0RhdGFEaXNwbGF5TWl4aW5dLAogICAgcHJvcHM6IHsKICAgICAgICBjYXJkQ29uZmlndXJhdGlvbjogT2JqZWN0LAogICAgICAgIHN0YXR1c01lc3NhZ2U6IFN0cmluZwogICAgfSwKICAgIGRhdGE6ICgpID0+ICh7CiAgICAgICAgaXRlbXNQZXJQYWdlQXJyYXk6IFsxMiwgMjQsIDQ4LCA5NiwgJ0FsbCddLAogICAgICAgIGhlYWRlclNlbGVjdERpc3BsYXk6ICcnLAogICAgfSksCiAgICBjcmVhdGVkKCkgewogICAgICAgIHRoaXMuVlVFUk9VVEVTID0gVlVFUk9VVEVTOwogICAgICAgIHRoaXMuVEFCTEVGSUVMRE1BUFBJTkcgPSBUQUJMRUZJRUxETUFQUElORzsKICAgICAgICB0aGlzLkxPQURJTkdNRVNTQUdFID0gTE9BRElOR01FU1NBR0U7CiAgICAgICAgdGhpcy5OT0RBVEFNRVNTQUdFID0gTk9EQVRBTUVTU0FHRTsKICAgICAgICB0aGlzLmhlYWRlclNlbGVjdERpc3BsYXkgPSBTRUxFQ1RESVNQTEFZLmJ1dHRvbjsKICAgICAgICB0aGlzLmJ1aWxkUm91dGUgPSBidWlsZFJvdXRlOwogICAgfSwKICAgIGNvbXBvbmVudHM6IHtTZWxlY3REcm9wZG93bn0sCiAgICBjb21wdXRlZDogewogICAgICAgIGdyb3VwRXhjbHVzaXZlQ2FyZEtleXMoKSB7CiAgICAgICAgICAgIGNvbnN0IGdldE9iamVjdFZhbHVlcyA9IG9iaiA9PiB0aGlzLmlzQW5PYmplY3Qob2JqKSA/IE9iamVjdC52YWx1ZXMob2JqKS5tYXAoZ2V0T2JqZWN0VmFsdWVzKS5mbGF0KCkgOiBbb2JqXTsKICAgICAgICAgICAgcmV0dXJuIGdldE9iamVjdFZhbHVlcyh0aGlzLmNhcmRDb25maWd1cmF0aW9uLmV4Y2x1c2l2ZUNhcmRLZXlzKTsKICAgICAgICB9LAogICAgICAgIHNvcnRCeSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ydC5ieSAhPT0gdW5kZWZpbmVkID8gdGhpcy5zb3J0LmJ5IDogdGhpcy5jYXJkQ29uZmlndXJhdGlvbi5jYXJkS2V5c1swXTsKICAgICAgICB9LAogICAgICAgIHNvcnREZXNjKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zb3J0LmRlc2NlbmRpbmcgIT09IHVuZGVmaW5lZCA/IHRoaXMuc29ydC5kZXNjZW5kaW5nIDogZmFsc2U7CiAgICAgICAgfSwKICAgICAgICBzb3J0SWNvbkNsYXNzKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zb3J0RGVzYyA/ICdhcnJvdy1pY29uLWRvd24nIDogJ2Fycm93LWljb24tdXAnOwogICAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgLi4ubWFwTXV0YXRpb25zKFsndXBkYXRlTm9kZVNlbGVjdGlvbiddKSwKICAgICAgICB1cGRhdGVTb3J0T3JkZXJEaXNwbGF5KCkgewogICAgICAgICAgICBsZXQgdmFsaWRWYWwgPSAhIXRoaXMuc29ydERlc2M7CiAgICAgICAgICAgIHRoaXMudXBkYXRlU29ydERlc2MoIXZhbGlkVmFsKTsKICAgICAgICB9LAogICAgICAgIGdldENhcmRJY29uKHR5cGUpIHsKICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5jYXJkQ29uZmlndXJhdGlvbi5jYXJkSWNvbnMpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhcmRDb25maWd1cmF0aW9uLmNhcmRJY29ucy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHR5cGUuaW5jbHVkZXMoa2V5KSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhcmRDb25maWd1cmF0aW9uLmNhcmRJY29uc1trZXldLmljb247CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICdtZGktY2FyZC10ZXh0LW91dGxpbmUnOwogICAgICAgIH0sCiAgICAgICAgZ2V0Q2F0ZWdvcnkoaXRlbSkgewogICAgICAgICAgICByZXR1cm4gaXRlbVtUQUJMRUZJRUxETUFQUElORy5jYXRlZ29yeV0gPwogICAgICAgICAgICAgICAgaXRlbVtUQUJMRUZJRUxETUFQUElORy5jYXRlZ29yeV0gOgogICAgICAgICAgICAgICAgaXRlbVtUQUJMRUZJRUxETUFQUElORy5wcm90b3R5cGVdID8KICAgICAgICAgICAgICAgICAgICBpdGVtW1RBQkxFRklFTERNQVBQSU5HLnByb3RvdHlwZV1bVEFCTEVGSUVMRE1BUFBJTkcuY2F0ZWdvcnldIDoKICAgICAgICAgICAgICAgICAgICBEQVRBVFlQRVMuZXZlbnRUeXBlLmlkOwogICAgICAgIH0sCiAgICAgICAgZ2V0RmllbGRWYWx1ZShpdGVtLCBrZXkpIHsKICAgICAgICAgICAgcmV0dXJuIGl0ZW1ba2V5XSA/IGl0ZW1ba2V5XSA6IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcucHJvdG90eXBlXSA/IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcucHJvdG90eXBlXVtrZXldIDogJyc7CiAgICAgICAgfSwKICAgICAgICBnZXRMaXN0SXRlbShpdGVtLCBmaWVsZCkgewogICAgICAgICAgICByZXR1cm4gaXRlbVtmaWVsZF0gPyBpdGVtW2ZpZWxkXSA6IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcucHJvdG90eXBlXSA/IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcucHJvdG90eXBlXVtmaWVsZF0gOiB7fQogICAgICAgIH0sCiAgICAgICAgZ2V0TGlzdENvdW50KGl0ZW0sIGZpZWxkKSB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0RmllbGRWYWx1ZShpdGVtLCBmaWVsZCk7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/IHZhbHVlIDogMDsKICAgICAgICB9LAogICAgICAgIGlzSWRGaWVsZChmaWVsZCkgewogICAgICAgICAgICByZXR1cm4gW1RBQkxFRklFTERNQVBQSU5HLmlkLCBUQUJMRUZJRUxETUFQUElORy5pZFVyaSwgVEFCTEVGSUVMRE1BUFBJTkcucHJvdG90eXBlSWQsIFRBQkxFRklFTERNQVBQSU5HLnByb3RvdHlwZVVyaV0uaW5jbHVkZXMoZmllbGQpOwogICAgICAgIH0sCiAgICAgICAgZ2V0VXJpKGl0ZW0sIGtleSkgewogICAgICAgICAgICByZXR1cm4ga2V5ID09PSBUQUJMRUZJRUxETUFQUElORy5pZCA/IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcuaWRVcmldIDoKICAgICAgICAgICAgICAgIGtleSA9PT0gVEFCTEVGSUVMRE1BUFBJTkcucHJvdG90eXBlSWQgPyBpdGVtW1RBQkxFRklFTERNQVBQSU5HLnByb3RvdHlwZVVyaV0gOiAnJzsKICAgICAgICB9LAogICAgICAgIHNhdmVTZWxlY3RlZERhdGEoZGF0YSkgewogICAgICAgICAgICB0aGlzLnVwZGF0ZU5vZGVTZWxlY3Rpb24oZGF0YSk7CiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["CardGrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CardGrid.vue","sourceRoot":"src/components","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <div>\n        <div class=\"element-list-header\">\n            <div v-if=\"cardConfiguration.cardSettings.tableHeading\" class=\"page-header-left bold-text\">{{cardConfiguration.cardSettings.tableHeading}}</div>\n            <div v-if=\"cardConfiguration.cardSettings.tableDescription\" class=\"page-header-left\">{{cardConfiguration.cardSettings.tableDescription}}</div>\n            <div class=\"page-header-right\">\n                <div class=\"small-header-text\">{{paginationText}}</div>\n                <div v-if=\"cardConfiguration.cardSettings.showToggleIcon\" class=\"icon-wrapper-div\">\n                    <v-icon class=\"element-card-icon\" @click=\"$emit('toggleView')\">mdi-view-list</v-icon>\n                </div>\n            </div>\n        </div>\n        <v-data-iterator\n            :items=\"data\"\n            :items-per-page=\"itemsPerPage\"\n            :page.sync=\"page\"\n            @pagination=\"updateHeaderPagination($event)\"\n            :sort-by=\"sortBy\"\n            :sort-desc=\"sortDesc\"\n            :loading=\"loading\"\n            :loading-text=\"LOADINGMESSAGE\"\n            :no-data-text=\"statusMessage ? statusMessage : NODATAMESSAGE\"\n            hide-default-footer\n        >\n            <template v-slot:header v-if=\"!hideHeader\">\n                <div class=\"grid-header-wrapper\">\n                    <div class=\"grid-header-row\">\n                        <div class=\"grid-header-menu\">\n                            <span>Order By: </span>\n                            <SelectDropdown :options=\"cardConfiguration.cardKeys\" :selectedOption=\"sortBy\"\n                                :selectDisplay=\"headerSelectDisplay\" @selectDropdownChange=\"updateSortBy($event.target.value)\"\n                            >\n                            </SelectDropdown>\n                            <div class=\"icon-wrapper-div\">\n                                <v-icon :class=\"sortIconClass\" @click=\"updateSortOrderDisplay()\">mdi-arrow-up</v-icon>\n                            </div>\n                        </div>\n                        <div v-if=\"loading===true\" class=\"grid-header-loading\">\n                            <v-progress-linear indeterminate></v-progress-linear>\n                        </div>\n                    </div>\n                </div>\n            </template>\n            <template v-slot:default=\"props\">\n                <v-row>\n                    <v-col v-for=\"(item, index) in props.items\" :key=\"index\" cols=\"12\" md=\"2\">\n                        <v-card class=\"element-card-display\">\n                            <!--Card image-->\n                            <div class=\"card-icon-div\">\n                                <v-icon class=\"card-icon-style\">\n                                    {{getCardIcon(item[cardConfiguration.cardSettings.iconKey])}}\n                                </v-icon>\n                            </div>\n                            <!--Card title-->\n                            <div class=\"element-card-row-heading element-card-space\"\n                                 :class=\"{'theme-color-text': sortBy === cardConfiguration.exclusiveCardKeys.title}\">\n                                <router-link\n                                    :to=\"buildRoute(\n                                        item[cardConfiguration.cardSettings.cardKey],\n                                        VUEROUTES.cluster,\n                                        getCategory(item)\n                                    )\"\n                                    class=\"element-card-header\"\n                                    @click.native=\"saveSelectedData(item)\"\n                                >\n                                    {{item[cardConfiguration.exclusiveCardKeys.title]}}\n                                </router-link>\n                            </div>\n                            <div :class=\"{'theme-color-text': sortBy === cardConfiguration.exclusiveCardKeys.type}\">\n                                {{item[cardConfiguration.exclusiveCardKeys.type]}}\n                            </div>\n                            <!--Remaining lists and keys-->\n                            <div class=\"card-list-display\">\n                                <div>\n                                    <div v-for=\"(key, kIndex) in cardConfiguration.cardKeys\"\n                                         :key=\"key + index + '_' + kIndex\"\n                                         :class=\"{'theme-color-text': sortBy === key}\">\n                                        <!--Display the remaining keys that are not in the exclusiveCardKeys-->\n                                        <div v-if=\"!(groupExclusiveCardKeys.includes(key))\" class=\"element-card-space\">\n                                            <span v-if=\"isIdField(key)\">\n                                                <router-link\n                                                    :to=\"buildRoute(\n                                                        getUri(item, key),\n                                                        VUEROUTES.element,\n                                                        getCategory(item)\n                                                    )\"\n                                                    class=\"element-card-row-heading element-card-header\"\n                                                    @click.native=\"saveSelectedData(item)\"\n                                                >\n                                                    {{getFieldValue(item, key)}}\n                                                </router-link>\n                                            </span>\n                                            <span v-else>\n                                                {{getFieldTitle(key)}} : {{getFieldValue(item, key)}}\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <div v-for=\"(list) in cardConfiguration.exclusiveCardKeys.listDisplay\"\n                                         :key=\"list.field + index\">\n                                        <div v-for=\"(listItem, lIndex) in getListItem(item, list.field)\"\n                                             :key=\"lIndex\" :class=\"{'theme-color-text': sortBy === list.field}\">\n                                            <span v-if=\"list.value\">\n                                                {{listItem[list.field]}}: {{listItem[list.value]}}\n                                            </span>\n                                            <span v-else>\n                                                {{listItem}}\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <br>\n                                <div v-for=\"(counter) in cardConfiguration.exclusiveCardKeys.countDisplay\" class=\"element-card-space\"\n                                     :key=\"counter.field + index\" :class=\"{'theme-color-text': sortBy === counter.value}\">\n                                    {{counter.title}}: {{getListCount(item, counter.value)}}\n                                </div>\n                            </div>\n                            <!--Card footer keys-->\n                            <!-- TODO: Add footer back in if we get dates in the dataset\n                            <div class=\"element-card-footer\">\n                                <span :class=\"{'theme-color-text': sortBy === cardConfiguration.exclusiveCardKeys.date}\">{{item[cardConfiguration.exclusiveCardKeys.date]}}</span>\n                            </div>-->\n                        </v-card>\n                    </v-col>\n                </v-row>\n            </template>\n            <template v-slot:footer=\"{ item }\" v-if=\"!hideFooter\">\n                <div class=\"pagination-footer\">\n                    <div class=\"pagination-footer-text\">Results per page:\n                        <SelectDropdown :options=\"itemsPerPageArray\" :selectedOption=\"paging ? paging.itemsPerPage : null\"\n                                        @selectDropdownChange=\"updateItemsPerPage($event)\"\n                        >\n                        </SelectDropdown>\n                    </div>\n                    <v-pagination\n                            class=\"pagination-component\"\n                            v-model=\"page\"\n                            :length=\"pageCount\"\n                            :value=\"selectedPage\"\n                            total-visible=\"10\"\n                            @input=\"updatePageSelection($event)\"\n                    ></v-pagination>\n                    <div class=\"pagination-footer-text-end\">{{paginationText}}</div>\n                </div>\n            </template>\n        </v-data-iterator>\n    </div>\n</template>\n\n<script>\n    import SelectDropdown from '@/components/SelectDropdown';\n    import DataDisplayMixin from '@/mixins/DataDisplayMixin';\n    import {SELECTDISPLAY, VUEROUTES, TABLEFIELDMAPPING, LOADINGMESSAGE, DATATYPES, NODATAMESSAGE, buildRoute} from '../utils'\n    import {mapMutations} from 'vuex';\n\n    export default {\n        name: 'CardGrid',\n        mixins: [DataDisplayMixin],\n        props: {\n            cardConfiguration: Object,\n            statusMessage: String\n        },\n        data: () => ({\n            itemsPerPageArray: [12, 24, 48, 96, 'All'],\n            headerSelectDisplay: '',\n        }),\n        created() {\n            this.VUEROUTES = VUEROUTES;\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.LOADINGMESSAGE = LOADINGMESSAGE;\n            this.NODATAMESSAGE = NODATAMESSAGE;\n            this.headerSelectDisplay = SELECTDISPLAY.button;\n            this.buildRoute = buildRoute;\n        },\n        components: {SelectDropdown},\n        computed: {\n            groupExclusiveCardKeys() {\n                const getObjectValues = obj => this.isAnObject(obj) ? Object.values(obj).map(getObjectValues).flat() : [obj];\n                return getObjectValues(this.cardConfiguration.exclusiveCardKeys);\n            },\n            sortBy() {\n                return this.sort.by !== undefined ? this.sort.by : this.cardConfiguration.cardKeys[0];\n            },\n            sortDesc() {\n                return this.sort.descending !== undefined ? this.sort.descending : false;\n            },\n            sortIconClass() {\n                return this.sortDesc ? 'arrow-icon-down' : 'arrow-icon-up';\n            }\n        },\n        methods: {\n            ...mapMutations(['updateNodeSelection']),\n            updateSortOrderDisplay() {\n                let validVal = !!this.sortDesc;\n                this.updateSortDesc(!validVal);\n            },\n            getCardIcon(type) {\n                for (const key in this.cardConfiguration.cardIcons) {\n                    if (this.cardConfiguration.cardIcons.hasOwnProperty(key) && type.includes(key)) {\n                        return this.cardConfiguration.cardIcons[key].icon;\n                    }\n                }\n                return 'mdi-card-text-outline';\n            },\n            getCategory(item) {\n                return item[TABLEFIELDMAPPING.category] ?\n                    item[TABLEFIELDMAPPING.category] :\n                    item[TABLEFIELDMAPPING.prototype] ?\n                        item[TABLEFIELDMAPPING.prototype][TABLEFIELDMAPPING.category] :\n                        DATATYPES.eventType.id;\n            },\n            getFieldValue(item, key) {\n                return item[key] ? item[key] : item[TABLEFIELDMAPPING.prototype] ? item[TABLEFIELDMAPPING.prototype][key] : '';\n            },\n            getListItem(item, field) {\n                return item[field] ? item[field] : item[TABLEFIELDMAPPING.prototype] ? item[TABLEFIELDMAPPING.prototype][field] : {}\n            },\n            getListCount(item, field) {\n                let value = this.getFieldValue(item, field);\n                return value ? value : 0;\n            },\n            isIdField(field) {\n                return [TABLEFIELDMAPPING.id, TABLEFIELDMAPPING.idUri, TABLEFIELDMAPPING.prototypeId, TABLEFIELDMAPPING.prototypeUri].includes(field);\n            },\n            getUri(item, key) {\n                return key === TABLEFIELDMAPPING.id ? item[TABLEFIELDMAPPING.idUri] :\n                    key === TABLEFIELDMAPPING.prototypeId ? item[TABLEFIELDMAPPING.prototypeUri] : '';\n            },\n            saveSelectedData(data) {\n                this.updateNodeSelection(data);\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\n    .grid-header-wrapper {\n        background-color: $theme-teal;\n        color: #FFFFFF;\n        border-radius: 4px 4px 0 0;\n        @extend .bold-text;\n    }\n\n    .grid-header-row {\n        @include flex-row-wrap;\n    }\n\n    .grid-header-menu {\n        @include flex-row-nowrap;\n        padding: 16px;\n        width: 100%;\n        height: 40px;\n        align-items: center;\n        justify-content: flex-start;\n\n        .select-css {\n            background-color: #FFFFFF;\n            font-weight: initial;\n        }\n\n        span {\n            padding-right: 10px;\n            white-space: nowrap;\n        }\n\n        div .v-icon {\n            color: #FFFFFF;\n            font-size: 18px;\n        }\n    }\n\n    .grid-header-loading{\n        width: 100%;\n    }\n\n    .element-card-display {\n        padding: 16px;\n    }\n\n    .element-card-icon {\n        @extend .dark-icon-button;\n        @extend .v-icon;\n        padding: 0;\n        font-size: 32px;\n    }\n\n    .element-card-row-heading {\n        @extend .row-heading;\n        //margin-bottom: 16px;\n    }\n\n    .element-card-header {\n        color: inherit;\n        @include no-text-decoration;\n        @extend .page-link;\n    }\n\n    .element-card-space {\n        padding-bottom: 16px;\n    }\n\n    .element-card-footer {\n        @include flex-row-wrap;\n        padding-top: 16px;\n        justify-content: space-between;\n\n        span {\n            overflow-wrap: break-word;\n            width: 100%;\n        }\n    }\n\n    .card-list-display {\n        @include flex-column-nowrap;\n        width: 100%;\n        justify-content: space-between;\n    }\n\n    .card-icon-div {\n        display: flex;\n        justify-content: center;\n        padding: 10px 0;\n    }\n\n    .card-icon-style {\n        font-size: 80px;\n    }\n\n    .arrow-icon-down {\n        transform: rotate(180deg);\n        transition: all .3s ease;\n    }\n\n    .arrow-icon-up {\n        transform: rotate(0deg);\n        transition: all .3s ease;\n    }\n</style>\n"]}]}