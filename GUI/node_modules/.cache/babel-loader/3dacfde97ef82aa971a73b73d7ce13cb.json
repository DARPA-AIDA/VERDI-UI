{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/explore/Explore.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/explore/Explore.vue","mtime":1640207172537},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Explore.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <div class=\"page-content\">\n        <div class=\"primary-padded-heading\">Explore the Knowledge Base</div>\n<!-- TODO: Being used for query testing, will remove once filters are completed-->\n<!--        <p v-for=\"(filter, index) in filterSet\" :key=\"index\">\n            {{index}} : {{filter}}\n        </p>-->\n        <Tabs :titles=\"tabTitles\" :activeTabTitle=\"selectedTab\" @tabSelection=\"updateSelectedTab($event)\">\n            <TableAndGrid :slot=\"tabTitles[0]\"\n                          :showTable=true\n                          :data=\"eventData\"\n                          :sort=\"sort\"\n                          :paging=\"paging\"\n                          :tableConfiguration=\"getDefaultTableConfiguration()\"\n                          :cardConfiguration=\"cardConfiguration\"\n                          @currentItems=\"updateItems($event)\"\n            ></TableAndGrid>\n            <DataTable :slot=\"tabTitles[1]\"\n                       :data=\"relationData\"\n                       :sort=\"sort\"\n                       :paging=\"paging\"\n                       :tableConfiguration=\"modifyTableConfiguration()\"\n                       @currentItems=\"updateItems($event)\"\n            ></DataTable>\n        </Tabs>\n    </div>\n</template>\n\n<script>\n    import TableAndGrid from '@/components/TableAndGrid';\n    import DataTable from '@/components/DataTable';\n    import Tabs from '@/components/Tabs';\n    import API from '../../api';\n    import QueryViewMixin from '@/mixins/QueryViewMixin';\n    import {mapState, mapActions} from 'vuex';\n    import {\n        TABLESELECTIONS,\n        DATATYPES,\n        TABLEFIELDMAPPING,\n        formatPrototypeArguments,\n        TableSettings,\n        HeaderConfig,\n        SecondaryCaption,\n        SecondaryExpand\n    } from '../../utils';\n\n    const tableDescription = 'Explore clusters in the knowledge base using the filters provided.';\n    const currentRequests = new Map();\n\n    export default {\n        name: 'Explore',\n        mixins: [QueryViewMixin],\n        components: {TableAndGrid, DataTable, Tabs},\n        data: () => ({\n            tabTitles: ['Events', 'Relations'],\n            //variables for the card view\n            cardConfiguration: {},\n            //TODO: TA2 Browser variables - will be removed once search and filter are working\n            //filterSet: {}\n        }),\n/*        watch: { //TODO: Using in order to test queries, will remove once filter testing is complete\n            '$route' (to, from) {\n                this.filterSet = {};\n                if(to.query.filter !== from.query.filter || to.query.term !== from.query.term) {\n                    this.filterSet = API.compileApiParams();\n                }\n            }\n        },*/\n        created() {\n            this.TABLESELECTIONS = TABLESELECTIONS;\n            this.DATATYPES = DATATYPES;\n            this.cardConfiguration = {\n                cardSettings: {\n                    showToggleIcon: true,\n                        tableDescription: tableDescription,\n                        cardKey: TABLEFIELDMAPPING.clusterUri,\n                        iconKey: TABLEFIELDMAPPING.headline\n                },\n                cardKeys: [ //all fields that will be displayed in the card\n                    TABLEFIELDMAPPING.headline,\n                    TABLEFIELDMAPPING.types,\n                    TABLEFIELDMAPPING.prototypeId,\n                    TABLEFIELDMAPPING.nodeCount\n                ],\n                    exclusiveCardKeys: {\n                    title: TABLEFIELDMAPPING.headline,\n                        countDisplay: [{\n                        field: TABLEFIELDMAPPING.nodes,\n                        title: 'Arguments',\n                        value: TABLEFIELDMAPPING.nodeCount\n                    }],\n                        listDisplay: [{\n                        field: TABLEFIELDMAPPING.types\n                    }]\n                },\n                cardIcons: {\n                    Artifact: {icon: 'mdi-calendar-month'},\n                    Conflict: {icon: 'mdi-account-multiple-outline'},\n                    Contact: {icon: 'mdi-forum-outline'},\n                    Transaction: {icon: 'mdi-account-switch'}\n                }\n            };\n        },\n        mounted() {\n            //Preset the tab to 'Event'\n            if(!this.exploreSelections[TABLESELECTIONS.tab]) {\n                this.updateExploreSelections({option: TABLESELECTIONS.tab, value: this.tabTitles[0].slice(0,-1)});\n            }\n\n            //load arguments and types if data has not been previously loaded\n            if(Object.keys(this.categoryArguments).length === 0 || !this.categoryArguments[DATATYPES.eventType.id]) {\n                API.setCategoryData();\n            }\n\n            //load data, if data has not been previously loaded\n            if(Object.keys(this.knowledgeBase).length === 0 || !this.knowledgeBase[DATATYPES.eventType.id]) {\n                this.loadData(DATATYPES.eventType.id);\n            }\n        },\n        computed: {\n            ...mapState(['knowledgeBase', 'exploreSelections', 'term', 'currentDataSource', 'categoryArguments']),\n            sort() {\n                return this.exploreSelections[TABLESELECTIONS.sort] ? this.exploreSelections[TABLESELECTIONS.sort] :\n                    {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.nodeCount, [TABLESELECTIONS.sortDesc]: true};\n            },\n            paging() {\n                return this.exploreSelections[TABLESELECTIONS.paging] ? this.exploreSelections[TABLESELECTIONS.paging] :\n                    null;\n            },\n            eventData() {\n                return this.knowledgeBase[DATATYPES.eventType.id] ? Object.values(this.knowledgeBase[DATATYPES.eventType.id]) : [];\n            },\n            relationData() {\n                return this.knowledgeBase[DATATYPES.relationType.id] ? Object.values(this.knowledgeBase[DATATYPES.relationType.id]): [];\n            }\n        },\n        methods: {\n            ...mapActions(['updateExploreSelections', 'updatePrototypeRoles']),\n            updateItems(currentItems) {\n                const category = this.selectedTab.toLowerCase();\n                const toPopulate = currentItems.filter(item => !item[TABLEFIELDMAPPING.prototype][TABLEFIELDMAPPING.nodes] && \n                    !currentRequests.has(item[TABLEFIELDMAPPING.clusterUri]));\n                for (const cluster of toPopulate) {\n                    const promise = API.getPrototypeArguments(cluster[TABLEFIELDMAPPING.prototypeUri], this.currentDataSource);\n                    const clusterId = cluster[TABLEFIELDMAPPING.clusterUri];\n                    currentRequests.set(clusterId, promise);\n                    promise.then(role => {\n                        this.updatePrototypeRoles({\n                            category: category,\n                            id: clusterId,\n                            nodes: formatPrototypeArguments(role.data)});\n                        currentRequests.delete(clusterId);\n                    });\n                }\n            },\n            getDefaultTableConfiguration() {\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.clusterUri, true, '', tableDescription, true, false, false, false, false, 'node_count', true),\n                    primaryHeaders: [\n                        new HeaderConfig('Event Cluster ID', 'start', true, TABLEFIELDMAPPING.headline),\n                        new HeaderConfig('Prototype ID', 'start', true, TABLEFIELDMAPPING.prototypeId),\n                        new HeaderConfig('Event Types', 'start', true, TABLEFIELDMAPPING.types),\n                        new HeaderConfig('Arguments', 'center', true, TABLEFIELDMAPPING.nodeCount),\n                        new HeaderConfig('', 'center', false, 'data-table-expand')\n                    ],\n                    secondaryHeaders: {\n                        caption: new SecondaryCaption(TABLEFIELDMAPPING.prototype, TABLEFIELDMAPPING.nodes, TABLEFIELDMAPPING.roles),\n                        expanded: new SecondaryExpand(TABLEFIELDMAPPING.prototype, TABLEFIELDMAPPING.nodes,\n                            [\n                                new HeaderConfig('Name', 'start', false, TABLEFIELDMAPPING.headline),\n                                new HeaderConfig('ID', 'start', false, TABLEFIELDMAPPING.id),\n                                new HeaderConfig('Roles', 'start', false, TABLEFIELDMAPPING.roles),\n                                new HeaderConfig('Types', 'start', false, TABLEFIELDMAPPING.types)\n                            ]\n                        )\n                    }\n                }\n            },\n            modifyTableConfiguration() {\n                let tableConfig = this.getDefaultTableConfiguration();\n                tableConfig.tableSettings.showToggleIcon = false;\n                tableConfig.primaryHeaders[0].text = 'Relation Cluster ID';\n                tableConfig.primaryHeaders[2].text = 'Relation Types';\n                return tableConfig;\n            },\n            updateSelectedTab(value) {\n                this.updateExploreSelections({option: TABLESELECTIONS.tab, value: value.slice(0,-1)});\n                //The auto-complete options are reset based on if the Event or Relations tab is selected\n                this.resetList();\n                if(!this.knowledgeBase[DATATYPES.eventType.id] || !this.knowledgeBase[DATATYPES.relationType.id]) {\n                    this.resetTabData();\n                }\n            }\n        }\n    }\n</script>\n"],"sourceRoot":"src/views/explore"}]}