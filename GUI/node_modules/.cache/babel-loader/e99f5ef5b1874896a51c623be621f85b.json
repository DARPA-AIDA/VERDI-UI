{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/eval/IncidentDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/eval/IncidentDetail.vue","mtime":1640207172536},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["IncidentDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n-->\n\n<template>\n    <div>\n        <v-icon :ref=\"topAnchor\"\n                @click=\"scrollToEventSummary()\"\n                title=\"return to Event Summary\"\n                class=\"scroll-top-icon dark-icon-button\"\n        >\n            mdi-arrow-up-bold\n        </v-icon>\n        <div class=\"page-content\">\n            <div class=\"element-list-header\">\n                <div class=\"primary-page-header-left\">Incident Details</div>\n                <div class=\"page-header-right\">\n                    <button id=\"compare_button\" class=\"dark-app-button\" @click=\"linkToIncidentSearch()\">\n                        <v-icon class=\"button-icon\">mdi-compare</v-icon>\n                        Incident Search\n                    </button>\n                    <button id=\"doc_button\" class=\"dark-app-button\" @click=\"linkToEvalDocSearch()\">\n                        <v-icon class=\"button-icon\">mdi-file-document-box-search-outline</v-icon>\n                        Document Search\n                    </button>\n                </div>\n            </div>\n            <div class=\"page-header-element-space\">\n                <SelectDropdown\n                        :options=\"sinIds\"\n                        :selectDisplay=\"selectDisplay\"\n                        :selectedOption=\"sinId\"\n                        @selectDropdownChange=\"updateSelectedSinId($event)\">\n                </SelectDropdown>\n            </div>\n            <div v-if=\"loading===true\" class=\"loading-section\">\n                <v-progress-linear indeterminate></v-progress-linear>\n                <div class=\"loading-message-clear\">{{statusMessage}}</div>\n            </div>\n            <div v-else>\n                <div class=\"section-space\" v-if=\"summaryData\">\n                    <DataTable\n                        :data=\"summaryData\"\n                        :sort=\"sort\"\n                        :loading=\"summaryData === 0\"\n                        :paging=\"paging\"\n                        :tableConfiguration=\"buildSumamryTable()\"\n                        :statusMessage=\"statusMessage\"\n                        :hideFooter=true\n                        :hideHeader=true\n                        @anchorScroll=\"scrollToEventDetails($event)\"\n                    ></DataTable>\n                </div>\n                <div class=\"section-space loading-section\" v-else>\n                    <div class=\"loading-message-clear\">{{statusMessage}}</div>\n                </div>\n                <div v-for=\"(type, index) in types\" :key=\"index\" :class=\"index > 0 ? 'section-space' : ''\">\n                    <DataTable\n                        :ref=\"getRefId(type)\"\n                        :data=\"sinData[type]\"\n                        :sort=\"sort\"\n                        :loading=\"sinData[type] && Object.keys(sinData[type]).length === 0\"\n                        :paging=\"paging\"\n                        :tableConfiguration=\"buildTableConfiguration(type)\"\n                        :statusMessage=\"statusMessage\"\n                        @activateCompare=\"updateItemsForComparison($event)\"\n                        :hideFooter=true\n                        :hideHeader=true\n                    ></DataTable>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import DataTable from '@/components/DataTable';\n    import SelectDropdown from '@/components/SelectDropdown';\n    import QuerySubmissionMixin from '@/mixins/QuerySubmissionMixin';\n    import { mapMutations, mapState} from 'vuex';\n    import {\n        TABLESELECTIONS,\n        TABLEFIELDMAPPING,\n        DATATYPES,\n        LOADINGMESSAGE,\n        NODATAMESSAGE,\n        INCIDENTMAPPING,\n        SELECTDISPLAY,\n        PARAMETERNAMES,\n        JOINSTRING,\n        getIncidentName,\n        getIncidentId,\n        TableSettings,\n        HeaderConfig\n    } from '../../utils';\n\n    export default {\n        name: 'IncidentDetail',\n        mixins: [QuerySubmissionMixin],\n        components: {DataTable, SelectDropdown},\n        data: () => ({\n            sort: {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.id, [TABLESELECTIONS.sortDesc]: false},\n            paging: {[TABLESELECTIONS.itemsPerPage]:'All'},\n            statusMessage: '',\n            sinClustersBySinId : {},\n            summaryItemsBySinId: [],\n            summaryTypes: [],\n            sinId: null,\n            selectDisplay: SELECTDISPLAY.input,\n            SIN: {},\n            resultsAnchor: 'event_anchor_',\n            topAnchor: 'summary_anchor',\n            scrollPosition: 0,\n            currentPosition: null\n        }),\n        created() {\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.DATATYPES = DATATYPES;\n            this.statusMessage = LOADINGMESSAGE;\n            this.PARAMETERNAMES = PARAMETERNAMES;\n        },\n        mounted() {\n            this.updateHypothesisSelection({});\n            this.sinId = INCIDENTMAPPING[0].id;\n\n            if(Object.keys(this.knowledgeBase).length === 0 || !this.knowledgeBase[DATATYPES.sin.id]) {\n                this.loadSINData(DATATYPES.sin.id);\n            }\n\n            window.onscroll = () => this.activateScrollArrow();\n        },\n        computed: {\n            ...mapState(['defaultHypothesisDataSource', 'hypothesisSelection','currentDataSource', 'knowledgeBase']),\n            summaryData() {\n                return this.summaryItemsBySinId.length > 0  ? this.summaryItemsBySinId : this.getDetailData();\n            },\n            types() {\n                return this.summaryTypes;\n            },\n            sinData() {\n                return this.sinClustersBySinId;\n            },\n            sinIds() {\n                return INCIDENTMAPPING.map(v => v.value);\n            }\n        },\n        methods: {\n            ...mapMutations(['updateHypothesisSelection']),\n            buildSumamryTable() {\n                let tableMappings = {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.id, false, 'Claims Summary', '', false, false, false, false, false, 'headline', false),\n                    primaryHeaders: [\n                        new HeaderConfig('', 'center', false, 'data-table-anchor'),\n                        new HeaderConfig('Events', 'start', true, TABLEFIELDMAPPING.headline, true, false),\n                        new HeaderConfig('', 'start', true, TABLEFIELDMAPPING.nodeCount, true, false),\n                        new HeaderConfig('', 'start', true, TABLEFIELDMAPPING.entityCount, true, false),\n                        new HeaderConfig('', 'start', true, TABLEFIELDMAPPING.id, true, false)\n                    ]\n                };\n\n                return tableMappings;\n            },\n            buildTableConfiguration(type) {\n                const category = this.sinData[type][0][TABLEFIELDMAPPING.sinTitle];\n                let roleHeaders = new Map();\n                let tableMappings = {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.idUri, false, type.split(JOINSTRING)[0], category, false, false, false, false, true, 'headline', false),\n                    primaryHeaders: [\n                        new HeaderConfig('Claim', 'start', true, TABLEFIELDMAPPING.headline, false, false),\n                        new HeaderConfig('Event Statement', 'start', true, TABLEFIELDMAPPING.statement, false, true)\n                    ]\n                };\n\n                for (const hypothesis of this.sinData[type]) {\n                    roleHeaders = new Map([...roleHeaders, ...new Map(hypothesis[TABLEFIELDMAPPING.roles].map(role =>\n                        [role, new HeaderConfig(role, 'start', true, role, false, true)]\n                    ))]);\n                }\n                //sort role headers\n                roleHeaders = new Map([...roleHeaders].sort());\n\n                //Add date to roles in order to compare\n                roleHeaders.set(TABLEFIELDMAPPING.dates, new HeaderConfig('Date', 'start', true, TABLEFIELDMAPPING.dates, false, true));\n\n                //combine existing primary headers with role and match percentage headers\n                tableMappings.primaryHeaders = [\n                    ...[...tableMappings.primaryHeaders, ...new Set([...roleHeaders.values()])],\n                    ...[new HeaderConfig('Match %', 'end', true, TABLEFIELDMAPPING.percentage, true, false)]\n                ];\n\n                return tableMappings;\n            },\n            linkToEvalDocSearch () {\n                window.open('https://blackbox.verdi.nextcentury.com/', '_blank');\n            },\n            linkToIncidentSearch () {\n                this.$router.push('/eval');\n            },\n            activateScrollArrow() {\n                if(this.$refs[this.topAnchor]) {\n                    const el = this.$refs[this.topAnchor].$el;\n                    const showPosition = 100;\n                    if (el) {\n                        if (document.body.scrollTop > showPosition || document.documentElement.scrollTop > showPosition) {\n                            el.style.display = 'block';\n                        } else {\n                            el.style.display = 'none';\n                        }\n                    }\n                }\n            },\n            scrollToEventDetails(location) {\n                if(this.$refs[this.resultsAnchor + location].length > 0) {\n                    this.scrollPosition = window.scrollY;\n                    const el = this.$refs[this.resultsAnchor + location][0].$el;\n                    const yOffset = -100;\n                    if (el) {\n                        const y = el.getBoundingClientRect().top + window.pageYOffset + yOffset;\n                        window.scrollTo({top: y})\n                    }\n                }\n            },\n            scrollToEventSummary() {\n                if(this.currentPosition !== this.scrollPosition) {\n                    this.currentPosition = window.scrollY;\n                }\n\n                if(this.currentPosition === this.scrollPosition) {\n                    this.scrollPosition = 0;\n                    this.currentPosition = null;\n                }\n\n                window.scrollTo({ top: this.scrollPosition });\n            },\n            getRefId(type) {\n                const tableId = this.sinClustersBySinId[type][0][TABLEFIELDMAPPING.clusterList][0][TABLEFIELDMAPPING.clusterUri];\n                return this.resultsAnchor + tableId;\n            },\n            getDetailData() {\n                if(this.knowledgeBase[DATATYPES.sin.id]) {\n                    const sinClusters = this.knowledgeBase[DATATYPES.sin.id];\n                    if (sinClusters[DATATYPES.eventType.id]) {\n                        this.sinClustersBySinId = sinClusters[DATATYPES.eventType.id][this.sinId];\n                        this.summaryTypes = Object.keys(this.sinClustersBySinId).sort();\n                    }\n\n                    if (sinClusters[DATATYPES.summary.id]) {\n                        this.summaryItemsBySinId = sinClusters[DATATYPES.summary.id].filter(item => item.sin === this.sinId);\n                    }\n                }\n                return this.summaryItemsBySinId;\n            },\n            updateSelectedSinId(input) {\n                this.sinId = getIncidentId(input.target.value);\n                this.$nextTick(() => {\n                    this.filterDataBySinId();\n                });\n            },\n            filterDataBySinId() {\n                const sinData = this.knowledgeBase[DATATYPES.sin.id];\n                const sinClusters = sinData[DATATYPES.eventType.id];\n                if (Object.keys(sinClusters).includes(this.sinId)) {\n                    this.sinClustersBySinId = sinClusters[this.sinId];\n                    this.summaryItemsBySinId = sinData[DATATYPES.summary.id].filter(item => item.sin === this.sinId);\n                    this.summaryTypes = Object.keys(this.sinClustersBySinId).sort();\n                    this.statusMessage = LOADINGMESSAGE;\n                }\n                else {\n                    this.sinClustersBySinId = {};\n                    this.summaryItemsBySinId = [];\n                    this.summaryTypes = [];\n                    this.statusMessage = NODATAMESSAGE + ' for Incident: ' + getIncidentName(this.sinId);\n                }\n            },\n            updateFontsAndBackgrounds(hypothesis, type, id, compareOn) {\n                hypothesis[TABLEFIELDMAPPING.compare] = compareOn;\n                hypothesis[TABLEFIELDMAPPING.highlight] = compareOn;\n\n                if (!compareOn) {\n                    this.resetColorTextAndPercentage(type);\n                    return;\n                }\n\n                hypothesis[TABLEFIELDMAPPING.percentage] = 100;\n\n                // collect the entities of reference hypothesis\n                const referenceEntities = new Set(this.getEntities(hypothesis));\n                const referenceStrings = new Set(this.getEntityStrings(hypothesis));\n                const referenceDates = new Set(hypothesis[TABLEFIELDMAPPING.dates]);\n\n                // iterate over other hypotheses and set colorText for false positives\n                const compareHypotheses = this.sinData[type].filter(h => h[TABLEFIELDMAPPING.idUri] !== id);\n                for(const comparison of compareHypotheses) {\n                    const compareEntities = new Set(this.getEntities(comparison));\n                    const compareStrings = new Set(this.getEntityStrings(comparison));\n                    const compareDates = new Set(comparison[TABLEFIELDMAPPING.dates]);\n                    const allEntities = new Set([...referenceEntities, ...compareEntities]);\n                    const allDates = new Set([...referenceDates, ...compareDates]);\n\n                    let falsePositive = 0;\n                    let falseNegative = 0;\n                    let truePositive = 0;\n                    for (const testEntity of allEntities) {\n                        const testString = this.getString(testEntity);\n                        const inRef = referenceStrings.has(testString);\n                        const inComp = compareStrings.has(testString);\n\n                        if (inRef !== inComp) {\n                            if (inRef) {\n                                falseNegative++;\n                            } else {\n                                falsePositive++;\n                                testEntity[TABLEFIELDMAPPING.colorText] = true;\n                            }\n                        } else { \n                            // must be true positive\n                            truePositive++;\n                        }\n                    }\n\n                    let datesCompared = new Map();\n                    [...allDates].map(d => datesCompared.set(d, d));\n\n                    for(const testDate of allDates) {\n                        const inRef = referenceDates.has(testDate);\n                        const inComp = compareDates.has(testDate);\n\n                        if (inRef !== inComp) {\n                            if (inRef) {\n                                //value only exists in the selected hypothesis\n                                falseNegative++;\n                                datesCompared.delete(testDate);\n                            } else {\n                                //value only exists in the compared hypothesis\n                                falsePositive++;\n                                datesCompared.set(testDate, {[TABLEFIELDMAPPING.colorText] : true, text : testDate});\n                            }\n                        } else {\n                            //value exists in both the selected and compared hypothesis\n                            truePositive++;\n                        }\n                    }\n\n                    const dates = [...datesCompared.values()];\n                    if(dates.length > 0) {\n                        comparison[TABLEFIELDMAPPING.dates] = dates;\n                    }\n\n                    const f =  truePositive / (truePositive + .5 * (falsePositive + falseNegative));\n                    comparison[TABLEFIELDMAPPING.percentage] = Math.ceil(f * 100);\n                }\n            },\n            resetColorTextAndPercentage(type) {\n                for (const h of this.sinData[type]) {\n                    delete h[TABLEFIELDMAPPING.percentage];\n                    for (const entity of this.getEntities(h)) {\n                        entity[TABLEFIELDMAPPING.colorText] = false;\n                    }\n                    h[TABLEFIELDMAPPING.dates] = h[TABLEFIELDMAPPING.dates].map(d => d.hasOwnProperty(TABLEFIELDMAPPING.colorText) ? d.text : d);\n                }\n            },\n            getString(e) {\n                const types = e[TABLEFIELDMAPPING.resolvedType] ? e[TABLEFIELDMAPPING.resolvedType] : e[TABLEFIELDMAPPING.types].join(',');\n                return e[TABLEFIELDMAPPING.roles][0] + ' - ' + e[TABLEFIELDMAPPING.headline] + ' - ' + types;\n            },\n            getEntityStrings(hypothesis) {\n                return this.getEntities(hypothesis).map(this.getString);\n            },\n            getEntities(hypothesis) {\n                return hypothesis[TABLEFIELDMAPPING.clusterList].flatMap(c => c[TABLEFIELDMAPPING.entityList]);\n            },\n            updateItemsForComparison(row) {\n                let selectedHypothesis = {};\n                let removeStyling = row.item[TABLEFIELDMAPPING.compare] === true &&\n                    row.item[TABLEFIELDMAPPING.idUri] === this.hypothesisSelection[TABLEFIELDMAPPING.idUri];\n                for(const clusterType in this.sinData) {\n                    if(this.sinData.hasOwnProperty(clusterType)) {\n                        //Turn off comparison highlighting for previously selected hypothesis\n                        if(Object.keys(this.hypothesisSelection).length > 0) {\n                            let previousHypothesis = this.sinData[clusterType]\n                                .find(h => h[TABLEFIELDMAPPING.idUri] === this.hypothesisSelection[TABLEFIELDMAPPING.idUri]);\n                            if(previousHypothesis) {\n                                this.updateFontsAndBackgrounds(previousHypothesis, clusterType, this.hypothesisSelection[TABLEFIELDMAPPING.idUri], false);\n                            }\n                        }\n\n                        if(!removeStyling) {\n                            //Turn on comparison highlighting for currently selected hypothesis and save to the store\n                            let hypothesis = this.sinData[clusterType]\n                                .find(h => h[TABLEFIELDMAPPING.idUri] === row.item[TABLEFIELDMAPPING.idUri]);\n                            if (hypothesis) {\n                                this.updateFontsAndBackgrounds(hypothesis, clusterType, row.item[TABLEFIELDMAPPING.idUri], true);\n\n                                if (clusterType === row.type) {\n                                    selectedHypothesis = hypothesis;\n                                }\n                            }\n                        }\n                    }\n                }\n                this.updateHypothesisSelection(removeStyling ? {} : selectedHypothesis);\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .loading-section {\n        margin: 48px 0;\n    }\n\n    .loading-message-clear {\n        @include flex-row-nowrap;\n        justify-content: center;\n        height: 60px;\n        padding: 16px;\n    }\n\n    .scroll-top-icon{\n        display: none;\n        background-color: $theme-icon-color;\n        position: fixed;\n        bottom: 20px;\n        left: 1%;\n        z-index: 99;\n        font-size: 20px;\n        border: none;\n        outline: none;\n        color: white;\n        cursor: pointer;\n        padding: 10px;\n        border-radius: 4px;\n    }\n\n</style>\n\n"],"sourceRoot":"src/views/eval"}]}