{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/analyze/HypothesisComparison.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/analyze/HypothesisComparison.vue","mtime":1640207172535},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["HypothesisComparison.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n-->\n\n<template>\n    <div class=\"page-content\">\n        <div class=\"kb-details\">\n            <div class=\"row-width-description-wrapper\">\n                <div class=\"page-header-left\">\n                    <div class=\"kb-heading\">Hypothesis Comparison</div>\n                    <div><span class=\"kb-labels\">SIN ID: </span><span>{{sinId}}</span></div>\n                    <div><span class=\"kb-labels\">Description: </span><span>{{SIN.description}}</span></div>\n                </div>\n                <div class=\"page-header-align-bottom-right\">\n                    <span>Current Reference</span><v-icon>mdi-compare</v-icon>\n                </div>\n            </div>\n        </div>\n        <div v-if=\"loading===true\" class=\"loading-section\">\n            <v-progress-linear indeterminate></v-progress-linear>\n            <div class=\"loading-message-clear\">{{statusMessage}}</div>\n        </div>\n\n        <div v-else>\n            <div v-for=\"(type, index) in types\" :key=\"index\" :class=\"index > 0 ? 'section-space' : ''\">\n                <DataTable\n                    :data=\"sinData[type]\"\n                    :sort=\"sort\"\n                    :loading=\"Object.keys(sinData[type]).length === 0\"\n                    :paging=\"paging\"\n                    :tableConfiguration=\"buildTableConfiguration(type)\"\n                    :statusMessage=\"statusMessage\"\n                    @activateCompare=\"updateItemsForComparison($event)\"\n                    :hideFooter=true\n                    :hideHeader=true\n                ></DataTable>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import DataTable from '@/components/DataTable';\n    import { mapMutations, mapState} from 'vuex';\n    import API from '../../api';\n    import {\n        TABLESELECTIONS,\n        TABLEFIELDMAPPING,\n        DATATYPES,\n        LOADINGMESSAGE,\n        PREFIXTYPES,\n        sortArrayOfObjects,\n        removePrefix,\n        formatSinsComparison,\n        getSinIdFromDataSource,\n        TableSettings,\n        HeaderConfig\n    } from '../../utils';\n\n    export default {\n        name: 'HypothesisComparison',\n        components: {DataTable},\n        data: () => ({\n            sort: {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.id, [TABLESELECTIONS.sortDesc]: false},\n            paging: {[TABLESELECTIONS.itemsPerPage]:'All'},\n            statusMessage: '',\n            sinHypotheses: {},\n            sinTypes: [],\n            sinId : '',\n            SIN: {},\n            loading: false,\n        }),\n        created() {\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.DATATYPES = DATATYPES;\n            this.loading  = true;\n            this.statusMessage = LOADINGMESSAGE;\n        },\n        mounted() {\n            this.updateHypothesisSelection({});\n            let dataSource = {['graph'] : this.currentDataSource ? this.currentDataSource : this.defaultHypothesisDataSource};\n            this.sinId = getSinIdFromDataSource(this.currentDataSource);\n            API.getSinQueryResults(this.sinId, dataSource).then(response => {\n                this.SIN = response.data;\n                this.getFormattedData(response.data);\n            });\n        },\n        computed: {\n            ...mapState(['defaultHypothesisDataSource', 'hypothesisSelection','currentDataSource']),\n            types() {\n                return this.sinTypes.length > 0 ? this.sinTypes : null;\n            },\n            sinData() {\n                return Object.keys(this.sinHypotheses).length > 0 ? this.sinHypotheses : null;\n            }\n        },\n        methods: {\n            ...mapMutations(['updateHypothesisSelection']),\n            buildTableConfiguration(type) {\n                const category = this.sinData[type][0][TABLEFIELDMAPPING.clusterCategory];\n                let roleHeaders = new Map();\n                let tableMappings = {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.idUri, false, type, category, false, false, false, false, true, 'headline', false),\n                    primaryHeaders: [\n                        new HeaderConfig('Hypothesis', 'start', true, TABLEFIELDMAPPING.headline, false, false)\n                    ]\n                };\n\n                for (const hypothesis of this.sinData[type]) {\n                    roleHeaders = new Map([...roleHeaders, ...new Map(hypothesis[TABLEFIELDMAPPING.roles].map(role =>\n                        [role, new HeaderConfig(role, 'start', true, role, true, true)]\n                    ))]);\n                }\n\n                //sort role headers\n                roleHeaders = new Map([...roleHeaders].sort());\n\n                //combine existing primary headers with role and match percentage headers\n                tableMappings.primaryHeaders = [\n                    ...[...tableMappings.primaryHeaders, ...new Set([...roleHeaders.values()])],\n                    ...[new HeaderConfig('Match %', 'end', true, TABLEFIELDMAPPING.percentage, false, false)]\n                ];\n\n                return tableMappings;\n            },\n            getFormattedData(sin) {\n                let hypotheses = [];\n                sortArrayOfObjects(sin.hypotheses, 'hypothesis');\n\n                for (const hypObject of sin.hypotheses) {\n                    //new map removes duplicate types, added Unknown type to compensate for incomplete member information\n                    const hypTypes = [...new Set(hypObject.types.map(type => removePrefix(type, PREFIXTYPES.hash))), 'Unknown'].sort();\n\n                    let hypothesisByMemberType = new Map();\n                    for (const ht of hypTypes) {\n                        //shallow clone\n                        let formattedHypothesis = Object.assign({}, hypObject);\n\n                        let members = [];\n                        let roles = [];\n                        //collecting and formatting members to perform a deep clone\n                        for (const member of hypObject.members) {\n                            //if there are no arguments then there is no need to show the member\n                            if (ht === removePrefix(member.type, PREFIXTYPES.hash) && member.roles.length > 0) {\n                                members.push({\n                                    node: member.node,\n                                    category: member.category,\n                                    type: member.type,\n                                    roles: [...member.roles],\n                                });\n\n                                for(const role of member.roles) {\n                                    roles.push(removePrefix(role.role, PREFIXTYPES.underscore));\n                                }\n                            }\n                        }\n\n                        //if this hypothesis has members of this type then continue formatting data\n                        if(members.length > 0) {\n                            formattedHypothesis.members = members;\n                            formattedHypothesis.roles = [...new Map(roles.map(role => [role, role])).values()].sort();\n                            formattedHypothesis.category = removePrefix(members[0].category, PREFIXTYPES.hash);\n                            formattedHypothesis = formatSinsComparison(formattedHypothesis, DATATYPES.sin.id, ht);\n\n                            let hypData = {type: ht, data: formattedHypothesis};\n                            hypothesisByMemberType.set(ht, hypData);\n                        }\n                    }\n\n                    //add newly formatted hypothesis to hypotheses array\n                    hypotheses = [...hypotheses, ...hypothesisByMemberType.values()];\n\n                }\n\n                //groups hypotheses data by member type\n                const hypothesesReduce = hypotheses.reduce((acc, obj) => {\n                    const key = obj.type;\n                    if (!acc[key]) {\n                        acc[key] = [];\n                    }\n                    // Add object data to list in the given key position\n                    acc[key].push(obj.data);\n                    return acc;\n                }, {});\n\n                this.loading  = false;\n\n                //updates the sin data and sin types\n                this.sinHypotheses = hypothesesReduce;\n                this.sinTypes = Object.keys(hypothesesReduce).sort();\n            },\n            updateFontsAndBackgrounds(hypothesis, type, id, compareOn) {\n                hypothesis[TABLEFIELDMAPPING.compare] = compareOn;\n                hypothesis[TABLEFIELDMAPPING.highlight] = compareOn;\n\n                if (!compareOn) {\n                    this.resetColorTextAndPercentage(type);\n                    return;\n                }\n\n                hypothesis[TABLEFIELDMAPPING.percentage] = 100;\n                \n                // collect the entities of reference hypothesis\n                const referenceEntities = new Set(this.getEntities(hypothesis));\n                const referenceStrings = new Set(this.getEntityStrings(hypothesis));\n\n                // iterate over other hypotheses and set colorText for false positives\n                const compareHypotheses = this.sinData[type].filter(h => h[TABLEFIELDMAPPING.idUri] !== id);\n                for(const comparison of compareHypotheses) {\n                    const compareEntities = new Set(this.getEntities(comparison));\n                    const compareStrings = new Set(this.getEntityStrings(comparison));\n                    const allEntities = new Set([...referenceEntities, ...compareEntities]);\n    \n                    let falsePositive = 0;\n                    let falseNegative = 0;\n                    let truePositive = 0;\n                    for (const testEntity of allEntities) {\n                        const testString = this.getString(testEntity);\n                        const inRef = referenceStrings.has(testString);\n                        const inComp = compareStrings.has(testString);\n                        // inRef XOR inComp\n                        if (inRef != inComp) {\n                            if (inRef) {\n                                falseNegative++;\n                            } else {\n                                falsePositive++;\n                                testEntity[TABLEFIELDMAPPING.colorText] = true;\n                            }\n                        } else { \n                            // must be true positive\n                            truePositive++;\n                        }\n                    }\n                    const f =  truePositive / (truePositive + .5 * (falsePositive + falseNegative));\n                    comparison[TABLEFIELDMAPPING.percentage] = Math.ceil(f * 100);\n                }\n            },\n            resetColorTextAndPercentage(type) {\n                for (const h of this.sinData[type]) {\n                    delete h[TABLEFIELDMAPPING.percentage];\n                    for (const entity of this.getEntities(h)) {\n                        entity[TABLEFIELDMAPPING.colorText] = false;\n                    }\n                }\n            },\n            getString(e) {\n                return e[TABLEFIELDMAPPING.roles][0] + ' - ' + e[TABLEFIELDMAPPING.headline] + ' - ' + e[TABLEFIELDMAPPING.types].join(',');\n            },\n            getEntityStrings(hypothesis) {\n                return this.getEntities(hypothesis).map(this.getString);\n            },\n            getEntities(hypothesis) {\n                return hypothesis[TABLEFIELDMAPPING.clusterList].flatMap(c => c[TABLEFIELDMAPPING.entityList]);\n            },\n            updateItemsForComparison(row) {\n                let selectedHypothesis = {};\n                let removeStyling = row.item[TABLEFIELDMAPPING.compare] === true &&\n                    row.item[TABLEFIELDMAPPING.idUri] === this.hypothesisSelection[TABLEFIELDMAPPING.idUri];\n\n                for(const clusterType in this.sinData) {\n                    if(this.sinData.hasOwnProperty(clusterType)) {\n                        //Turn off comparison highlighting for previously selected hypothesis\n                        if(Object.keys(this.hypothesisSelection).length > 0) {\n                            let previousHypothesis = this.sinData[clusterType]\n                                .find(h => h[TABLEFIELDMAPPING.idUri] === this.hypothesisSelection[TABLEFIELDMAPPING.idUri]);\n                            if(previousHypothesis) {\n                                this.updateFontsAndBackgrounds(previousHypothesis, clusterType, this.hypothesisSelection[TABLEFIELDMAPPING.idUri], false);\n                            }\n                        }\n\n                        if(!removeStyling) {\n                            //Turn on comparison highlighting for currently selected hypothesis and save to the store\n                            let hypothesis = this.sinData[clusterType]\n                                .find(h => h[TABLEFIELDMAPPING.idUri] === row.item[TABLEFIELDMAPPING.idUri]);\n                            if (hypothesis) {\n                                this.updateFontsAndBackgrounds(hypothesis, clusterType, row.item[TABLEFIELDMAPPING.idUri], true);\n\n                                if (clusterType === row.type) {\n                                    selectedHypothesis = hypothesis;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                this.updateHypothesisSelection(removeStyling ? {} : selectedHypothesis);\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .loading-section {\n        margin: 48px 0;\n    }\n\n    .loading-message-clear {\n        @include flex-row-nowrap;\n        justify-content: center;\n        height: 60px;\n        padding: 16px;\n    }\n</style>\n\n"],"sourceRoot":"src/views/analyze"}]}