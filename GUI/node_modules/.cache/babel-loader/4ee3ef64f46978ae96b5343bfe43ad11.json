{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/eslint-loader/index.js??ref--14-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/utils.js","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/utils.js","mtime":1641326767934},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/eslint-loader/index.js","mtime":1641411772337}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/utils.js"],"names":["Pluralize","$store","templates","CategoryTypes","Datatype","id","display","TableSettings","key","expand","heading","description","toggleIcon","networkIcon","resultsPerPage","highlight","hideableColumns","defaultSortBy","defaultSortDesc","defaultRowFilter","rowKey","tableHeading","tableDescription","showToggleIcon","showNetworkIcon","showResultsPerPage","rowfilter","HeaderConfig","text","align","sortable","value","assignWidth","hideable","width","TABLEFIELDMAPPING","percentage","nodeCount","entityCount","SecondaryCaption","prototype","field","SecondaryExpand","headers","DATATYPES","argumentName","topic","subtopic","template","entityType","eventType","confidenceThreshold","connectionHops","dateRange","hypothesis","kbId","relationType","sin","summary","ERETYPES","QUERYOPTIONS","COMPONENTNAMES","multiSelect","TA2TERMOPTIONS","TA3TERMOPTIONS","SELECTDISPLAY","button","underline","input","PREFIXTYPES","dash","dot","hash","hashscore","underscore","slash","JOINSTRING","DATADISPLAY","count","list","TABLESELECTIONS","tab","sort","sortDesc","sortBy","paging","itemsPerPage","pageNumber","pageStart","affiliation","clusterUri","clusterCategory","clusterType","prototypeUri","prototypeId","names","headline","statement","documentList","docId","docTitle","docContentDate","docDownloadDate","documentCount","idUri","ke","provenance","roleUri","roles","types","resolvedType","category","nodes","entityList","confidenceSum","clusterList","clusterIdList","eventList","semantics","relationList","colorText","compare","dates","route","hypothesisList","sinList","sinId","sinTitle","claimTemplate","claimer","location","variableList","ta1Route","ta2Route","ta3Route","claimRoute","VUEROUTES","doc","ta2","cluster","element","ta3","claims","PARAMETERNAMES","term","filter","datasoure","SEARCHTYPES","single","multi","INCIDENTMAPPING","isObject","v","LOADINGMESSAGE","NODATAMESSAGE","DATASOURCEURI","process","env","DATA_SOURCE","sponsorTypes","Object","keys","original","includes","stringsToIgnore","Set","ta3DataSource","source","ta2DataSource","getIncidentName","find","elem","getIncidentId","sinName","getSinIdFromDataSource","truncateSource","replace","substring","indexOf","upperFirstLetter","charAt","toUpperCase","slice","charReplace","str","char","lowerCharReplace","toLowerCase","splitOnUpper","textString","split","join","pluralize","prettyPluralize","removePrefix","type","newString","hashPosition","lastIndexOf","length","underscorePosition","cleanName","name","nameSplit","isNaN","parseInt","num","nameSlice","push","trim","sortCaseInsensitive","array","current","previous","localeCompare","sortArrayOfObjects","a","b","arraysMatch","arrOne","arrTwo","every","buildRoute","path","suffix","params","encodedId","encodeURIComponent","i","convertTA3toTA2Route","getStringValue","Array","isArray","getSortedTypes","map","getType","getLastSubType","t","getTransformedType","mapping","deduplicateArray","Map","item","values","getRole","role","makePercentage","precision","toFixed","getName","entity","showNameCount","nameString","index","placeholder","getters","getQueryParams","findIndex","handle","getId","uri","getClusterIdObject","createMember","member","entities","clusters","docs","formatCluster","data","hasOwnProperty","formatClusterElement","members","flatMap","formatHypothesisEntities","clusterIds","undefined","formatHypothesisCluster","fillers","getSinArgumentHeadline","argument","formatSinHypothesisArguments","memberType","ret","arguments","formatSinHypothesisMember","node","formatSinsComparison","getDateParts","date","splitDate","dateYear","hasDash","dateMonth","Date","toLocaleString","month","dateDay","combineParts","parts","combineDates","start","end","combined","getDateString","startAfter","startBefore","endBefore","endAfter","startString","endString","sY","sM","sD","eY","eM","eD","formatSinsClaims","hypotheses","formatUniqueMembers","entityClusters","formatPrototypeArguments","reduceSets","formattedEntities","fe","filler","formattedFiller","get","set","add","formatElementMembers","formatDuplicateMembers","clusterMember","formattedCluster","fc","formatEntityCluster","formatEntityMembers","connections","formatEntityConnection","connection","formattedConnection","countHypothesisNodes","counts","formatClusterTableData","row","clusterId","fromEntries","entries","formatESData","eventClusterBySin","entityByEventCluster","summaryItems","clusterSin","joinedId","has","cluster_type","entityRoles","toString","cluster_category","run","clustersBySin","sinKey","clusterMap","clusterKey","clustersByHypothesis","clusterEntities","summaryData","size","identifiers","getEntityIdentifiers","getTemplate","getEntityName","e","designatedType","match","entityTypeMapping","discrepancy","args","combineTemplateArgs","templateArgs","getOriginalTemplate","templateObj","arg","augmented","order","part","substitution","prefix","getTemplatePredicate","predicate","replaceCamelCase","string","replacement","getTypesFromQuery","query","kept"],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 Next Century Corporation/CACI\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport Pluralize from 'pluralize';\nimport $store from './store';\nimport templates from '@/assets/data/templates.json';\nimport CategoryTypes from '@/assets/data/types.json';\n\n/******************classes*******************/\nclass Datatype {\n    constructor (id, display) {\n        this.id = id;\n        this.display = display;\n    }\n}\n\nexport class TableSettings {\n    constructor (key, expand, heading, description, toggleIcon, networkIcon, resultsPerPage = true, highlight = false, hideableColumns = false, defaultSortBy = 'headline', defaultSortDesc = false, defaultRowFilter = false) {\n        this.rowKey = key;\n        this.highlight = highlight;\n        this.expand = expand;\n        this.tableHeading = heading;\n        this.tableDescription = description;\n        this.showToggleIcon = toggleIcon;\n        this.showNetworkIcon = networkIcon;\n        this.showResultsPerPage = resultsPerPage;\n        this.hideableColumns = hideableColumns;\n        this.defaultSortBy = defaultSortBy;\n        this.defaultSortDesc = defaultSortDesc;\n        this.rowfilter = defaultRowFilter;\n    }\n}\n\nexport class HeaderConfig {\n    constructor (text, align = 'start', sortable = true, value, assignWidth = true, hideable = false) {\n        this.text = text;\n        this.align = align;\n        this.sortable = sortable;\n        this.value = value;\n        //adjusting header row width based on content\n        if(assignWidth) {\n            this.width = text === 'Arguments' ? '8%' :\n                align === 'center' || text === 'Date' || value === TABLEFIELDMAPPING.percentage ? '2%' :\n                value === TABLEFIELDMAPPING.nodeCount || value === TABLEFIELDMAPPING.entityCount ? '5%' :\n                text === 'Description' || text === 'Statement' ? '35%' : '24%';\n        }\n        this.hideable = hideable;\n    }\n}\n\nexport class SecondaryCaption {\n    constructor (prototype, field, key) {\n        this.prototype = prototype;\n        this.field = field;\n        this.key = key;\n    }\n}\n\nexport class SecondaryExpand {\n    constructor (prototype, field, headers) {\n        this.prototype = prototype;\n        this.field = field;\n        this.headers = headers;\n    }\n}\n\n/******************constant variables*******************/\nexport const DATATYPES = {\n    argumentName : new Datatype('argument', 'Argument Name'),\n    topic : new Datatype('topic', 'Topics'),\n    subtopic : new Datatype('subtopic', 'Sub Topics'),\n    template : new Datatype('template', 'Claim Templates'),\n    entityType : new Datatype('entity', 'Argument Type' ),\n    eventType : new Datatype('event', 'Event Type' ),\n    confidenceThreshold : new Datatype('confidence', 'Confidence Threshold' ),\n    connectionHops : new Datatype('hops', 'Connection Hops' ),\n    dateRange : new Datatype('date', 'Date Range' ),\n    hypothesis : new Datatype('hypothesis', 'Hypothesis' ),\n    kbId : new Datatype('kbId', 'KB ID' ),\n    relationType : new Datatype('relation', 'Relation Type' ),\n    sin : new Datatype('sin', 'Incidents' ),\n    summary : new Datatype('summary', 'Summaries')\n};\n\n//Sorted based on visual preference - for hypotheses data\nexport const ERETYPES = [DATATYPES.eventType.id, DATATYPES.entityType.id, DATATYPES.relationType.id];\n\nexport const QUERYOPTIONS = {\n    [DATATYPES.argumentName.id] : DATATYPES.argumentName.display,\n    [DATATYPES.sin.id] : DATATYPES.sin.display\n    /*            TODO: Add these options as autocomplete functionality becomes available\n                [DATATYPES.eventType.id] : DATATYPES.eventType.display,\n                [DATATYPES.entityType.id] : DATATYPES.entityType.display,\n                [DATATYPES.relationType.id] : DATATYPES.relationType.display,\n                [DATATYPES.kbId.id] : DATATYPES.kbId.display,\n                [DATATYPES.hypothesis.id] : DATATYPES.hypothesis.display*/\n};\n\nexport const COMPONENTNAMES = {\n    multiSelect : 'MultiSelectAutoComplete',\n    dateRange : 'DateFilter'\n}\n\nexport const TA2TERMOPTIONS = {\n    [DATATYPES.argumentName.id] : DATATYPES.argumentName.display\n};\n\nexport const TA3TERMOPTIONS = {\n    //[DATATYPES.hypothesis.id] : DATATYPES.hypothesis.display,\n    [DATATYPES.sin.id] : DATATYPES.sin.display\n};\n\nexport const SELECTDISPLAY = {\n    button : 'button',\n    text : 'text',\n    underline : 'underline',\n    input: 'input'\n};\n\nexport const PREFIXTYPES = {\n    dash: '-',\n    dot:'.',\n    hash: '#',\n    hashscore:'#_',\n    underscore: '_',\n    slash: '/'\n};\n\nexport const JOINSTRING = '___';\n\nexport const DATADISPLAY = {\n    count : 'count',\n    list : 'list'\n};\n\nexport const TABLESELECTIONS = {\n    tab : 'selectedTab',\n    display : 'selectedDisplay',\n    sort : 'sort',\n    sortDesc : 'descending',\n    sortBy : 'by',\n    paging: 'pagination',\n    itemsPerPage: 'itemsPerPage',\n    pageNumber: 'page',\n    pageStart: 'pageStart'\n};\n\nexport const TABLEFIELDMAPPING = {\n    //new api fields\n    affiliation: 'affiliation',\n    clusterUri: 'cluster',\n    clusterCategory: 'cluster_category',\n    clusterType: 'cluster_type',\n    prototype: 'prototype',\n    prototypeUri: 'prototype_uri',\n    prototypeId: 'prototype_id',\n    names: 'names',\n    headline: 'headline',\n    statement: 'statement',\n    documentList: 'docs',\n    docId: 'document_id',\n    docTitle: 'document_title',\n    docContentDate: 'document_contentdate',\n    docDownloadDate: 'document_downloaddate',\n    documentCount: 'docs_count', //calculated in the data formatting process\n    idUri: 'id_uri',\n    id: 'id',\n    ke: 'ke',\n    provenance: 'provenance',\n    roleUri: 'role_uri',\n    roles: 'roles',\n    types: 'types',\n    resolvedType: 'resolved_type',\n    category: 'category',\n    nodes: 'nodes',\n    nodeCount: 'node_count', //calculated in the data formatting process\n    entityList: 'entities',\n    entityCount: 'entity_count', //calculated in the data formatting process\n    confidenceSum: 'confidence_sum',\n    clusterList: 'clusters',\n    clusterIdList: 'cluster_ids',\n    eventList: 'events',\n    semantics: 'semantics',\n    relationList: 'relations',\n    highlight: 'highlight',\n    colorText: 'color_text',\n    compare: 'compare',\n    percentage: 'percentage',\n    dates: 'dates',\n    route: 'url_route',\n    //sin-related fields\n    hypothesisList: 'hypotheses',\n    sinList: 'sins',\n    sinId : 'sin',\n    sinTitle : 'sin_title',\n    //claim frame fields\n    topic: 'topic',\n    subtopic: 'subtopic',\n    claimTemplate: 'claimTemplate',\n    claimer: 'claimer',\n    location: 'locationName',\n    variableList: 'variables'\n};\n\nconst ta1Route = 'discover';\nconst ta2Route = 'explore';\nconst ta3Route = 'analyze';\nconst claimRoute = 'claims';\n\nexport const VUEROUTES = {\n    doc: '/' + ta1Route + '/doc',\n    ta2: ta2Route,\n    cluster: '/' + ta2Route + '/cluster_details',\n    element: '/' + ta2Route + '/element_details',\n    ta3: ta3Route,\n    claims: claimRoute,\n    hypothesis: '/' + ta3Route + '/hypothesis_details'\n};\n\nexport const PARAMETERNAMES = {\n    term : 'term',\n    filter : 'filter',\n    datasoure : 'datasource'\n};\n\nexport const SEARCHTYPES = {\n    single : 'singleSelect',\n    multi : 'multiSelect'\n};\n\nexport const INCIDENTMAPPING = [\n    { id:'E201', value: 'Death of Hugo Chávez'},\n    { id:'E202', value: '\"Mother of All Marches\" during 2017 Protests in Venezuela'},\n    { id:'E203', value: 'Helicopter Attack in Caracas'}\n];\n\nexport const isObject = v => v && typeof v === 'object';\n\nexport const LOADINGMESSAGE = 'Loading...Please wait';\nexport const NODATAMESSAGE = 'No data available';\n\nexport const DATASOURCEURI = process.env.DATA_SOURCE;\nexport const sponsorTypes = Object.keys(templates.original).filter(key => key.includes('Sponsorship'));\n\nconst stringsToIgnore = new Set([\n    'who',\n    'what',\n    'when',\n    'where',\n    'why',\n    'how',\n    'a',\n    'an',\n    'the',\n    'of',\n    'or',\n    'and',\n    'this',\n    'that',\n    'these',\n    'those',\n    'is',\n    'are',\n    'was',\n    'were',\n    'did',\n    '',\n    'in'\n]);\n\n/******************helper functions*******************/\nexport function ta3DataSource (source) {\n    return source.includes('TA3');\n}\n\nexport function ta2DataSource (source) {\n    return source.includes('TA2');\n}\n\nexport function getIncidentName(sinId) {\n    return INCIDENTMAPPING.find(elem => elem.id === sinId ? elem : '').value;\n}\n\nexport function getIncidentId(sinName) {\n    return INCIDENTMAPPING.find(elem => elem.value === sinName ? elem : '').id;\n}\n\nexport function getSinIdFromDataSource (source) {\n    let truncateSource = source.replace(DATASOURCEURI, '');\n    truncateSource = truncateSource.substring(truncateSource.indexOf('/') + 1);\n    return truncateSource.substring(0, truncateSource.indexOf('/'));\n}\n\nexport function upperFirstLetter(text) {\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\nexport function charReplace(str, char) {\n    char = typeof char === 'undefined' ? '_' : char;\n    return str.replace(/\\s/g, char);\n}\n\nexport function lowerCharReplace(str, char) {\n    return charReplace(str.toLowerCase(), char);\n}\n\nexport function splitOnUpper(textString) {\n    return textString.split(/(?=[A-Z])/).join(' ');\n}\n\nexport function pluralize(str) {\n    return Pluralize(str);\n}\n\nexport function prettyPluralize(str) {\n    return pluralize(upperFirstLetter(str));\n}\n\nexport function removePrefix(textString, type) {\n    let newString = textString;\n\n    if(textString) {\n        const hashPosition = textString.lastIndexOf(PREFIXTYPES.hash);\n\n        if (type === PREFIXTYPES.hash) {\n            newString = textString.substring(hashPosition + 1, textString.length);\n        } else if (type === PREFIXTYPES.hashscore) {\n            let underscorePosition = textString.lastIndexOf(PREFIXTYPES.underscore);\n            newString = textString.substring(hashPosition + 1, underscorePosition);\n        } else if ([PREFIXTYPES.underscore, PREFIXTYPES.dot, PREFIXTYPES.dash, PREFIXTYPES.slash].includes(type)) {\n            newString = textString.substring(textString.lastIndexOf(type) + 1, textString.length);\n        }\n    }\n    return newString;\n}\n\nexport function cleanName (name) {\n    let nameSplit = name.split(' ');\n\n    //move starting numbers to the end of the name string for sorting correction in the Vuetify autocomplete component\n    if(!isNaN(parseInt(nameSplit[0]))) {\n        const num = nameSplit[0];\n        let nameSlice = nameSplit.slice(1);\n        nameSlice.push(num);\n        nameSplit = nameSlice;\n    }\n\n    // eslint-disable-next-line no-useless-escape\n    return nameSplit.join(' ').replace(/[—/\"\\\\#¡«]/g, '').trim();\n}\n\nexport function sortCaseInsensitive (array) {\n    return array.sort((current, previous) => current.toLowerCase().localeCompare(previous.toLowerCase()));\n}\n\nexport function sortArrayOfObjects (array, key) {\n    return array.sort((a, b) => (a[key].toLowerCase() > b[key].toLowerCase()) ? 1 : -1);\n}\n\nexport function arraysMatch (arrOne, arrTwo) {\n    return arrOne.length === arrTwo.length &&\n    arrOne.every((element) =>  arrTwo.includes(element));\n}\n\nexport function buildRoute(id, path, suffix, params) {\n    const encodedId = encodeURIComponent(id);\n    let route = suffix ? [path, suffix, encodedId].join('/') : [path, encodedId].join('/');\n    if(params && params.length > 0) {\n        for (let i = 0; i < params.length; i++) {\n            route += i === 0 ? '?' : '&';\n            route += params[i].key + '=' + encodeURIComponent(params[i].value);\n        }\n    }\n    return route;\n}\n\nexport function convertTA3toTA2Route(ta3Route) {\n    return ta3Route.replace(/TA3\\/[^/]*\\/[^/]*\\//, 'TA2/');\n}\n\nexport function getStringValue(value) {\n    return Array.isArray(value) ?  value.join(', ') : value;\n}\n\nexport function getSortedTypes(types) {\n    return sortCaseInsensitive(types.map(getType));\n}\n\nexport function getLastSubType(t) {\n    return t.substring(t.lastIndexOf('.') + 1, t.length);\n}\n\nexport function getTransformedType(t, mapping) {\n    return t ? mapping[t] || splitOnUpper(getLastSubType(t)) : null;\n}\n\nexport function deduplicateArray(array) {\n    return [...new Map(array.map(item => [item.id, item])).values()];\n}\n\nexport function getType(type) {\n    return removePrefix(type, PREFIXTYPES.hash);\n}\n\nexport function getRole(role) {\n    return removePrefix(role, PREFIXTYPES.underscore);\n}\n\nexport function makePercentage(value, precision) {\n    return (value * 100).toFixed(precision);\n}\n\nfunction getName(entity, showNameCount=true) {\n    //appending the additional names count to the name string\n    let nameString = '';\n\n    if(entity.names && entity.names[0]) {\n        let index = 0;\n        let placeholder = -1;\n        let count = entity.names.length - 1;\n\n        //check if the argument search term exists in the list of names. If it does return it as the canonical name.\n        if($store.getters.getQueryParams.term && $store.getters.getQueryParams.term.input) {\n            placeholder = entity.names.findIndex(name => {\n                return name.toLowerCase() === $store.getters.getQueryParams.term.input.toLowerCase()\n            });\n        }\n\n        nameString = entity.names[placeholder > -1 ? placeholder : index];\n\n        //Add the count for the remaining names in the list\n        if(count > 0 && showNameCount) {\n            nameString = nameString + ' ('  + count + ' more)';\n        }\n    }\n    else if (entity.handle) {\n        nameString = entity.handle;\n    }\n\n    return nameString;\n}\n\nexport function getId(uri) {\n    return removePrefix(removePrefix(uri, PREFIXTYPES.hash), PREFIXTYPES.slash)\n}\n\nfunction getClusterIdObject(uri) {\n    return {\n        [TABLEFIELDMAPPING.idUri]:uri,\n        [TABLEFIELDMAPPING.id]:removePrefix(removePrefix(uri, PREFIXTYPES.hash), PREFIXTYPES.slash)\n    };\n}\n\n/******************formatting functions*******************/\n\nfunction createMember(member, category, entities, clusters) {\n    return {\n        [TABLEFIELDMAPPING.headline]: member.id,\n        [TABLEFIELDMAPPING.idUri]: member.id,\n        [TABLEFIELDMAPPING.id]: getId(member.id),\n        [TABLEFIELDMAPPING.types]: getSortedTypes(member.types),\n        [TABLEFIELDMAPPING.entityCount]: entities.length,\n        [TABLEFIELDMAPPING.entityList]: entities,\n        [TABLEFIELDMAPPING.nodeCount]: clusters && clusters.length,\n        [TABLEFIELDMAPPING.clusterList]: clusters,\n        [TABLEFIELDMAPPING.category]: category,\n        [TABLEFIELDMAPPING.documentList]: member.docs\n    };\n}\n\n//Formatting event or relation cluster details\nexport function formatCluster(data, category) {\n    let cluster =  {\n        [TABLEFIELDMAPPING.headline]: category === DATATYPES.hypothesis.id ? getName(data) : getId(data.cluster),\n        [TABLEFIELDMAPPING.names]: data.names,\n        [TABLEFIELDMAPPING.id]: getId(data.cluster),\n        [TABLEFIELDMAPPING.category]: data.category? getType(data.category).toLowerCase() : category,\n        [TABLEFIELDMAPPING.clusterUri]: data.cluster\n    };\n\n    if(data.hasOwnProperty(TABLEFIELDMAPPING.prototype)) {\n        cluster[TABLEFIELDMAPPING.prototype] = formatClusterElement(data.prototype, category);\n        cluster[TABLEFIELDMAPPING.prototypeUri] = data.prototype.id;\n        cluster[TABLEFIELDMAPPING.prototypeId] = getId(data.prototype.id);\n        cluster[TABLEFIELDMAPPING.types] = getSortedTypes(data.prototype.types);\n        cluster[TABLEFIELDMAPPING.entityCount] = cluster[TABLEFIELDMAPPING.prototype][TABLEFIELDMAPPING.entityCount];\n    }\n\n    if(category !== DATATYPES.hypothesis.id) {\n        cluster[TABLEFIELDMAPPING.nodeCount] = data.members ? data.members.length : 0;\n        cluster[TABLEFIELDMAPPING.nodes] = data.members.map(member => formatClusterElement(member, category));\n        cluster[TABLEFIELDMAPPING.documentList] = sortArrayOfObjects([...new Set(data.members.flatMap(member => member.docs))], 'id')\n    }\n    else {\n        cluster[TABLEFIELDMAPPING.highlight] = data[TABLEFIELDMAPPING.highlight] ? data[TABLEFIELDMAPPING.highlight] : false;\n    }\n\n    return cluster;\n}\n\n//Formatting entity clusters for hypothesis\nexport function formatHypothesisEntities(data) {\n    const entities = data && data.map(entity => {\n        //Only collect the fillers that are entities - some event fillers may exist (event to event connections)\n        if(getType(entity.category).toLowerCase() === DATATYPES.entityType.id) {\n            return {\n                [TABLEFIELDMAPPING.headline]: getName(entity),\n                [TABLEFIELDMAPPING.names]: entity.names,\n                [TABLEFIELDMAPPING.clusterUri]: entity.clusterIds[0],\n                [TABLEFIELDMAPPING.types]: getSortedTypes(entity.types),\n                [TABLEFIELDMAPPING.prototypeId]: getId(entity.id),\n                [TABLEFIELDMAPPING.id]: getId(entity.clusterIds[0]),\n                [TABLEFIELDMAPPING.category]: 'entity',\n                [TABLEFIELDMAPPING.highlight] : entity[TABLEFIELDMAPPING.highlight] ? entity[TABLEFIELDMAPPING.highlight] : false\n            }\n        }\n    });\n\n    //deduplicate entities\n    return deduplicateArray(entities.filter(item => item !== undefined));\n}\n\n//Formatting hypothesis details\nexport function formatHypothesisCluster(data, category) {\n    const members = deduplicateArray(data.members.map(member => formatCluster(member, category)));\n    return  {\n        [TABLEFIELDMAPPING.headline]: getId(data.hypothesis),\n        [TABLEFIELDMAPPING.idUri]: data.hypothesis,\n        [TABLEFIELDMAPPING.entityList] : formatHypothesisEntities(data.fillers),\n        [TABLEFIELDMAPPING.category]: category,\n        [TABLEFIELDMAPPING.eventList] :members.filter(member => getType(member.category).toLowerCase() === DATATYPES.eventType.id),\n        [TABLEFIELDMAPPING.relationList] : members.filter(member => getType(member.category).toLowerCase() === DATATYPES.relationType.id),\n        [TABLEFIELDMAPPING.documentList]: sortArrayOfObjects(data.docs, 'id'),\n    };\n}\n\nexport function getSinArgumentHeadline(argument) {\n    return argument.handle || getName(argument) || 'UNKNOWN';\n}\n\nfunction formatSinHypothesisArguments(roles, memberType) {\n    const ret = [];\n\n    for (let role of roles) {\n        for (let argument of role.arguments)  {\n            ret.push({\n                [TABLEFIELDMAPPING.headline]: getSinArgumentHeadline(argument),\n                [TABLEFIELDMAPPING.names]: argument.names,\n                [TABLEFIELDMAPPING.roleUri]: [role.role],\n                [TABLEFIELDMAPPING.roles]: [getRole(role.role)],\n                [TABLEFIELDMAPPING.id]: getId(argument.id),\n                [TABLEFIELDMAPPING.prototypeUri]: argument.prototype,\n                [TABLEFIELDMAPPING.types]: argument.types.length > 0 ?  sortCaseInsensitive(argument.types.map(getType)) : ['UNKNOWN'],\n                discrepancy: !role.role.includes(memberType) ? '(err: ' + getType(role.role) + ')' : '',\n                [TABLEFIELDMAPPING.colorText]: false\n            });\n        }\n    }\n    return ret;\n}\n\n//Formatting event or relation cluster details\nexport function formatSinHypothesisMember(data) {\n    let memberType = getType(data.type);\n    return {\n        [TABLEFIELDMAPPING.headline]: getId(data.node),\n        [TABLEFIELDMAPPING.id]: getId(data.node),\n        [TABLEFIELDMAPPING.idUri]: data.node,\n        [TABLEFIELDMAPPING.category]: getType(data.category),\n        [TABLEFIELDMAPPING.types]: [memberType],\n        [TABLEFIELDMAPPING.entityList]: data.roles.length > 0 ? formatSinHypothesisArguments(data.roles, memberType) : {},\n    };\n}\n\n//Formatting SINs comparison\nexport function formatSinsComparison(data, category, type) {\n    const members = deduplicateArray(data.members.map(member => formatSinHypothesisMember(member)));\n\n    return  {\n        [TABLEFIELDMAPPING.headline]: getId(data.hypothesis),\n        [TABLEFIELDMAPPING.idUri]: data.hypothesis,\n        [TABLEFIELDMAPPING.roles] : data.roles,\n        [TABLEFIELDMAPPING.category]: category,\n        [TABLEFIELDMAPPING.clusterCategory]: data.category,\n        [TABLEFIELDMAPPING.clusterType]: type,\n        [TABLEFIELDMAPPING.clusterList]: members,\n        [TABLEFIELDMAPPING.percentage] : data[TABLEFIELDMAPPING.percentage] ? data[TABLEFIELDMAPPING.percentage] : undefined,\n        [TABLEFIELDMAPPING.highlight] : data[TABLEFIELDMAPPING.highlight] ? data[TABLEFIELDMAPPING.highlight] : false,\n        [TABLEFIELDMAPPING.compare] : false\n    };\n}\n\nfunction getDateParts(date) {\n    //TODO: Is there a discrepancy here in the formatting\n    if (!date) {\n        return '';\n    }\n    const splitDate = date.split('--');\n    //using provided year since all of the years in the data could not be accurately converted (e.g. 0001, 9999)\n    const dateYear = splitDate[0] || '????';\n    const hasDash = splitDate[1].includes('-');\n    const dateMonth = hasDash ? '???' : new Date(null, splitDate[1], null).toLocaleString('en-us', { month: 'short' });\n    const dateDay = hasDash ? splitDate[1] : splitDate[2] || '-??';\n\n    return [dateYear, dateMonth, dateDay.substring(1)];\n}\n\nfunction combineParts(parts) {\n    return parts.join(' ');\n}\n\nfunction combineDates(start, end) {\n    let combined = '';\n    if(start && end) {\n        combined = start + ' \\u2013 ' + end;\n    }\n    else {\n        combined = start ? start : end;\n    }\n    return combined;\n}\n\nexport function getDateString(date) {\n    const start = getDateParts(date.startAfter || date.startBefore);\n    const end = getDateParts(date.endBefore || date.endAfter);\n\n    const startString = start ? combineParts(start) : '';\n    const endString = end ? combineParts(end) : '';\n\n    const [sY, sM, sD] = start;\n    const [eY, eM, eD] = end;\n\n    // different years\n    if (sY !== eY) {\n        return combineDates(startString, endString);\n    }\n\n    // different months\n    if (sM !== eM) {\n        return combineDates(startString, combineParts([eM, eD]));\n    }\n\n    // different days\n    if (sD !== eD) {\n        return combineDates(startString, eD);\n    }\n\n    // all equal\n    return startString;\n}\n\nexport function formatSinsClaims(data, category, type) {\n    return  {\n        [TABLEFIELDMAPPING.clusterUri]: data.node,\n        [TABLEFIELDMAPPING.clusterCategory]: data.category,\n        [TABLEFIELDMAPPING.clusterType]: type,\n        [TABLEFIELDMAPPING.id]: '',\n        [TABLEFIELDMAPPING.prototypeUri] : data.prototype,\n        [TABLEFIELDMAPPING.statement]: '',\n        [TABLEFIELDMAPPING.dates]: data.dates && [...new Set(data.dates.map(getDateString))].sort(),\n        [TABLEFIELDMAPPING.category]: category,\n        [TABLEFIELDMAPPING.hypothesisList]: data.hypotheses,\n        [TABLEFIELDMAPPING.entityList]: data.roles.length > 0 ? formatSinHypothesisArguments(data.roles, type) : {},\n        [TABLEFIELDMAPPING.documentList] : []\n    };\n}\n\nfunction formatUniqueMembers(member, category, entities) {\n    const clusters = member.clusters && member.clusters.map(cluster => ({\n        [TABLEFIELDMAPPING.types]: getSortedTypes(cluster.types),\n        [TABLEFIELDMAPPING.clusterUri]: cluster.id,\n        [TABLEFIELDMAPPING.id]: getId(cluster.id),\n        [TABLEFIELDMAPPING.category]: category\n    }));\n\n    return createMember(member, category, entities, clusters);\n}\n\nfunction formatClusterElement(member, category) {\n    const entityClusters = formatPrototypeArguments(member.arguments, category);\n    return(formatUniqueMembers(member, category, entityClusters))\n}\n\nfunction reduceSets(entities) {\n    const formattedEntities = [...entities.values()];\n\n    for (const fe of formattedEntities) {\n        fe[TABLEFIELDMAPPING.types] = sortCaseInsensitive([...fe[TABLEFIELDMAPPING.types]]);\n        fe[TABLEFIELDMAPPING.roles] = sortCaseInsensitive([...fe[TABLEFIELDMAPPING.roles]]);\n\n        if(fe[TABLEFIELDMAPPING.clusterIdList]) {\n            fe[TABLEFIELDMAPPING.clusterIdList] = sortCaseInsensitive([...fe[TABLEFIELDMAPPING.clusterIdList]]).flatMap(getClusterIdObject);\n        }\n    }\n    return formattedEntities;\n}\n\nexport function formatPrototypeArguments(entities, category) {\n    const map = new Map();\n    for (const entity of entities) {\n        const role = getRole(entity.role);\n        for (const filler of entity.fillers) {\n            const types = filler.types.map(getType);\n            const clusterIdList = filler.clusterIds;\n\n            let formattedFiller = map.get(filler.id);\n            if (!formattedFiller) {\n                formattedFiller = {\n                    [TABLEFIELDMAPPING.headline]: category && category === DATATYPES.sin.id ? getName(filler, false): getName(filler),\n                    [TABLEFIELDMAPPING.names]: filler.names,\n                    [TABLEFIELDMAPPING.roles]: new Set([role]),\n                    [TABLEFIELDMAPPING.types]: new Set(types),\n                    [TABLEFIELDMAPPING.id]: getId(filler.id),\n                    [TABLEFIELDMAPPING.idUri]: filler.id,\n                    [TABLEFIELDMAPPING.category]: 'entity'\n                };\n\n                if(clusterIdList) {\n                    formattedFiller[TABLEFIELDMAPPING.clusterIdList] = new Set([...clusterIdList]);\n                }\n                map.set(filler.id, formattedFiller);\n            } else {\n                for (let type of types) {\n                    formattedFiller[TABLEFIELDMAPPING.types].add(type);\n                }\n\n                if(clusterIdList) {\n                    for (let item of clusterIdList) {\n                        formattedFiller[TABLEFIELDMAPPING.clusterIdList].add(item);\n                    }\n                }\n\n                formattedFiller[TABLEFIELDMAPPING.roles].add(role);\n            }\n        }\n    }\n    return reduceSets(map);\n}\n\n//Formatting event or relation element details\nexport function formatElementMembers(member, category) {\n    return(formatDuplicateMembers(member, category, formatPrototypeArguments(member.arguments)));\n}\n\nfunction formatDuplicateMembers(member, category, entities) {\n    const map = new Map();\n\n    for (const cluster of member.clusters) {\n        const types = cluster.types.map(getType);\n\n        let clusterMember = map.get(cluster.id);\n        if (!clusterMember) {\n            clusterMember = {\n                [TABLEFIELDMAPPING.types]: new Set(types),\n                [TABLEFIELDMAPPING.clusterUri]: cluster.id,\n                [TABLEFIELDMAPPING.id]: getId(cluster.id),\n                [TABLEFIELDMAPPING.category]: category\n            };\n            map.set(cluster.id, clusterMember);\n        } else {\n            for (let type of types) {\n                clusterMember[TABLEFIELDMAPPING.types].add(type);\n            }\n        }\n    }\n\n    const formattedCluster = [...map.values()];\n    for (const fc of formattedCluster) {\n        fc[TABLEFIELDMAPPING.types] = sortCaseInsensitive([...fc[TABLEFIELDMAPPING.types]]);\n    }\n\n    return createMember(member, category, entities, formattedCluster);\n}\n\n\n//Formatting entity cluster details\nexport function formatEntityCluster(data) {\n    return {\n        [TABLEFIELDMAPPING.headline]: getName(data) || getName(data.prototype),\n        [TABLEFIELDMAPPING.category]: 'entity',\n        [TABLEFIELDMAPPING.names]: data.names || data.prototype.names,\n        [TABLEFIELDMAPPING.types]: getSortedTypes(data.prototype.types),\n        [TABLEFIELDMAPPING.clusterUri]: data.cluster,\n        [TABLEFIELDMAPPING.id]: getId(data.cluster),\n        [TABLEFIELDMAPPING.nodeCount]: data.members.length,\n        [TABLEFIELDMAPPING.nodes]: data.members.map(formatEntityMembers),\n        [TABLEFIELDMAPPING.prototype]: formatEntityMembers(data.prototype),\n        [TABLEFIELDMAPPING.prototypeUri]: data.prototype.id,\n        [TABLEFIELDMAPPING.prototypeId]: getId(data.prototype.id),\n        [TABLEFIELDMAPPING.documentList]: sortArrayOfObjects([...new Set(data.members.flatMap(member => member.docs))], 'id'),\n    };\n}\n\n//Formatting entity element details\nexport function formatEntityMembers(member) {\n    const connections = formatEntityConnection(member.connections);\n    const clusters = member.clusters && member.clusters.map(cluster => ({\n        [TABLEFIELDMAPPING.headline]: getName(cluster),\n        [TABLEFIELDMAPPING.names]: cluster.names,\n        [TABLEFIELDMAPPING.clusterUri]: cluster.id,\n        [TABLEFIELDMAPPING.types]: getSortedTypes(member.types),\n        [TABLEFIELDMAPPING.id]: getId(cluster.id),\n        [TABLEFIELDMAPPING.category]: 'entity'\n    }));\n\n    return {\n        [TABLEFIELDMAPPING.headline]: getName(member),\n        [TABLEFIELDMAPPING.names]: member.names,\n        [TABLEFIELDMAPPING.idUri]: member.id,\n        [TABLEFIELDMAPPING.id]: getId(member.id),\n        [TABLEFIELDMAPPING.types]: getSortedTypes(member.types),\n        [TABLEFIELDMAPPING.eventList]: connections.filter(connection => connection[TABLEFIELDMAPPING.category] === 'event'),\n        [TABLEFIELDMAPPING.relationList]: connections.filter(connection => connection[TABLEFIELDMAPPING.category] === 'relation'),\n        [TABLEFIELDMAPPING.nodeCount]: clusters && clusters.length,\n        [TABLEFIELDMAPPING.clusterList]: clusters,\n        [TABLEFIELDMAPPING.documentList]: member.docs,\n        [TABLEFIELDMAPPING.category]: 'entity'\n    }\n}\n\nfunction formatEntityConnection(entities) {\n    const map = new Map();\n\n    for (const entity of entities) {\n        const role = getRole(entity.role);\n        for (const connection of entity.connections) {\n            const types = connection.types.map(getType);\n\n            let formattedConnection = map.get(connection.id);\n            if (!formattedConnection) {\n                formattedConnection = {\n                    [TABLEFIELDMAPPING.roles]: new Set([role]),\n                    [TABLEFIELDMAPPING.types]: new Set(types),\n                    [TABLEFIELDMAPPING.id]: getId(connection.id),\n                    [TABLEFIELDMAPPING.idUri]: connection.id,\n                    [TABLEFIELDMAPPING.category]: getType(entity.category).toLowerCase()\n                };\n                map.set(connection.id, formattedConnection);\n            } else {\n                for (let type of types) {\n                    formattedConnection[TABLEFIELDMAPPING.types].add(type);\n                }\n\n                formattedConnection[TABLEFIELDMAPPING.roles].add(role);\n            }\n        }\n    }\n\n    return reduceSets(map);\n}\n\nfunction countHypothesisNodes(node) {\n    let counts = [];\n    for(const type of ERETYPES) {\n        counts.push({[TABLEFIELDMAPPING.nodeCount] : node[type + 'Count'], [TABLEFIELDMAPPING.category] : type})\n    }\n    return counts;\n}\n\n\n//Formatting table data\nexport function formatClusterTableData(data, category) {\n    let clusters = {};\n    for (const row of data) {\n        let clusterUri = category === DATATYPES.hypothesis.id ? row[DATATYPES.hypothesis.id] : row[TABLEFIELDMAPPING.clusterUri];\n        let cluster = clusters[clusterUri];\n        let clusterId = getId(clusterUri);\n\n        if (!cluster) {\n            cluster = {\n                [TABLEFIELDMAPPING.clusterUri]: clusterUri,\n                [TABLEFIELDMAPPING.id]: clusterId,\n                [TABLEFIELDMAPPING.headline]: clusterId,\n                [TABLEFIELDMAPPING.category]: category,\n                [TABLEFIELDMAPPING.nodeCount]: row['argumentCount']\n            };\n\n            if(category === DATATYPES.hypothesis.id) {\n                cluster[TABLEFIELDMAPPING.nodes] = countHypothesisNodes(row);\n            }\n            else {\n                let prototypeUri = row[TABLEFIELDMAPPING.prototype];\n                let prototypeId = getId(prototypeUri);\n\n                cluster[TABLEFIELDMAPPING.types] = sortCaseInsensitive([...new Set( row[TABLEFIELDMAPPING.types].flatMap(getType))]);\n                cluster[TABLEFIELDMAPPING.prototypeUri] = prototypeUri;\n                cluster[TABLEFIELDMAPPING.prototypeId]= prototypeId;\n                cluster[TABLEFIELDMAPPING.prototype] = {};\n            }\n\n            clusters[clusterUri] = cluster;\n        }\n    }\n    return Object.fromEntries(Object.entries(clusters).sort());\n}\n\nexport function formatESData(category, sin) {\n    let eventClusterBySin = new Map();\n    let entityByEventCluster = new Map();\n    let summaryItems = [];\n    for (const cluster of sin) {\n        //if there are no arguments then there is no need to show the member\n        if (cluster.entities && cluster.entities.length > 0) {\n            const clusterId = cluster.cluster;\n            const clusterSin = cluster.sin;\n            const joinedId = clusterSin + JOINSTRING + clusterId;\n            if(!eventClusterBySin.has(clusterSin)) {\n                eventClusterBySin.set(clusterSin, new Map())\n            }\n\n            if(!eventClusterBySin.get(clusterSin).has(clusterId)) {\n                eventClusterBySin.get(clusterSin).set(clusterId, new Map());\n            }\n\n            if(!entityByEventCluster.has(joinedId)) {\n                entityByEventCluster.set(joinedId, new Map());\n            }\n\n            let roles = [];\n            for(const entity of cluster.entities) {\n                entity[TABLEFIELDMAPPING.clusterType] = cluster.cluster_type;\n                let entityRoles = [];\n                for(const role of entity[TABLEFIELDMAPPING.roleUri]) {\n                    entityRoles.push(removePrefix(role, PREFIXTYPES.underscore));\n                }\n                entity[TABLEFIELDMAPPING.roles] = entityRoles;\n                roles = [...roles, ...entityRoles];\n\n                if(!entityByEventCluster.get(joinedId).has(entity.id)) {\n                    entityByEventCluster.get(joinedId).set(entity.id, []);\n                }\n                entityByEventCluster.get(joinedId).get(entity.id).push(entity);\n            }\n\n            const date = cluster.date ? cluster.date.toString() : null;\n            const key = cluster[TABLEFIELDMAPPING.statement] + date;\n            let data = {\n                [TABLEFIELDMAPPING.headline]: getId(cluster.hypothesis),\n                [TABLEFIELDMAPPING.idUri] : cluster.hypothesis,\n                [TABLEFIELDMAPPING.roles]: roles,\n                [TABLEFIELDMAPPING.sinId]: clusterSin,\n                [TABLEFIELDMAPPING.category]: DATATYPES.sin.id,\n                [TABLEFIELDMAPPING.statement] : cluster.statement,\n                [TABLEFIELDMAPPING.clusterCategory]: cluster.cluster_category,\n                [TABLEFIELDMAPPING.sinTitle]: upperFirstLetter(cluster.cluster_category) + ' - ' + cluster.cluster_type,\n                [TABLEFIELDMAPPING.clusterType]: cluster.cluster_type,\n                [TABLEFIELDMAPPING.compare]:false,\n                [TABLEFIELDMAPPING.highlight]:false,\n                [TABLEFIELDMAPPING.percentage]:undefined,\n                [TABLEFIELDMAPPING.clusterList]: [cluster],\n                [TABLEFIELDMAPPING.id] : key,\n                [TABLEFIELDMAPPING.dates]: cluster.date,\n                [TABLEFIELDMAPPING.route] : DATASOURCEURI + 'TA3/' + cluster.sin + '/' + cluster.run\n            };\n\n            if(!eventClusterBySin.get(clusterSin).get(clusterId).has(cluster.hypothesis)) {\n                eventClusterBySin.get(clusterSin).get(clusterId).set(cluster.hypothesis, data);\n            }\n        }\n    }\n\n    let clustersBySin = {};\n    for (const [sinKey, clusterMap] of eventClusterBySin.entries()) {\n        let clusters = {};\n        for (const [clusterKey, clustersByHypothesis] of clusterMap.entries()) {\n            const hypotheses = [ ...clustersByHypothesis.keys()];\n            const values = [ ...clustersByHypothesis.values()];\n\n            //if there are enough values to compare, more than one value\n            if(values.length > 1) {\n                const clusterEntities = entityByEventCluster.get(sinKey + JOINSTRING + clusterKey);\n                let summaryData = {};\n\n                summaryData[TABLEFIELDMAPPING.id] = clusterKey;\n                summaryData[TABLEFIELDMAPPING.sinId] = values[0][TABLEFIELDMAPPING.sinId];\n                summaryData[TABLEFIELDMAPPING.category] = DATATYPES.eventType.id;\n                summaryData[TABLEFIELDMAPPING.clusterCategory] = values[0][TABLEFIELDMAPPING.clusterCategory];\n                summaryData[TABLEFIELDMAPPING.entityCount] = 'Entities: ' + clusterEntities.size;\n                summaryData[TABLEFIELDMAPPING.nodeCount] = 'Claims: ' + hypotheses.length;\n                summaryData[TABLEFIELDMAPPING.route] = convertTA3toTA2Route(values[0][TABLEFIELDMAPPING.route]);\n\n                let entityList = [];\n                for(const entity of clusterEntities.values()) {\n                    //if this entity appears at least 1 time for each hypothesis in the cluster, it should be added to the summary description\n                    if(entity.length >= hypotheses.length) {\n                        entityList.push(entity[0]);\n                    }\n                }\n\n                const identifiers = getEntityIdentifiers(entityList);\n                const clusterType = values[0][TABLEFIELDMAPPING.clusterType];\n                const summary = getTemplate(clusterType, identifiers);\n                summaryData[TABLEFIELDMAPPING.headline] = summary;\n                clusters[summary + JOINSTRING + clusterKey] = values;\n                summaryItems.push(summaryData);\n            }\n        }\n\n        clustersBySin[sinKey] = clusters;\n    }\n\n    //updates the sin summaries and details\n    summaryItems = sortArrayOfObjects(summaryItems, TABLEFIELDMAPPING.headline);\n    return {[DATATYPES.summary.id]: summaryItems, [DATATYPES.eventType.id]: clustersBySin};\n}\n\n//statement template functions\nexport function getEntityName(e) {\n    let ret = e[TABLEFIELDMAPPING.headline];\n    if (!ret || ret.includes('UNKNOWN')) {\n        //types filter checks for all types with two periods or one period, then takes the first one\n        let designatedType = e[TABLEFIELDMAPPING.types].find(t => t.match('(?:\\\\w+(?:\\\\.\\\\w+)){2}')) || e[TABLEFIELDMAPPING.types].find(t => t.match('(?:\\\\w+(?:\\\\.\\\\w+)){1}'));\n        designatedType = designatedType ? getLastSubType(designatedType) : e[TABLEFIELDMAPPING.types][0];\n        ret = getTransformedType(designatedType, CategoryTypes.entityTypeMapping);\n    }\n    if (e.discrepancy) {\n        ret += ' ' + e.discrepancy;\n    }\n    return ret;\n}\n\nexport function getEntityIdentifiers(entities) {\n    const args = {};\n    for ( const entity of entities) {\n        let role = entity[TABLEFIELDMAPPING.roles][0];\n        let clusterType = entity[TABLEFIELDMAPPING.clusterType];\n\n        //Annotation entry error fix, if role is Victim instead of Target, the template cannot be fully applied\n        if(role === 'Victim' && clusterType === 'Conflict.Attack') {\n            role = 'Target';\n        }\n\n        if (!args[role]) {\n            args[role] = [];\n        }\n        args[role].push(getEntityName(entity));\n    }\n    return args;\n}\n\nfunction combineTemplateArgs(templateArgs) {\n    if(Array.isArray(templateArgs) && templateArgs.length > 1) {\n        templateArgs = [...templateArgs];\n        templateArgs[templateArgs.length - 1] = 'and ' + templateArgs[templateArgs.length - 1];\n        templateArgs = templateArgs.join(templateArgs.length === 2 ? ' ' : ', ');\n    }\n    return templateArgs;\n}\n\nexport function getOriginalTemplate(type, args) {\n    const templateObj = templates.original[type];\n    let template = templateObj.template;\n    for (const [i, arg] of templateObj.args.entries()) {\n        template = template.replace('<arg' + (i + 1) + '>', combineTemplateArgs(args[arg]) || '?');\n    }\n    return template;\n}\n\nexport function getTemplate(type, args) {\n    const templateObj = templates.original[type];\n    const parts = templates.augmented[templateObj.template];\n    if (!parts) {\n        return getOriginalTemplate(type, args);\n    }\n    let template = '';\n    for (const index of parts.order) {\n        const part = parts[index];\n        if (typeof index === 'string') {\n            template += index;\n        } else {\n            let templateArgs = args[templateObj.args[index - 1]] || part.substitution;\n            if (!templateArgs) {\n                continue;\n            }\n            templateArgs = combineTemplateArgs(templateArgs);\n            if (part.prefix) {\n                template += part.prefix;\n            }\n            template += templateArgs;\n            if (part.suffix) {\n                template += part.suffix;\n            }\n        }\n    }\n\n    return template;\n}\n\nexport function getTemplatePredicate(type) {\n    const templateObj = templates.original[type];\n    const parts = templates.augmented[templateObj.template];\n    let predicate = null;\n    for (const index of parts.order) {\n        if (typeof index === 'string') {\n            predicate = index;\n            break;\n        }\n    }\n\n    return predicate;\n}\n\nfunction replaceCamelCase(string, replacement) {\n    return string.replace(/(?<=[a-z])(?=[A-Z])/g, replacement)\n}\nexport function getTypesFromQuery(query) {\n    const ret = [];\n    // remove non alpha characters from query and split into words\n    for (const kept of query.toLowerCase().replace(/[^a-z ]+/g,'').split(' ').filter(str => !stringsToIgnore.has(str))) {\n        // find in types and templates\n        for (const [type, value] of Object.entries(templates.original)) {\n            // check whether query word matches a string from type, the template, or an argument\n            if (replaceCamelCase(type, '.').toLowerCase().split('.').includes(kept) ||\n                value.template.toLowerCase().split(' ').includes(kept) ||\n                value.args.flatMap(a => replaceCamelCase(a, ' ').toLowerCase().split(' ')).includes(kept) ) {\n                ret.push(type);\n            }\n        }\n    }\n    return ret.length ? ret : undefined;\n}\n"]}]}