{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/analyze/Claims.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/analyze/Claims.vue","mtime":1640207172535},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiL1VzZXJzL3dvbWl0b3dvanUvd29ya3NwYWNlL2FpZGEvVkVSREktVUkvR1VJL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQiOwppbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gIi9Vc2Vycy93b21pdG93b2p1L3dvcmtzcGFjZS9haWRhL1ZFUkRJLVVJL0dVSS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiL1VzZXJzL3dvbWl0b3dvanUvd29ya3NwYWNlL2FpZGEvVkVSREktVUkvR1VJL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYubWFwIjsKCmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvWyJAQGl0ZXJhdG9yIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gIm51bWJlciIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH0KCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBEYXRhVGFibGUgZnJvbSAnQC9jb21wb25lbnRzL0RhdGFUYWJsZSc7CmltcG9ydCB7IG1hcE11dGF0aW9ucywgbWFwU3RhdGUsIG1hcEFjdGlvbnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IEFQSSBmcm9tICIuLi8uLi9hcGkiOwppbXBvcnQgQ2F0ZWdvcnlUeXBlcyBmcm9tICdAL2Fzc2V0cy9kYXRhL3R5cGVzLmpzb24nOwppbXBvcnQgSW5mb1Rvb2x0aXAgZnJvbSAnQC9jb21wb25lbnRzL0luZm9Ub29sdGlwJzsKaW1wb3J0IHsgVEFCTEVTRUxFQ1RJT05TLCBUQUJMRUZJRUxETUFQUElORywgREFUQVRZUEVTLCBMT0FESU5HTUVTU0FHRSwgTk9EQVRBTUVTU0FHRSwgU0VBUkNIVFlQRVMsIGdldFNpbkFyZ3VtZW50SGVhZGxpbmUsIFNlY29uZGFyeUV4cGFuZCwgZm9ybWF0U2luc0NsYWltcywgc29ydENhc2VJbnNlbnNpdGl2ZSwgZ2V0VHlwZSwgZ2V0Um9sZSwgZ2V0RW50aXR5TmFtZSwgZ2V0SW5jaWRlbnROYW1lLCBnZXRFbnRpdHlJZGVudGlmaWVycywgZ2V0VGVtcGxhdGUsIGdldFRlbXBsYXRlUHJlZGljYXRlLCBnZXRUeXBlc0Zyb21RdWVyeSwgZ2V0VHJhbnNmb3JtZWRUeXBlLCBnZXRMYXN0U3ViVHlwZSwgc3BvbnNvclR5cGVzLCBUYWJsZVNldHRpbmdzLCBIZWFkZXJDb25maWcgfSBmcm9tICIuLi8uLi91dGlscyI7CnZhciBjdXJyZW50UmVxdWVzdHMgPSBuZXcgTWFwKCk7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQ2xhaW1zJywKICBwcm9wczogewogICAgc2VhcmNoVHlwZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IFNFQVJDSFRZUEVTLnNpbmdsZSwKICAgICAgcmVxdWlyZWQ6IGZhbHNlCiAgICB9LAogICAgY2xhaW1TZWFyY2hTaW5JZDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IG51bGwsCiAgICAgIHJlcXVpcmVkOiBmYWxzZQogICAgfSwKICAgIGNsYWltU2VhcmNoRmlsdGVyczogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdDogbnVsbCwKICAgICAgcmVxdWlyZWQ6IGZhbHNlCiAgICB9CiAgfSwKICBjb21wb25lbnRzOiB7CiAgICBEYXRhVGFibGU6IERhdGFUYWJsZSwKICAgIEluZm9Ub29sdGlwOiBJbmZvVG9vbHRpcAogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHZhciBfc29ydDsKCiAgICByZXR1cm4gewogICAgICBzb3J0OiAoX3NvcnQgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9zb3J0LCBUQUJMRVNFTEVDVElPTlMuc29ydEJ5LCBUQUJMRUZJRUxETUFQUElORy5zdGF0ZW1lbnQpLCBfZGVmaW5lUHJvcGVydHkoX3NvcnQsIFRBQkxFU0VMRUNUSU9OUy5zb3J0RGVzYywgZmFsc2UpLCBfc29ydCksCiAgICAgIHBhZ2luZzogX2RlZmluZVByb3BlcnR5KHt9LCBUQUJMRVNFTEVDVElPTlMuaXRlbXNQZXJQYWdlLCAnQWxsJyksCiAgICAgIHN0YXR1c01lc3NhZ2U6ICcnLAogICAgICBjbGFpbXM6IHt9LAogICAgICBtZW1iZXJUeXBlczogW10sCiAgICAgIGluY2lkZW50VHlwZXM6IHt9LAogICAgICBTSU46IHt9LAogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgdG9nZ2xlVGFibGVzOiB7fQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLlRBQkxFRklFTERNQVBQSU5HID0gVEFCTEVGSUVMRE1BUFBJTkc7CiAgICB0aGlzLkRBVEFUWVBFUyA9IERBVEFUWVBFUzsKICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICB0aGlzLnN0YXR1c01lc3NhZ2UgPSBMT0FESU5HTUVTU0FHRTsKICAgIHRoaXMuTk9EQVRBTUVTU0FHRSA9IE5PREFUQU1FU1NBR0U7CiAgICB0aGlzLlNFQVJDSFRZUEVTID0gU0VBUkNIVFlQRVM7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy51cGRhdGVIeXBvdGhlc2lzU2VsZWN0aW9uKHt9KTsKICB9LAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcFN0YXRlKFsnZGVmYXVsdEh5cG90aGVzaXNEYXRhU291cmNlJywgJ2h5cG90aGVzaXNTZWxlY3Rpb24nLCAnY3VycmVudERhdGFTb3VyY2UnLCAnc2luU2VsZWN0aW9uJywgJ3Rlcm0nLCAnZGF0YVNvdXJjZUxpc3QnXSkpLCB7fSwgewogICAgdHlwZXM6IGZ1bmN0aW9uIHR5cGVzKCkgewogICAgICByZXR1cm4gdGhpcy5tZW1iZXJUeXBlcy5sZW5ndGggPiAwID8gdGhpcy5tZW1iZXJUeXBlcyA6IG51bGw7CiAgICB9LAogICAgaW5jaWRlbnRzOiBmdW5jdGlvbiBpbmNpZGVudHMoKSB7CiAgICAgIHJldHVybiB0aGlzLmluY2lkZW50VHlwZXM7CiAgICB9LAogICAgc2luRGF0YTogZnVuY3Rpb24gc2luRGF0YSgpIHsKICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuY2xhaW1zKS5sZW5ndGggPiAwID8gdGhpcy5jbGFpbXMgOiBudWxsOwogICAgfSwKICAgIHNpbklkOiBmdW5jdGlvbiBzaW5JZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc2luU2VsZWN0aW9uW1RBQkxFRklFTERNQVBQSU5HLnNpbkxpc3RdID8gdGhpcy5zaW5TZWxlY3Rpb25bVEFCTEVGSUVMRE1BUFBJTkcuc2luTGlzdF1bMF0gOiB0aGlzLmNsYWltc1NlYXJjaFNpbklkID8gdGhpcy5jbGFpbXNTZWFyY2hTaW5JZCA6ICcnOwogICAgfSwKICAgIGNsYWltc1RvcGljOiBmdW5jdGlvbiBjbGFpbXNUb3BpYygpIHsKICAgICAgaWYgKHRoaXMuc2luSWQgJiYgdGhpcy5zZWFyY2hUeXBlID09PSBTRUFSQ0hUWVBFUy5zaW5nbGUgfHwgdGhpcy5zZWFyY2hUeXBlID09PSBTRUFSQ0hUWVBFUy5tdWx0aSkgewogICAgICAgIHRoaXMuc2V0Q2xhaW1zKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLnRlcm0gJiYgdGhpcy50ZXJtLmlucHV0ID8gdGhpcy50ZXJtLmlucHV0IDogJyc7CiAgICB9LAogICAgdG9nZ2xlSW5jaWRlbnRzOiBmdW5jdGlvbiB0b2dnbGVJbmNpZGVudHMoKSB7CiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnRvZ2dsZVRhYmxlcykubGVuZ3RoID4gMCA/IHRoaXMudG9nZ2xlVGFibGVzIDogbnVsbDsKICAgIH0KICB9KSwKICBtZXRob2RzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwTXV0YXRpb25zKFsndXBkYXRlSHlwb3RoZXNpc1NlbGVjdGlvbiddKSksIG1hcEFjdGlvbnMoWyd1cGRhdGVDdXJyZW50RGF0YVNvdXJjZSddKSksIHt9LCB7CiAgICBidWlsZFRhYmxlQ29uZmlndXJhdGlvbjogZnVuY3Rpb24gYnVpbGRUYWJsZUNvbmZpZ3VyYXRpb24odHlwZSkgewogICAgICByZXR1cm4gewogICAgICAgIHRhYmxlU2V0dGluZ3M6IG5ldyBUYWJsZVNldHRpbmdzKFRBQkxFRklFTERNQVBQSU5HLmlkLCB0cnVlLCB0eXBlLCAnJywgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAnc3RhdGVtZW50JywgZmFsc2UsIHRydWUpLAogICAgICAgIHByaW1hcnlIZWFkZXJzOiBbbmV3IEhlYWRlckNvbmZpZygnU3RhdGVtZW50JywgJ3N0YXJ0JywgdHJ1ZSwgVEFCTEVGSUVMRE1BUFBJTkcuc3RhdGVtZW50KSwgbmV3IEhlYWRlckNvbmZpZygnRXZlbnQgVHlwZScsICdzdGFydCcsIHRydWUsIFRBQkxFRklFTERNQVBQSU5HLmNsdXN0ZXJUeXBlKSwgbmV3IEhlYWRlckNvbmZpZygnRGF0ZScsICdzdGFydCcsIHRydWUsIFRBQkxFRklFTERNQVBQSU5HLmRhdGVzKSwgbmV3IEhlYWRlckNvbmZpZygnJywgJ2NlbnRlcicsIGZhbHNlLCAnZGF0YS10YWJsZS1leHBhbmQnKV0sCiAgICAgICAgc2Vjb25kYXJ5SGVhZGVyczogewogICAgICAgICAgZXhwYW5kZWQ6IG5ldyBTZWNvbmRhcnlFeHBhbmQoJycsIFRBQkxFRklFTERNQVBQSU5HLmRvY3VtZW50TGlzdCwgW25ldyBIZWFkZXJDb25maWcoJ0VudGl0eScsICdzdGFydCcsIGZhbHNlLCBUQUJMRUZJRUxETUFQUElORy5oZWFkbGluZSksIG5ldyBIZWFkZXJDb25maWcoJ1N1cHBvcnRpbmcgRG9jdW1lbnQnLCAnc3RhcnQnLCBmYWxzZSwgVEFCTEVGSUVMRE1BUFBJTkcuZG9jSWQpLCBuZXcgSGVhZGVyQ29uZmlnKCdEb2N1bWVudCBUaXRsZScsICdzdGFydCcsIGZhbHNlLCBUQUJMRUZJRUxETUFQUElORy5kb2NUaXRsZSldKQogICAgICAgIH0KICAgICAgfTsKICAgIH0sCiAgICB0b2dnbGVJbmNpZGVudFNlY3Rpb246IGZ1bmN0aW9uIHRvZ2dsZUluY2lkZW50U2VjdGlvbihpbmRleCkgewogICAgICB2YXIgdG9nZ2xlSWQgPSB0aGlzLmdldFRvb2x0aXBJZChpbmRleCk7CgogICAgICBpZiAodGhpcy4kcmVmc1t0b2dnbGVJZF0ubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBlbCA9IHRoaXMuJHJlZnNbdG9nZ2xlSWRdWzBdOwoKICAgICAgICBpZiAodGhpcy50b2dnbGVUYWJsZXMuaGFzT3duUHJvcGVydHkodG9nZ2xlSWQpKSB7CiAgICAgICAgICBpZiAoZWwuaWNvbiA9PT0gJ21kaS1jaGV2cm9uLWRvd24nKSB7CiAgICAgICAgICAgIHRoaXMudG9nZ2xlVGFibGVzW3RvZ2dsZUlkXS5tZXNzYWdlID0gJ09wZW4gU2VjdGlvbic7CiAgICAgICAgICAgIHRoaXMudG9nZ2xlVGFibGVzW3RvZ2dsZUlkXS5pY29uID0gJ21kaS1jaGV2cm9uLXVwJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMudG9nZ2xlVGFibGVzW3RvZ2dsZUlkXS5tZXNzYWdlID0gJ0Nsb3NlIFNlY3Rpb24nOwogICAgICAgICAgICB0aGlzLnRvZ2dsZVRhYmxlc1t0b2dnbGVJZF0uaWNvbiA9ICdtZGktY2hldnJvbi1kb3duJzsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnRvZ2dsZVRhYmxlc1t0b2dnbGVJZF0uY2xvc2VkID0gIXRoaXMudG9nZ2xlVGFibGVzW3RvZ2dsZUlkXS5jbG9zZWQ7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgdXBkYXRlSXRlbXM6IGZ1bmN0aW9uIHVwZGF0ZUl0ZW1zKGN1cnJlbnRJdGVtcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHRvUG9wdWxhdGUgPSBjdXJyZW50SXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcuZG9jdW1lbnRMaXN0XS5sZW5ndGggPT09IDAgJiYgIWN1cnJlbnRSZXF1ZXN0cy5oYXMoaXRlbVtUQUJMRUZJRUxETUFQUElORy5wcm90b3R5cGVVcmldKTsKICAgICAgfSk7CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodG9Qb3B1bGF0ZSksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7CiAgICAgICAgICB2YXIgaXRlbSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgdmFyIHByb3RvdHlwZSA9IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcucHJvdG90eXBlVXJpXTsKCiAgICAgICAgICB2YXIgcm9sZXMgPSBfdG9Db25zdW1hYmxlQXJyYXkobmV3IFNldChpdGVtW1RBQkxFRklFTERNQVBQSU5HLmVudGl0eUxpc3RdLmZsYXRNYXAoZnVuY3Rpb24gKGVudGl0eSkgewogICAgICAgICAgICByZXR1cm4gZW50aXR5W1RBQkxFRklFTERNQVBQSU5HLnJvbGVVcmldOwogICAgICAgICAgfSkpKTsKCiAgICAgICAgICB2YXIgaHlwb3RoZXNpc1VyaSA9IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcuaHlwb3RoZXNpc0xpc3RdWzBdOwogICAgICAgICAgdmFyIGdyYXBoID0gIV90aGlzLmNsYWltU2VhcmNoU2luSWQgPyBfdGhpcy5jdXJyZW50RGF0YVNvdXJjZSA6ICcnOwogICAgICAgICAgdmFyIHByb21pc2UgPSBBUEkuZ2V0U2luRG9jdW1lbnRzKHByb3RvdHlwZSwgZ3JhcGgsIGh5cG90aGVzaXNVcmksIHJvbGVzKTsKICAgICAgICAgIGN1cnJlbnRSZXF1ZXN0cy5zZXQocHJvdG90eXBlLCBwcm9taXNlKTsKICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAoZG9jcykgewogICAgICAgICAgICB2YXIgZm9ybWF0dGVkRG9jcyA9IG5ldyBNYXAoKTsKCiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhkb2NzLmRhdGEpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRvY3MuZGF0YSksCiAgICAgICAgICAgICAgICAgIF9zdGVwMjsKCiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBfbG9vcDIgPSBmdW5jdGlvbiBfbG9vcDIoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICAgICAgICAgIHZhciBkb2NMaXN0ID0gb2JqZWN0W1RBQkxFRklFTERNQVBQSU5HLmRvY3VtZW50TGlzdF07CiAgICAgICAgICAgICAgICAgIHZhciBhcmd1bWVudFN0cmluZyA9ICcnOwoKICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdC5xdWVyeU9iamVjdC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKERBVEFUWVBFUy5lbnRpdHlUeXBlLmlkKSkgewogICAgICAgICAgICAgICAgICAgIHZhciBhcmd1bWVudCA9IGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcuZW50aXR5TGlzdF0uZmluZChmdW5jdGlvbiAoZW50aXR5KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50aXR5W1RBQkxFRklFTERNQVBQSU5HLnByb3RvdHlwZVVyaV0gPT09IG9iamVjdC5xdWVyeU9iamVjdDsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3VtZW50SWRlbnRpZmllciA9IGFyZ3VtZW50ICYmIF90aGlzLmdldEVudGl0eUlkZW50aWZpZXJzKFthcmd1bWVudF0pOwoKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudFN0cmluZyA9IGFyZ3VtZW50SWRlbnRpZmllciAmJiBPYmplY3QudmFsdWVzKGFyZ3VtZW50SWRlbnRpZmllcilbMF1bMF07CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRTdHJpbmcgPSBnZXRUZW1wbGF0ZVByZWRpY2F0ZShpdGVtW1RBQkxFRklFTERNQVBQSU5HLmNsdXN0ZXJUeXBlXSk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZG9jTGlzdCksCiAgICAgICAgICAgICAgICAgICAgICBfc3RlcDM7CgogICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9jID0gX3N0ZXAzLnZhbHVlOwoKICAgICAgICAgICAgICAgICAgICAgIGlmICghZm9ybWF0dGVkRG9jcy5oYXMoZG9jKSAmJiBhcmd1bWVudFN0cmluZykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Zvcm1hdHRlZERvY3Mkc2V0OwoKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkRG9jcy5zZXQoZG9jLCAoX2Zvcm1hdHRlZERvY3Mkc2V0ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfZm9ybWF0dGVkRG9jcyRzZXQsIFRBQkxFRklFTERNQVBQSU5HLmRvY0lkLCBkb2MuaWQpLCBfZGVmaW5lUHJvcGVydHkoX2Zvcm1hdHRlZERvY3Mkc2V0LCBUQUJMRUZJRUxETUFQUElORy5kb2NUaXRsZSwgZG9jLnRpdGxlKSwgX2RlZmluZVByb3BlcnR5KF9mb3JtYXR0ZWREb2NzJHNldCwgVEFCTEVGSUVMRE1BUFBJTkcuaGVhZGxpbmUsIFthcmd1bWVudFN0cmluZ10pLCBfZm9ybWF0dGVkRG9jcyRzZXQpKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRTdHJpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkRG9jcy5nZXQoZG9jKVtUQUJMRUZJRUxETUFQUElORy5oZWFkbGluZV0ucHVzaChhcmd1bWVudFN0cmluZyk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTsKICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgICBfbG9vcDIoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gLy9sb29wIHRocm91Z2ggdG8gdHVybiB0aGUgaXRlbXMgaW4gdGhlIHN1cHBvcnRlZCBkb2N1bWVudCBoZWFkbGluZSBhcnJheSBpbnRvIGEgc2luZ2xlIHN0cmluZwoKCiAgICAgICAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZm9ybWF0dGVkRG9jcy52YWx1ZXMoKSksCiAgICAgICAgICAgICAgICBfc3RlcDQ7CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICB2YXIgZmQgPSBfc3RlcDQudmFsdWU7CiAgICAgICAgICAgICAgICBmZFtUQUJMRUZJRUxETUFQUElORy5oZWFkbGluZV0gPSBfdGhpcy5nZXRRdW90ZWRTdHJpbmdzKGZkW1RBQkxFRklFTERNQVBQSU5HLmhlYWRsaW5lXSk7CiAgICAgICAgICAgICAgfSAvL2FkZHMgZG9jdW1lbnRzIHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBjbGFpbXMgZGF0YQoKICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5mKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGl0ZW1bVEFCTEVGSUVMRE1BUFBJTkcuZG9jdW1lbnRMaXN0XSA9IF90b0NvbnN1bWFibGVBcnJheShmb3JtYXR0ZWREb2NzLnZhbHVlcygpKTsKICAgICAgICAgICAgY3VycmVudFJlcXVlc3RzLmRlbGV0ZShwcm90b3R5cGUpOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIF9sb29wKCk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KICAgIH0sCiAgICBzZXRDbGFpbXM6IGZ1bmN0aW9uIHNldENsYWltcygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB0aGlzLiRlbWl0KCdjb21wbGV0ZWRTZWFyY2gnLCBmYWxzZSk7CgogICAgICBpZiAodGhpcy5zaW5JZCAmJiB0aGlzLnNpbklkICE9PSAndW5kZWZpbmVkJyB8fCB0aGlzLnNlYXJjaFR5cGUgPT09IFNFQVJDSFRZUEVTLm11bHRpKSB7CiAgICAgICAgdmFyIHR5cGVzID0gZ2V0VHlwZXNGcm9tUXVlcnkodGhpcy50ZXJtICYmIHRoaXMudGVybS5pbnB1dCB8fCAnJyk7CiAgICAgICAgdmFyIGZpbHRlcnMgPSBbXTsKCiAgICAgICAgaWYgKHR5cGVzKSB7CiAgICAgICAgICB0eXBlcy5wdXNoLmFwcGx5KHR5cGVzLCBfdG9Db25zdW1hYmxlQXJyYXkoc3BvbnNvclR5cGVzKSk7CgogICAgICAgICAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0eXBlcyksCiAgICAgICAgICAgICAgX3N0ZXA1OwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIHR5cGUgPSBfc3RlcDUudmFsdWU7CiAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKF9kZWZpbmVQcm9wZXJ0eSh7fSwgJ2V2ZW50VHlwZScsIHR5cGUpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjUuZShlcnIpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgX2l0ZXJhdG9yNS5mKCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgc2luRGF0YVNvdXJjZSA9IHRoaXMucmVwbGFjZURhdGFTb3VyY2VTaW5JZCgpOwoKICAgICAgICBpZiAodGhpcy5kYXRhU291cmNlTGlzdC5pbmNsdWRlcyhzaW5EYXRhU291cmNlKSkgewogICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50RGF0YVNvdXJjZShzaW5EYXRhU291cmNlKTsKICAgICAgICB9CgogICAgICAgIHZhciBkYXRhU291cmNlID0gdGhpcy5jdXJyZW50RGF0YVNvdXJjZSA/IHRoaXMuY3VycmVudERhdGFTb3VyY2UgOiB0aGlzLmRlZmF1bHRIeXBvdGhlc2lzRGF0YVNvdXJjZTsKCiAgICAgICAgdmFyIHF1ZXJ5RmlsdGVycyA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgJ2dyYXBoJywgZGF0YVNvdXJjZSk7CgogICAgICAgIGlmIChmaWx0ZXJzLmxlbmd0aCA+IDApIHsKICAgICAgICAgIHF1ZXJ5RmlsdGVyc1snZmlsdGVycyddID0gZmlsdGVyczsKICAgICAgICB9CgogICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgICAgdGhpcy5zdGF0dXNNZXNzYWdlID0gTE9BRElOR01FU1NBR0U7CgogICAgICAgIGlmICghdGhpcy5jbGFpbVNlYXJjaFNpbklkICYmIHRoaXMuc2VhcmNoVHlwZSA9PT0gU0VBUkNIVFlQRVMuc2luZ2xlKSB7CiAgICAgICAgICBBUEkuZ2V0U2luUXVlcnlSZXN1bHRzKHRoaXMuc2luSWQsIHF1ZXJ5RmlsdGVycykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgdmFyIHNpbkRhdGEgPSByZXNwb25zZS5kYXRhOwoKICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHNpbkRhdGEpLmxlbmd0aCA+IDAgJiYgc2luRGF0YS5oeXBvdGhlc2VzKSB7CiAgICAgICAgICAgICAgX3RoaXMyLlNJTiA9IHNpbkRhdGE7CgogICAgICAgICAgICAgIF90aGlzMi5nZXRGb3JtYXR0ZWREYXRhKHNpbkRhdGEpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF90aGlzMi5zdGF0dXNNZXNzYWdlID0gX3RoaXMyLk5PREFUQU1FU1NBR0U7CiAgICAgICAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgX3RoaXMyLiRlbWl0KCdjb21wbGV0ZWRTZWFyY2gnLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmNsYWltU2VhcmNoU2luSWQgJiYgdGhpcy5zZWFyY2hUeXBlID09PSBTRUFSQ0hUWVBFUy5tdWx0aSkgewogICAgICAgICAgLy91cGRhdGVzIHRoZSBjbGFpbXMgZGF0YSBhbmQgbWVtYmVyIHR5cGVzCiAgICAgICAgICB2YXIgZm9ybWF0dGVkRGF0YSA9IHt9OwogICAgICAgICAgdmFyIHRvZ2dsZURhdGEgPSB7fTsKICAgICAgICAgIHRoaXMuY2xhaW1zID0ge307CiAgICAgICAgICB0aGlzLmluY2lkZW50VHlwZXMgPSB7fTsKICAgICAgICAgIHZhciBjbGFpbUZpbHRlcnMgPSB0aGlzLmNsYWltU2VhcmNoRmlsdGVycy5sZW5ndGggPiAwID8gX2RlZmluZVByb3BlcnR5KHt9LCAnZmlsdGVycycsIHRoaXMuY2xhaW1TZWFyY2hGaWx0ZXJzKSA6IHt9OwogICAgICAgICAgQVBJLmdldEFsbFNpblF1ZXJ5UmVzdWx0cyhjbGFpbUZpbHRlcnMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIHZhciBzaW5FdmVudHMgPSByZXNwb25zZS5kYXRhOwoKICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHNpbkV2ZW50cykubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIC8vTWFwIGV2ZW50cyBiYXNlZCBvbiBzaW4gYW5kIHRoZW4gZXZlbnQgdHlwZQogICAgICAgICAgICAgIHZhciBfaXRlcmF0b3I2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoc2luRXZlbnRzKSwKICAgICAgICAgICAgICAgICAgX3N0ZXA2OwoKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gX3N0ZXA2LnZhbHVlOwogICAgICAgICAgICAgICAgICB2YXIgc2luVGl0bGUgPSBnZXRJbmNpZGVudE5hbWUoZXZlbnRbVEFCTEVGSUVMRE1BUFBJTkcuc2luSWRdKTsKICAgICAgICAgICAgICAgICAgdmFyIF9ldmVudFR5cGUgPSBldmVudFtUQUJMRUZJRUxETUFQUElORy5jbHVzdGVyVHlwZV07CgogICAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGZvcm1hdHRlZERhdGEpLmluY2x1ZGVzKHNpblRpdGxlKSkgewogICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGFbc2luVGl0bGVdID0ge307CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoZm9ybWF0dGVkRGF0YVtzaW5UaXRsZV0pLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGFbc2luVGl0bGVdID0gX2RlZmluZVByb3BlcnR5KHt9LCBfZXZlbnRUeXBlLCB7fSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC5rZXlzKGZvcm1hdHRlZERhdGFbc2luVGl0bGVdKS5pbmNsdWRlcyhfZXZlbnRUeXBlKSkgewogICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGFbc2luVGl0bGVdW19ldmVudFR5cGVdID0ge307CiAgICAgICAgICAgICAgICAgIH0gLy9CZWZvcmUgYWRkaW5nIHRoZSBldmVudCwgZm9ybWF0IHJvbGVzCgoKICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjcgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihldmVudFtUQUJMRUZJRUxETUFQUElORy5lbnRpdHlMaXN0XSksCiAgICAgICAgICAgICAgICAgICAgICBfc3RlcDc7CgogICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNy5zKCk7ICEoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZW50aXR5ID0gX3N0ZXA3LnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgZW50aXR5W1RBQkxFRklFTERNQVBQSU5HLnJvbGVzXSA9IHNvcnRDYXNlSW5zZW5zaXRpdmUoX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoZW50aXR5W1RBQkxFRklFTERNQVBQSU5HLnJvbGVVcmldLmZsYXRNYXAoZ2V0Um9sZSkpKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LmUoZXJyKTsKICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LmYoKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgZXZlbnRbVEFCTEVGSUVMRE1BUFBJTkcuaHlwb3RoZXNpc0xpc3RdID0gW2V2ZW50Lmh5cG90aGVzaXNdOwogICAgICAgICAgICAgICAgICBldmVudFtUQUJMRUZJRUxETUFQUElORy5jYXRlZ29yeV0gPSBldmVudFtUQUJMRUZJRUxETUFQUElORy5jbHVzdGVyQ2F0ZWdvcnldOwogICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG51bGw7CgogICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0ZSkgewogICAgICAgICAgICAgICAgICAgIGRhdGUgPSBldmVudC5kYXRlLnRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgZXZlbnRbVEFCTEVGSUVMRE1BUFBJTkcuZGF0ZXNdID0gZXZlbnQuZGF0ZTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGV2ZW50W1RBQkxFRklFTERNQVBQSU5HLnN0YXRlbWVudF0gKyBldmVudFtUQUJMRUZJRUxETUFQUElORy5jbHVzdGVyVHlwZV0gKyBkYXRlOwogICAgICAgICAgICAgICAgICBldmVudFtUQUJMRUZJRUxETUFQUElORy5pZF0gPSBrZXk7IC8vZGVkdXBsaWNhdGUKCiAgICAgICAgICAgICAgICAgIGlmICghZm9ybWF0dGVkRGF0YVtzaW5UaXRsZV1bX2V2ZW50VHlwZV0uaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGFbc2luVGl0bGVdW19ldmVudFR5cGVdW2tleV0gPSBldmVudDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSAvL3JlbW92ZSBrZXlzIGZyb20gZXZlbnQgb2JqZWN0CgogICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yNi5lKGVycik7CiAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjYuZigpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZm9yICh2YXIgc2luIGluIGZvcm1hdHRlZERhdGEpIHsKICAgICAgICAgICAgICAgIGlmIChmb3JtYXR0ZWREYXRhLmhhc093blByb3BlcnR5KHNpbikpIHsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZXZlbnRUeXBlIGluIGZvcm1hdHRlZERhdGFbc2luXSkgewogICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXR0ZWREYXRhW3Npbl0uaGFzT3duUHJvcGVydHkoZXZlbnRUeXBlKSkgewogICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkRGF0YVtzaW5dW2V2ZW50VHlwZV0gPSBPYmplY3QudmFsdWVzKGZvcm1hdHRlZERhdGFbc2luXVtldmVudFR5cGVdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzMi5jbGFpbXMgPSBmb3JtYXR0ZWREYXRhOwoKICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9PYmplY3QkZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKF90aGlzMi5jbGFpbXMpOyBfaSA8IF9PYmplY3QkZW50cmllcy5sZW5ndGg7IF9pKyspIHsKICAgICAgICAgICAgICAgIHZhciBfT2JqZWN0JGVudHJpZXMkX2kgPSBfc2xpY2VkVG9BcnJheShfT2JqZWN0JGVudHJpZXNbX2ldLCAyKSwKICAgICAgICAgICAgICAgICAgICBpbmNpZGVudCA9IF9PYmplY3QkZW50cmllcyRfaVswXSwKICAgICAgICAgICAgICAgICAgICBfdHlwZXMgPSBfT2JqZWN0JGVudHJpZXMkX2lbMV07CgogICAgICAgICAgICAgICAgX3RoaXMyLmluY2lkZW50VHlwZXNbaW5jaWRlbnRdID0gT2JqZWN0LmtleXMoX3R5cGVzKS5zb3J0KCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE9iamVjdC5rZXlzKF90aGlzMi5pbmNpZGVudFR5cGVzKS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdG9nZ2xlRGF0YVtfdGhpczIuZ2V0VG9vbHRpcElkKGkpXSA9IHsKICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Nsb3NlIFNlY3Rpb24nLAogICAgICAgICAgICAgICAgICBpY29uOiAnbWRpLWNoZXZyb24tZG93bicsCiAgICAgICAgICAgICAgICAgIGNsb3NlZDogZmFsc2UKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpczIudG9nZ2xlVGFibGVzID0gdG9nZ2xlRGF0YTsKICAgICAgICAgICAgICBfdGhpczIubG9hZGluZyA9IGZhbHNlOwoKICAgICAgICAgICAgICBfdGhpczIuJGVtaXQoJ2NvbXBsZXRlZFNlYXJjaCcsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF90aGlzMi5zdGF0dXNNZXNzYWdlID0gX3RoaXMyLk5PREFUQU1FU1NBR0U7CiAgICAgICAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgX3RoaXMyLiRlbWl0KCdjb21wbGV0ZWRTZWFyY2gnLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIF9jbGFpbUZpbHRlcnMgPSB0aGlzLmNsYWltU2VhcmNoRmlsdGVycy5sZW5ndGggPiAwID8gX2RlZmluZVByb3BlcnR5KHt9LCAnZmlsdGVycycsIHRoaXMuY2xhaW1TZWFyY2hGaWx0ZXJzKSA6IHt9OwoKICAgICAgICAgIEFQSS5nZXRTaW5RdWVyeVJlc3VsdHModGhpcy5jbGFpbVNlYXJjaFNpbklkLCBfY2xhaW1GaWx0ZXJzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICB2YXIgc2luRGF0YSA9IHJlc3BvbnNlLmRhdGE7CgogICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoc2luRGF0YSkubGVuZ3RoID4gMCAmJiBzaW5EYXRhLmh5cG90aGVzZXMpIHsKICAgICAgICAgICAgICBfdGhpczIuU0lOID0gc2luRGF0YTsKCiAgICAgICAgICAgICAgX3RoaXMyLmdldEZvcm1hdHRlZERhdGEoc2luRGF0YSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgX3RoaXMyLnN0YXR1c01lc3NhZ2UgPSBfdGhpczIuTk9EQVRBTUVTU0FHRTsKICAgICAgICAgICAgICBfdGhpczIubG9hZGluZyA9IGZhbHNlOwoKICAgICAgICAgICAgICBfdGhpczIuJGVtaXQoJ2NvbXBsZXRlZFNlYXJjaCcsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnN0YXR1c01lc3NhZ2UgPSB0aGlzLk5PREFUQU1FU1NBR0U7CiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgdGhpcy4kZW1pdCgnY29tcGxldGVkU2VhcmNoJywgdHJ1ZSk7CiAgICAgIH0KICAgIH0sCiAgICBhZGRTcG9uc29yZWQ6IGZ1bmN0aW9uIGFkZFNwb25zb3JlZChzcG9uc29yZWQsIG1lbWJlcikgewogICAgICB2YXIgZXZlbnRzID0gbWVtYmVyLnJvbGVzLmZpbmQoZnVuY3Rpb24gKHJvbGUpIHsKICAgICAgICByZXR1cm4gcm9sZS5yb2xlLmluY2x1ZGVzKCdfQWN0b3JPckV2ZW50Jyk7CiAgICAgIH0pOwogICAgICB2YXIgc3BvbnNvclJvbGVzID0gbWVtYmVyLnJvbGVzLmZpbmQoZnVuY3Rpb24gKHJvbGUpIHsKICAgICAgICByZXR1cm4gcm9sZS5yb2xlLmluY2x1ZGVzKCdfU3BvbnNvcicpOwogICAgICB9KTsKCiAgICAgIGlmIChldmVudHMgJiYgc3BvbnNvclJvbGVzKSB7CiAgICAgICAgdmFyIHNwb25zb3JzID0gbmV3IFNldCgpOwoKICAgICAgICB2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHNwb25zb3JSb2xlcy5hcmd1bWVudHMpLAogICAgICAgICAgICBfc3RlcDg7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgc3BvbnNvciA9IF9zdGVwOC52YWx1ZTsKICAgICAgICAgICAgc3BvbnNvcltUQUJMRUZJRUxETUFQUElORy5oZWFkbGluZV0gPSBnZXRTaW5Bcmd1bWVudEhlYWRsaW5lKHNwb25zb3IpOwogICAgICAgICAgICB2YXIgbmFtZSA9IGdldEVudGl0eU5hbWUoc3BvbnNvcik7CgogICAgICAgICAgICBpZiAobmFtZSkgewogICAgICAgICAgICAgIHNwb25zb3JzLmFkZChuYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yOC5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjguZigpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHNwb25zb3JzLnNpemUpIHsKICAgICAgICAgIHZhciBfaXRlcmF0b3I5ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZXZlbnRzLmFyZ3VtZW50cyksCiAgICAgICAgICAgICAgX3N0ZXA5OwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yOS5zKCk7ICEoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIF9zcG9uc29yZWRFdmVudDsKCiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gX3N0ZXA5LnZhbHVlOwogICAgICAgICAgICAgIHZhciBzcG9uc29yZWRFdmVudCA9IHNwb25zb3JlZFtldmVudC5pZF07CgogICAgICAgICAgICAgIGlmICghc3BvbnNvcmVkRXZlbnQpIHsKICAgICAgICAgICAgICAgIHNwb25zb3JlZEV2ZW50ID0gc3BvbnNvcmVkW2V2ZW50LmlkXSA9IFtdOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgKF9zcG9uc29yZWRFdmVudCA9IHNwb25zb3JlZEV2ZW50KS5wdXNoLmFwcGx5KF9zcG9uc29yZWRFdmVudCwgX3RvQ29uc3VtYWJsZUFycmF5KHNwb25zb3JzKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBfaXRlcmF0b3I5LmUoZXJyKTsKICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjkuZigpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdldFRvb2x0aXBJZDogZnVuY3Rpb24gZ2V0VG9vbHRpcElkKGlkKSB7CiAgICAgIHJldHVybiAnaW5jaWRlbnRUb29sdGlwJyArIGlkOwogICAgfSwKICAgIGdldEZvcm1hdHRlZERhdGE6IGZ1bmN0aW9uIGdldEZvcm1hdHRlZERhdGEoc2luKSB7CiAgICAgIHZhciBtZW1iZXJzID0gbmV3IE1hcCgpOwoKICAgICAgdmFyIF9pdGVyYXRvcjEwID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoc2luLmh5cG90aGVzZXMgfHwgW10pLAogICAgICAgICAgX3N0ZXAxMDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IxMC5zKCk7ICEoX3N0ZXAxMCA9IF9pdGVyYXRvcjEwLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBoeXBPYmplY3QgPSBfc3RlcDEwLnZhbHVlOwogICAgICAgICAgdmFyIHNwb25zb3JlZCA9IHt9OwoKICAgICAgICAgIHZhciBfaXRlcmF0b3IxMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGh5cE9iamVjdC5tZW1iZXJzKSwKICAgICAgICAgICAgICBfc3RlcDEyOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMTIucygpOyAhKF9zdGVwMTIgPSBfaXRlcmF0b3IxMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIG1lbWJlciA9IF9zdGVwMTIudmFsdWU7CiAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5ID0gZ2V0VHlwZShtZW1iZXJbVEFCTEVGSUVMRE1BUFBJTkcuY2F0ZWdvcnldKS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgIHZhciB0eXBlID0gZ2V0VHlwZShtZW1iZXIudHlwZSk7CgogICAgICAgICAgICAgIGlmIChjYXRlZ29yeSA9PT0gREFUQVRZUEVTLnJlbGF0aW9uVHlwZS5pZCAmJiBtZW1iZXIucm9sZXMubGVuZ3RoID09PSAyICYmIHR5cGUuaW5jbHVkZXMoJ1Nwb25zb3JzaGlwJykpIHsKICAgICAgICAgICAgICAgIHRoaXMuYWRkU3BvbnNvcmVkKHNwb25zb3JlZCwgbWVtYmVyKTsKICAgICAgICAgICAgICB9IC8vaWYgdGhlcmUgYXJlIG5vIGFyZ3VtZW50cyB0aGVuIHRoZXJlIGlzIG5vIG5lZWQgdG8gc2hvdyB0aGUgbWVtYmVyCgoKICAgICAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT09IERBVEFUWVBFUy5ldmVudFR5cGUuaWQgJiYgbWVtYmVyLnJvbGVzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRNZW1iZXIgPSB7CiAgICAgICAgICAgICAgICAgIG5vZGU6IG1lbWJlci5ub2RlLAogICAgICAgICAgICAgICAgICBwcm90b3R5cGU6IG1lbWJlci5wcm90b3R5cGUsCiAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSwKICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZSwKICAgICAgICAgICAgICAgICAgcm9sZXM6IF90b0NvbnN1bWFibGVBcnJheShuZXcgTWFwKG1lbWJlci5yb2xlcy5tYXAoZnVuY3Rpb24gKHJvbGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3JvbGUsIHJvbGVdOwogICAgICAgICAgICAgICAgICB9KSkudmFsdWVzKCkpLnNvcnQoKSwKICAgICAgICAgICAgICAgICAgaHlwb3RoZXNlczogW2h5cE9iamVjdC5oeXBvdGhlc2lzXSwKICAgICAgICAgICAgICAgICAgZGF0ZXM6IG1lbWJlci5kYXRlcwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGZvcm1hdHRlZE1lbWJlciA9IGZvcm1hdFNpbnNDbGFpbXMoZm9ybWF0dGVkTWVtYmVyLCBEQVRBVFlQRVMuZXZlbnRUeXBlLmlkLCB0eXBlKTsKICAgICAgICAgICAgICAgIHZhciBpZGVudGlmaWVycyA9IGdldEVudGl0eUlkZW50aWZpZXJzKGZvcm1hdHRlZE1lbWJlcltUQUJMRUZJRUxETUFQUElORy5lbnRpdHlMaXN0XSk7CiAgICAgICAgICAgICAgICB2YXIgc3BvbnNvciA9IHNwb25zb3JlZFttZW1iZXIubm9kZV07CiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRNZW1iZXJbVEFCTEVGSUVMRE1BUFBJTkcuc3RhdGVtZW50XSA9IGdldFRlbXBsYXRlKHR5cGUsIGlkZW50aWZpZXJzKSArIChzcG9uc29yID8gJyAoc3BvbnNvcjogJyArIHNwb25zb3IgKyAnKScgOiAnJyk7CiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkVHlwZSA9IGdldFRyYW5zZm9ybWVkVHlwZShnZXRMYXN0U3ViVHlwZSh0eXBlKSwgQ2F0ZWdvcnlUeXBlcy5ldmVudFR5cGVNYXBwaW5nKTsKCiAgICAgICAgICAgICAgICBpZiAoIW1lbWJlcnMuaGFzKGZvcm1hdHRlZFR5cGUpKSB7CiAgICAgICAgICAgICAgICAgIG1lbWJlcnMuc2V0KGZvcm1hdHRlZFR5cGUsIFtdKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBtZW1iZXJzLmdldChmb3JtYXR0ZWRUeXBlKS5wdXNoKGZvcm1hdHRlZE1lbWJlcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yMTIuZShlcnIpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgX2l0ZXJhdG9yMTIuZigpOwogICAgICAgICAgfQogICAgICAgIH0gLy8gY3JlYXRlIG9iamVjdCBvZiB0eXBlLT5bbWVtYmVyc10KCiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjEwLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IxMC5mKCk7CiAgICAgIH0KCiAgICAgIHZhciBtZW1iZXJzUmVkdWNlID0ge307CiAgICAgIG1lbWJlcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWVzLCBrZXkpIHsKICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdmFsdWVzIGFuZCBhZGQgdGhlbSB0byBtZW1iZXJzUmVkdWNlW2tleV0KICAgICAgICB2YXIgZGVkdXBlZCA9IG5ldyBNYXAoKTsKCiAgICAgICAgdmFyIGFkZE1lbWJlciA9IGZ1bmN0aW9uIGFkZE1lbWJlcihtZW1iZXIpIHsKICAgICAgICAgIHZhciBkYXRlID0gbWVtYmVyLmRhdGUgPyBtZW1iZXIuZGF0ZS50b1N0cmluZygpIDogbnVsbDsKICAgICAgICAgIHZhciBrZXkgPSBtZW1iZXIuc3RhdGVtZW50ICsgbWVtYmVyLnR5cGU7CgogICAgICAgICAgaWYgKCFkZWR1cGVkLmhhcyhrZXkpKSB7CiAgICAgICAgICAgIGRlZHVwZWQuc2V0KGtleSwgbmV3IE1hcCgpKTsKICAgICAgICAgIH0gZWxzZSBpZiAoIWRhdGUpIHsKICAgICAgICAgICAgLy8gZHJvcCBkdXBsaWNhdGVzIHdpdGhvdXQgZGF0ZQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgbWVtYmVyLmlkID0ga2V5ICsgZGF0ZTsgLy8gb25seSBrZWVwIHRyYWNrIG9mIG9uZSBtZW1iZXIgcGVyIGRhdGUKCiAgICAgICAgICBkZWR1cGVkLmdldChrZXkpLnNldChkYXRlLCBtZW1iZXIpOwogICAgICAgIH07CgogICAgICAgIHZhciBub0RhdGVzID0gW107CgogICAgICAgIHZhciBfaXRlcmF0b3IxMSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHZhbHVlcyksCiAgICAgICAgICAgIF9zdGVwMTE7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjExLnMoKTsgIShfc3RlcDExID0gX2l0ZXJhdG9yMTEubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgbWVtYmVyID0gX3N0ZXAxMS52YWx1ZTsKCiAgICAgICAgICAgIGlmICghbWVtYmVyLmRhdGUpIHsKICAgICAgICAgICAgICBub0RhdGVzLnB1c2gobWVtYmVyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBhZGRNZW1iZXIobWVtYmVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yMTEuZShlcnIpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfaXRlcmF0b3IxMS5mKCk7CiAgICAgICAgfQoKICAgICAgICBub0RhdGVzLmZvckVhY2goYWRkTWVtYmVyKTsKICAgICAgICBtZW1iZXJzUmVkdWNlW2tleV0gPSBbXTsKICAgICAgICBkZWR1cGVkLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICB2YXIgX21lbWJlcnNSZWR1Y2Uka2V5OwoKICAgICAgICAgIHJldHVybiAoX21lbWJlcnNSZWR1Y2Uka2V5ID0gbWVtYmVyc1JlZHVjZVtrZXldKS5wdXNoLmFwcGx5KF9tZW1iZXJzUmVkdWNlJGtleSwgX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlLnZhbHVlcygpKSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgdGhpcy4kZW1pdCgnY29tcGxldGVkU2VhcmNoJywgdHJ1ZSk7IC8vdXBkYXRlcyB0aGUgY2xhaW1zIGRhdGEgYW5kIG1lbWJlciB0eXBlcwoKICAgICAgdGhpcy5jbGFpbXMgPSBtZW1iZXJzUmVkdWNlOwogICAgICB0aGlzLm1lbWJlclR5cGVzID0gT2JqZWN0LmtleXMobWVtYmVyc1JlZHVjZSkuc29ydCgpOwogICAgfSwKICAgIHJlcGxhY2VEYXRhU291cmNlU2luSWQ6IGZ1bmN0aW9uIHJlcGxhY2VEYXRhU291cmNlU2luSWQoKSB7CiAgICAgIHZhciB0cnVuY2F0ZVNvdXJjZSA9IHRoaXMuY3VycmVudERhdGFTb3VyY2Uuc3BsaXQoJy8nKTsgLy9lLmcuIFtodHRwczosICwgd3d3Lm5leHRjZW50dXJ5LmNvbSwgVEEzLCBFMjAxLCBHQUlBLTIwMjEwMjAzLCBHQUlBLTIwMjEwMTE5LCBHQUlBLTIwMjEwMTE5XQoKICAgICAgdHJ1bmNhdGVTb3VyY2Uuc3BsaWNlKDQsIDEsIHRoaXMuc2luSWQpOwogICAgICByZXR1cm4gdHJ1bmNhdGVTb3VyY2Uuam9pbignLycpOwogICAgfSwKICAgIGdldFF1b3RlZFN0cmluZ3M6IGZ1bmN0aW9uIGdldFF1b3RlZFN0cmluZ3ModmFsdWVzKSB7CiAgICAgIHJldHVybiAnIicgKyBfdG9Db25zdW1hYmxlQXJyYXkobmV3IFNldCh2YWx1ZXMpKS5qb2luKCciLCAiJykgKyAnIic7CiAgICB9CiAgfSkKfTs="},{"version":3,"sources":["Claims.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n-->\n\n<template>\n    <div class=\"page-content\">\n        <div class=\"kb-details\">\n            <div class=\"kb-description-wrapper\">\n                <div v-if=\"searchType !== SEARCHTYPES.multi\" class=\"kb-heading\">Claims</div>\n                <div v-if=\"claimsTopic\"><span class=\"kb-labels\">Topic: </span><span>{{claimsTopic}}</span></div>\n            </div>\n        </div>\n        <div v-if=\"loading===true\" class=\"loading-section\">\n            <v-progress-linear indeterminate></v-progress-linear>\n            <div class=\"loading-message-clear\">{{statusMessage}}</div>\n        </div>\n        <div v-else>\n            <div v-if=\"statusMessage === NODATAMESSAGE\"  class=\"loading-message-clear\">{{statusMessage}}</div>\n            <div v-else-if=\"incidents && Object.keys(incidents).length > 0\">\n                <div v-for=\"(incident, incidentIndex) in Object.keys(incidents)\" :key=\"incidentIndex\" class=\"incident-space\">\n                    <div class=\"element-list-header\">\n                        <div class=\"page-header-left incident-title\">{{incident}}</div>\n                        <div class=\"page-header-right\">\n                            <div class=\"button-icon\" @click=\"toggleIncidentSection(incidentIndex)\">\n                                <InfoTooltip :ref=\"getTooltipId(incidentIndex)\" :message=\"toggleIncidents[getTooltipId(incidentIndex)].message\" :icon=\"toggleIncidents[getTooltipId(incidentIndex)].icon\" :iconStyle=\"'teal-large'\"></InfoTooltip>\n                            </div>\n                        </div>\n                    </div>\n                    <div v-for=\"(type, typeIndex) in incidents[incident]\" :key=\"typeIndex\" :class=\"typeIndex > 0 && !toggleIncidents[getTooltipId(incidentIndex)].closed ? 'section-space' : ''\">\n                        <DataTable\n                                :data=\"sinData[incident][type]\"\n                                :sort=\"sort\"\n                                :loading=\"Object.keys(sinData[incident][type]).length === 0\"\n                                :paging=\"paging\"\n                                :tableConfiguration=\"buildTableConfiguration(type)\"\n                                :statusMessage=\"statusMessage\"\n                                :hideData=\"toggleIncidents[getTooltipId(incidentIndex)].closed\"\n                                :hideFooter=true\n                                @currentItems=\"updateItems($event)\"\n                        ></DataTable>\n                    </div>\n                </div>\n            </div>\n            <div v-else>\n                <div v-for=\"(type, index) in types\" :key=\"index\" :class=\"index > 0 ? 'section-space' : ''\">\n                    <DataTable\n                            :data=\"sinData[type]\"\n                            :sort=\"sort\"\n                            :loading=\"Object.keys(sinData[type]).length === 0\"\n                            :paging=\"paging\"\n                            :tableConfiguration=\"buildTableConfiguration(type)\"\n                            :statusMessage=\"statusMessage\"\n                            :hideFooter=true\n                            @currentItems=\"updateItems($event)\"\n                    ></DataTable>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import DataTable from '@/components/DataTable';\n    import { mapMutations, mapState, mapActions} from 'vuex';\n    import API from '../../api';\n    import CategoryTypes from '@/assets/data/types.json';\n    import InfoTooltip from '@/components/InfoTooltip';\n    import {\n        TABLESELECTIONS,\n        TABLEFIELDMAPPING,\n        DATATYPES,\n        LOADINGMESSAGE,\n        NODATAMESSAGE,\n        SEARCHTYPES,\n        getSinArgumentHeadline,\n        SecondaryExpand,\n        formatSinsClaims,\n        sortCaseInsensitive,\n        getType,\n        getRole,\n        getEntityName,\n        getIncidentName,\n        getEntityIdentifiers,\n        getTemplate,\n        getTemplatePredicate,\n        getTypesFromQuery,\n        getTransformedType,\n        getLastSubType,\n        sponsorTypes,\n        TableSettings,\n        HeaderConfig\n    } from '../../utils';\n\n    const currentRequests = new Map();\n    export default {\n        name: 'Claims',\n        props: {\n            searchType: {\n                type: String,\n                default: SEARCHTYPES.single,\n                required: false\n            },\n            claimSearchSinId: {\n                type: String,\n                default: null,\n                required: false\n            },\n            claimSearchFilters: {\n                type: Array,\n                default: null,\n                required: false\n            },\n        },\n        components: {DataTable, InfoTooltip},\n        data: () => ({\n            sort: {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.statement, [TABLESELECTIONS.sortDesc]: false},\n            paging: {[TABLESELECTIONS.itemsPerPage]:'All'},\n            statusMessage: '',\n            claims: {},\n            memberTypes: [],\n            incidentTypes: {},\n            SIN: {},\n            loading: false,\n            toggleTables: {}\n        }),\n        created() {\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.DATATYPES = DATATYPES;\n            this.loading  = true;\n            this.statusMessage = LOADINGMESSAGE;\n            this.NODATAMESSAGE = NODATAMESSAGE;\n            this.SEARCHTYPES = SEARCHTYPES;\n        },\n        mounted() {\n            this.updateHypothesisSelection({});\n        },\n        computed: {\n            ...mapState(['defaultHypothesisDataSource', 'hypothesisSelection','currentDataSource', 'sinSelection', 'term', 'dataSourceList']),\n            types() {\n                return this.memberTypes.length > 0 ? this.memberTypes : null;\n            },\n            incidents() {\n                return this.incidentTypes;\n            },\n            sinData() {\n                return Object.keys(this.claims).length > 0 ? this.claims : null;\n            },\n            sinId() {\n                return this.sinSelection[TABLEFIELDMAPPING.sinList] ? this.sinSelection[TABLEFIELDMAPPING.sinList][0] : this.claimsSearchSinId ? this.claimsSearchSinId : '';\n            },\n            claimsTopic() {\n                if(this.sinId && this.searchType === SEARCHTYPES.single || this.searchType === SEARCHTYPES.multi) {\n                     this.setClaims();\n                 }\n                return this.term && this.term.input ? this.term.input : '';\n            },\n            toggleIncidents() {\n                return Object.keys(this.toggleTables).length > 0 ? this.toggleTables : null;\n            }\n        },\n        methods: {\n            ...mapMutations(['updateHypothesisSelection']),\n            ...mapActions(['updateCurrentDataSource']),\n            buildTableConfiguration(type) {\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.id, true, type, '', false, false, false, false, false, 'statement', false, true),\n                    primaryHeaders: [\n                        new HeaderConfig('Statement', 'start', true, TABLEFIELDMAPPING.statement),\n                        new HeaderConfig('Event Type', 'start', true, TABLEFIELDMAPPING.clusterType),\n                        new HeaderConfig('Date', 'start', true, TABLEFIELDMAPPING.dates),\n                        new HeaderConfig('', 'center', false, 'data-table-expand')\n                    ],\n                    secondaryHeaders: {\n                        expanded: new SecondaryExpand('', TABLEFIELDMAPPING.documentList,\n                            [\n                                new HeaderConfig('Entity', 'start', false, TABLEFIELDMAPPING.headline),\n                                new HeaderConfig('Supporting Document', 'start', false, TABLEFIELDMAPPING.docId),\n                                new HeaderConfig('Document Title', 'start', false, TABLEFIELDMAPPING.docTitle)\n                            ]\n                        )\n                    }\n                };\n            },\n            toggleIncidentSection(index) {\n                const toggleId = this.getTooltipId(index);\n                if(this.$refs[toggleId].length > 0) {\n                    const el = this.$refs[toggleId][0];\n                    if(this.toggleTables.hasOwnProperty(toggleId)) {\n                        if(el.icon === 'mdi-chevron-down') {\n                            this.toggleTables[toggleId].message = 'Open Section';\n                            this.toggleTables[toggleId].icon = 'mdi-chevron-up';\n                        }\n                        else {\n                            this.toggleTables[toggleId].message = 'Close Section';\n                            this.toggleTables[toggleId].icon = 'mdi-chevron-down';\n                        }\n                        this.toggleTables[toggleId].closed = !this.toggleTables[toggleId].closed;\n                    }\n                }\n            },\n            updateItems(currentItems) {\n                const toPopulate = currentItems.filter(item => item[TABLEFIELDMAPPING.documentList].length === 0 &&\n                    !currentRequests.has(item[TABLEFIELDMAPPING.prototypeUri]));\n\n                for (const item of toPopulate) {\n                    const prototype = item[TABLEFIELDMAPPING.prototypeUri];\n                    const roles = [...new Set(item[TABLEFIELDMAPPING.entityList].flatMap(entity => entity[TABLEFIELDMAPPING.roleUri]))];\n                    const hypothesisUri = item[TABLEFIELDMAPPING.hypothesisList][0];\n                    const graph = !this.claimSearchSinId ? this.currentDataSource : '';\n                    const promise = API.getSinDocuments(prototype, graph, hypothesisUri, roles);\n\n\n                    currentRequests.set(prototype, promise);\n                    promise.then(docs => {\n                        const formattedDocs = new Map();\n                        if(Object.keys(docs.data).length > 0) {\n                            for (const object of docs.data) {\n                                const docList = object[TABLEFIELDMAPPING.documentList];\n                                let argumentString = '';\n                                if(object.queryObject.toLowerCase().includes(DATATYPES.entityType.id)) {\n                                    const argument = item[TABLEFIELDMAPPING.entityList].find(entity => entity[TABLEFIELDMAPPING.prototypeUri] === object.queryObject);\n                                    const argumentIdentifier = argument && this.getEntityIdentifiers([argument]);\n                                    argumentString = argumentIdentifier && Object.values(argumentIdentifier)[0][0];\n                                }\n                                else {\n                                    argumentString = getTemplatePredicate(item[TABLEFIELDMAPPING.clusterType]);\n                                }\n\n                                for(const doc of docList) {\n                                    if(!formattedDocs.has(doc) && argumentString) {\n                                        formattedDocs.set(doc, {[TABLEFIELDMAPPING.docId]: doc.id, [TABLEFIELDMAPPING.docTitle]: doc.title, [TABLEFIELDMAPPING.headline]: [argumentString]});\n                                    }\n                                    else if(argumentString) {\n                                        formattedDocs.get(doc)[TABLEFIELDMAPPING.headline].push(argumentString);\n                                    }\n                                }\n                            }\n                        }\n\n                        //loop through to turn the items in the supported document headline array into a single string\n                        for(const fd of formattedDocs.values()) {\n                            fd[TABLEFIELDMAPPING.headline] = this.getQuotedStrings(fd[TABLEFIELDMAPPING.headline]);\n                        }\n\n                        //adds documents to the current position in the claims data\n                        item[TABLEFIELDMAPPING.documentList] = [...formattedDocs.values()];\n                        currentRequests.delete(prototype);\n                    });\n                }\n            },\n            setClaims() {\n                this.$emit('completedSearch', false);\n                if(this.sinId && this.sinId !== 'undefined' || this.searchType === SEARCHTYPES.multi) {\n                    const types = getTypesFromQuery(this.term && this.term.input || '');\n                    let filters = [];\n                    if (types) {\n                        types.push(...sponsorTypes);\n                        for (const type of types) {\n                            filters.push({['eventType'] : type});\n                        }\n                    }\n\n                    const sinDataSource = this.replaceDataSourceSinId();\n                    if(this.dataSourceList.includes(sinDataSource)) {\n                        this.updateCurrentDataSource(sinDataSource);\n                    }\n\n                    const dataSource = this.currentDataSource ? this.currentDataSource : this.defaultHypothesisDataSource;\n                    let queryFilters = {['graph'] : dataSource};\n                    if(filters.length > 0) {\n                        queryFilters['filters'] = filters;\n                    }\n                    this.loading = true;\n                    this.statusMessage = LOADINGMESSAGE;\n                    if(!this.claimSearchSinId && this.searchType === SEARCHTYPES.single) {\n                        API.getSinQueryResults(this.sinId, queryFilters).then(response => {\n                            const sinData = response.data;\n                            if (Object.keys(sinData).length > 0 && sinData.hypotheses) {\n                                this.SIN = sinData;\n                                this.getFormattedData(sinData);\n                            }\n                            else {\n                                this.statusMessage = this.NODATAMESSAGE;\n                                this.loading = false;\n                                this.$emit('completedSearch', true);\n                            }\n                        }).catch((error) => {\n                            console.warn(error)\n                        });\n                    }\n                    else if(!this.claimSearchSinId && this.searchType === SEARCHTYPES.multi) {\n                        //updates the claims data and member types\n                        let formattedData = {};\n                        let toggleData = {};\n                        this.claims = {};\n                        this.incidentTypes = {};\n\n                        const claimFilters = this.claimSearchFilters.length > 0 ? {['filters']:this.claimSearchFilters} : {};\n                        API.getAllSinQueryResults(claimFilters).then(response => {\n                            const sinEvents = response.data;\n                            if (Object.keys(sinEvents).length > 0) {\n                                //Map events based on sin and then event type\n                                for (const event of sinEvents) {\n                                    const sinTitle = getIncidentName(event[TABLEFIELDMAPPING.sinId]);\n                                    const eventType = event[TABLEFIELDMAPPING.clusterType];\n                                    if (!Object.keys(formattedData).includes(sinTitle)) {\n                                        formattedData[sinTitle] = {};\n                                    }\n\n                                    if (!Object.keys(formattedData[sinTitle]).length) {\n                                        formattedData[sinTitle] = {[eventType] : {}};\n                                    }\n                                    else if(!Object.keys(formattedData[sinTitle]).includes(eventType)) {\n                                        formattedData[sinTitle][eventType] = {};\n                                    }\n\n                                    //Before adding the event, format roles\n                                    for (const entity of event[TABLEFIELDMAPPING.entityList]) {\n                                        entity[TABLEFIELDMAPPING.roles] = sortCaseInsensitive([...new Set(entity[TABLEFIELDMAPPING.roleUri].flatMap(getRole))])\n                                    }\n                                    event[TABLEFIELDMAPPING.hypothesisList] = [event.hypothesis];\n                                    event[TABLEFIELDMAPPING.category] = event[TABLEFIELDMAPPING.clusterCategory];\n\n                                    let date = null;\n                                    if(event.date) {\n                                        date = event.date.toString();\n                                        event[TABLEFIELDMAPPING.dates] = event.date;\n                                    }\n\n                                    const key = event[TABLEFIELDMAPPING.statement] + event[TABLEFIELDMAPPING.clusterType] +  date;\n                                    event[TABLEFIELDMAPPING.id] = key;\n\n                                    //deduplicate\n                                    if(!formattedData[sinTitle][eventType].hasOwnProperty(key)) {\n                                        formattedData[sinTitle][eventType][key] = event;\n                                    }\n                                }\n\n                                //remove keys from event object\n                                for(let sin in formattedData) {\n                                    if(formattedData.hasOwnProperty(sin)) {\n                                        for(let eventType in formattedData[sin]) {\n                                            if(formattedData[sin].hasOwnProperty(eventType)) {\n                                                formattedData[sin][eventType] = Object.values(formattedData[sin][eventType]);\n                                            }\n                                        }\n                                    }\n                                }\n\n                                this.claims = formattedData;\n\n                                for(const [incident, types] of Object.entries(this.claims)) {\n                                    this.incidentTypes[incident] = Object.keys(types).sort();\n                                }\n                                for(let i=0; i <Object.keys(this.incidentTypes).length; i++) {\n                                    toggleData[this.getTooltipId(i)] = {message : 'Close Section', icon : 'mdi-chevron-down', closed : false};\n                                }\n                                this.toggleTables = toggleData;\n\n                                this.loading = false;\n                                this.$emit('completedSearch', true);\n                            }\n                            else {\n                                this.statusMessage = this.NODATAMESSAGE;\n                                this.loading = false;\n                                this.$emit('completedSearch', true);\n                            }\n\n                        }).catch((error) => {\n                            console.warn(error)\n                        });\n                    }\n                    else {\n                        const claimFilters = this.claimSearchFilters.length > 0 ? {['filters']:this.claimSearchFilters} : {};\n                        API.getSinQueryResults(this.claimSearchSinId, claimFilters).then(response => {\n                            const sinData = response.data;\n                            if (Object.keys(sinData).length > 0 && sinData.hypotheses) {\n                                this.SIN = sinData;\n                                this.getFormattedData(sinData);\n                            } else {\n                                this.statusMessage = this.NODATAMESSAGE;\n                                this.loading = false;\n                                this.$emit('completedSearch', true);\n                            }\n                        }).catch((error) => {\n                            console.warn(error)\n                        });\n                    }\n                }\n                else {\n                    this.statusMessage = this.NODATAMESSAGE;\n                    this.loading = false;\n                    this.$emit('completedSearch', true);\n                }\n            },\n            addSponsored(sponsored, member) {\n                const events = member.roles.find(role => role.role.includes('_ActorOrEvent'));\n                let sponsorRoles = member.roles.find(role => role.role.includes('_Sponsor'));\n                if (events && sponsorRoles) {\n                    const sponsors = new Set();\n                    for (const sponsor of sponsorRoles.arguments)  {\n                        sponsor[TABLEFIELDMAPPING.headline] = getSinArgumentHeadline(sponsor);\n                        const name = getEntityName(sponsor);\n                        if (name) {\n                            sponsors.add(name);\n                        }\n                    }\n                    if (sponsors.size) {\n                        for (const event of events.arguments) {\n                            let sponsoredEvent = sponsored[event.id];\n                            if (!sponsoredEvent) {\n                                sponsoredEvent = sponsored[event.id] = [];\n                            }\n                            sponsoredEvent.push(...sponsors);\n                        }\n                    }\n                }\n            },\n            getTooltipId(id) {\n                return 'incidentTooltip' + id;\n            },\n            getFormattedData(sin) {\n                const members = new Map();\n                for (const hypObject of sin.hypotheses || []) {\n                    const sponsored = {};\n                    for (const member of hypObject.members) {\n                        const category = getType(member[TABLEFIELDMAPPING.category]).toLowerCase();\n                        const type = getType(member.type);\n                        if (category === DATATYPES.relationType.id && member.roles.length === 2 && type.includes('Sponsorship')) {\n                            this.addSponsored(sponsored, member);\n                        }\n\n                        //if there are no arguments then there is no need to show the member\n                        if (category === DATATYPES.eventType.id && member.roles.length > 0) {\n                            let formattedMember = {\n                                node: member.node,\n                                prototype: member.prototype,\n                                category: category,\n                                type: type,\n                                roles: [...new Map(member.roles.map(role => [role, role])).values()].sort(),\n                                hypotheses: [hypObject.hypothesis],\n                                dates: member.dates\n                            };\n\n                            formattedMember = formatSinsClaims(formattedMember, DATATYPES.eventType.id, type);\n                            const identifiers = getEntityIdentifiers(formattedMember[TABLEFIELDMAPPING.entityList]);\n                            const sponsor = sponsored[member.node];\n                            formattedMember[TABLEFIELDMAPPING.statement] = getTemplate(type, identifiers) + (sponsor ? ' (sponsor: ' + sponsor + ')' : '');\n\n                            const formattedType = getTransformedType(getLastSubType(type), CategoryTypes.eventTypeMapping);\n                            if (!members.has(formattedType)) {\n                                members.set(formattedType, []);\n                            }\n                            members.get(formattedType).push(formattedMember);\n                        }\n                    }\n                }\n\n                // create object of type->[members]\n                const membersReduce = {};\n                members.forEach((values, key) => {\n                    // iterate over values and add them to membersReduce[key]\n                    const deduped = new Map();\n                    const addMember = member => {\n                        const date = member.date ? member.date.toString() : null;\n                        const key = member.statement + member.type;\n                        if (!deduped.has(key)) {\n                            deduped.set(key, new Map());\n                        } else if (!date) {\n                            // drop duplicates without date\n                            return;\n                        }\n                        member.id = key + date;\n                        // only keep track of one member per date\n                        deduped.get(key).set(date, member);\n                    };\n                    const noDates = [];\n                    for (const member of values) {\n                        if (!member.date) {\n                            noDates.push(member);\n                        } else {\n                            addMember(member);\n                        }\n                    }\n                    noDates.forEach(addMember);\n                    membersReduce[key] = [];\n                    deduped.forEach(value => membersReduce[key].push(...value.values()));\n                });\n\n                this.loading = false;\n                this.$emit('completedSearch', true);\n\n                //updates the claims data and member types\n                this.claims = membersReduce;\n                this.memberTypes = Object.keys(membersReduce).sort();\n            },\n            replaceDataSourceSinId() {\n                let truncateSource = this.currentDataSource.split('/');\n                //e.g. [https:, , www.nextcentury.com, TA3, E201, GAIA-20210203, GAIA-20210119, GAIA-20210119]\n                truncateSource.splice(4, 1, this.sinId);\n                return truncateSource.join('/');\n            },\n            getQuotedStrings(values) {\n                return '\"' + [...new Set(values)].join('\", \"') + '\"';\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .loading-section {\n        margin: 48px 0;\n    }\n\n    .loading-message-clear {\n        @include flex-row-nowrap;\n        justify-content: center;\n        height: 60px;\n        padding: 16px;\n    }\n\n    .incident-space:not(:first-child) {\n        margin: 60px 0 32px;\n    }\n\n    .incident-title {\n        font-size: 18px;\n        @extend .bold-text;\n        width: 100%;\n        color: $theme-teal-text;\n        line-height: 32px;\n        font-style: italic;\n    }\n\n</style>\n"],"sourceRoot":"src/views/analyze"}]}