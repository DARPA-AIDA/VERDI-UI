{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/analyze/HypothesisDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/analyze/HypothesisDetails.vue","mtime":1640207172535},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["HypothesisDetails.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <div class=\"page-content\">\n        <HypothesisDialog\n                :category=\"selectedCategory\"\n                :showDialog=\"showDialog\"\n                :crumbs=\"crumbs\"\n                @crumbSelection=\"modifyDialog($event)\"\n                @closeDialog=\"showAddDialog = false\"\n                @addCluster=\"updateHypothesisDetails($event)\"\n        ></HypothesisDialog>\n        <div class=\"kb-details\">\n            <div class=\"kb-description-wrapper\">\n                <div class=\"kb-heading\">{{hypothesisSelection[TABLEFIELDMAPPING.headline]}}</div>\n                <div><span class=\"kb-labels\">Category: </span><span>{{getClusterCategory()}}</span></div>\n                <div class=\"row-wrapper-flex\">\n                    <div class=\"page-header-left\"><span class=\"kb-labels\">Hypothesis ID: </span><span>{{hypothesisSelection[TABLEFIELDMAPPING.idUri]}}</span></div>\n                    <div class=\"page-header-right\">\n                        <span class=\"icon-wrapper-div\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-graphql'\" :message=\"'View as graph'\"></InfoTooltip></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"section-space\">\n            <div class=\"icon-justify-right\">\n                <span class=\"icon-wrapper-div\" @click.prevent=\"openDialog(DATATYPES.eventType.id)\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-plus-thick'\" :message=\"'Add Event'\"></InfoTooltip></span>\n                <span class=\"icon-wrapper-div\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-pencil'\" :message=\"'Edit Mode'\"></InfoTooltip></span>\n            </div>\n            <DataTable\n                    :data=\"eventData\"\n                    :sort=\"defaultSort\"\n                    :loading=\"loading\"\n                    :paging=\"defaultPaging\"\n                    :tableConfiguration=\"getTableConfiguration(DATATYPES.eventType.id)\"\n                    :statusMessage=\"Object.keys(eventData).length > 0 ? statusMessage : NODATAMESSAGE\"\n                    @updateItem=\"updateAddedStatus($event)\"\n                    @currentItems=\"updateAddedStatus()\"\n            ></DataTable>\n        </div>\n        <div class=\"section-space\">\n            <DataTable\n                :data=\"entityData\"\n                :sort=\"entitySort\"\n                :loading=\"loading\"\n                :paging=\"defaultPaging\"\n                :tableConfiguration=\"getTableConfiguration(DATATYPES.entityType.id)\"\n                :statusMessage=\"Object.keys(entityData).length > 0 ? statusMessage : NODATAMESSAGE\"\n                @updateItem=\"updateAddedStatus($event)\"\n                @currentItems=\"updateAddedStatus()\"\n            ></DataTable>\n        </div>\n        <div class=\"section-space\">\n            <div class=\"icon-justify-right\">\n                <span class=\"icon-wrapper-div\" @click.prevent=\"openDialog(DATATYPES.relationType.id)\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-plus-thick'\" :message=\"'Add Relation'\"></InfoTooltip></span>\n                <span class=\"icon-wrapper-div\"><InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-pencil'\" :message=\"'Edit Mode'\"></InfoTooltip></span>\n            </div>\n            <DataTable\n                :data=\"relationData\"\n                :sort=\"defaultSort\"\n                :loading=\"loading\"\n                :paging=\"defaultPaging\"\n                :tableConfiguration=\"getTableConfiguration(DATATYPES.relationType.id)\"\n                :statusMessage=\"Object.keys(relationData).length > 0 ? statusMessage : NODATAMESSAGE\"\n                @updateItem=\"updateAddedStatus($event)\"\n                @currentItems=\"updateAddedStatus()\"\n            ></DataTable>\n        </div>\n        <DocumentGrid v-if=\"loading===false\" :data=\"documentList\"></DocumentGrid>\n    </div>\n</template>\n\n<script>\n    import {\n        TABLEFIELDMAPPING,\n        DATATYPES,\n        LOADINGMESSAGE,\n        NODATAMESSAGE,\n        VUEROUTES,\n        TABLESELECTIONS,\n        PARAMETERNAMES,\n        upperFirstLetter,\n        formatCluster,\n        formatHypothesisCluster,\n        formatHypothesisEntities,\n        deduplicateArray,\n        prettyPluralize,\n        pluralize,\n        sortArrayOfObjects,\n        TableSettings,\n        HeaderConfig,\n        SecondaryCaption,\n        SecondaryExpand\n    } from '../../utils';\n    import DataTable from '@/components/DataTable';\n    import DocumentGrid from '@/components/DocumentGrid';\n    import QuerySubmissionMixin from '@/mixins/QuerySubmissionMixin';\n    import RouteParametersMixin from '@/mixins/RouteParametersMixin';\n    import InfoTooltip from '@/components/InfoTooltip';\n    import HypothesisDialog from '@/components/forms/HypothesisDialog';\n    import API from '../../api';\n    import {mapActions, mapMutations, mapGetters, mapState} from 'vuex';\n\n    class BreadCrumb {\n        constructor (id, text, disabled) {\n            this.id = id;\n            this.text = text;\n            this.disabled = disabled;\n        }\n    }\n\n    export default {\n        name: 'HypothesisDetails',\n        mixins: [QuerySubmissionMixin, RouteParametersMixin],\n        components: {DataTable, DocumentGrid, InfoTooltip, HypothesisDialog},\n        data: () => ({\n            statusMessage: '',\n            routeId: '',\n            entitySort: {},\n            defaultSort: {},\n            defaultPaging: null,\n            tableSetup: {},\n            eventOptions: [],\n            typeOptions: [],\n            crumbs: {\n                addCategory : new BreadCrumb('addCategory', 'Add Event', false),\n                addArgument : new BreadCrumb('addArgument', 'Add Arguments', true),\n                review : new BreadCrumb('review', 'Review', true),\n            },\n            selectedAddCategory: '',\n            showAddDialog: false,\n            hypothesisClusterDetails: {}\n        }),\n        created() {\n            this.TABLESELECTIONS = TABLESELECTIONS;\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.DATATYPES = DATATYPES;\n            this.VUEROUTES = VUEROUTES;\n            this.NODATAMESSAGE = NODATAMESSAGE;\n            this.entitySort = {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.headline, [TABLESELECTIONS.sortDesc]: false};\n            this.defaultSort = {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.entityCount, [TABLESELECTIONS.sortDesc]: true};\n            this.selectedAddCategory = DATATYPES.eventType.id;\n        },\n        mounted() {\n            if(this.$route.query.hasOwnProperty(PARAMETERNAMES.datasoure)) {\n                if(this.currentDataSource !== this.$route.query[PARAMETERNAMES.datasoure]) {\n                    this.updateCurrentDataSource(this.$route.query[PARAMETERNAMES.datasoure]);\n                }\n            }\n            this.refreshData();\n\n            //load data, if data has not been previously loaded\n            for(const type of [DATATYPES.eventType.id, DATATYPES.relationType.id]) {\n                if(Object.keys(this.knowledgeBase).length === 0 || !this.knowledgeBase[type]) {\n                    this.loadData(type, true);\n                }\n            }\n        },\n        computed: {\n            ...mapState(['nodeSelection', 'currentDataSource', 'knowledgeBase', 'savedHypotheses', 'hypothesisSelection', 'savedUrlParameters']),\n            ...mapGetters(['getStoreByRoute', 'getSavedHypothesisById']),\n            routeParams() {\n                return this.$route.params;\n            },\n            entityData() {\n                let entityData = this.hypothesisSelection[pluralize(DATATYPES.entityType.id)];\n                return entityData ? entityData: [];\n            },\n            eventData() {\n                let eventData = this.hypothesisSelection[pluralize(DATATYPES.eventType.id)];\n                return eventData ? Object.values(eventData): [];\n            },\n            relationData() {\n                let relationData = this.hypothesisSelection[pluralize(DATATYPES.relationType.id)];\n                return relationData ? Object.values(relationData): [];\n            },\n            documentList() {\n                return this.hypothesisSelection[TABLEFIELDMAPPING.documentList];\n            },\n            selectedCategory() {\n                return this.selectedAddCategory;\n            },\n            showDialog() {\n                return this.showAddDialog;\n            }\n\n        },\n        methods: {\n            ...mapMutations(['updateSavedHypotheses', 'updateHypothesisMember', 'updateHypothesisSelection']),\n            ...mapActions(['updateCurrentDataSource']),\n            getClusterCategory() {\n                if(this.routeParams.id !== this.routeId) {\n                    this.routeId = this.routeParams.id;\n                }\n\n                return upperFirstLetter(DATATYPES.hypothesis.display);\n            },\n            getDefaultTableConfiguration(category) {\n                let tableConfiguration = {};\n                if(category === DATATYPES.entityType.id) {\n                    tableConfiguration = {\n                        tableSettings: new TableSettings(TABLEFIELDMAPPING.clusterUri, false, '', '', false, false, false),\n                        primaryHeaders: [\n                            new HeaderConfig('Name', 'start', true, TABLEFIELDMAPPING.headline),\n                            new HeaderConfig('ID', 'start', true, TABLEFIELDMAPPING.id),\n                            new HeaderConfig('Types', 'start', true, TABLEFIELDMAPPING.types)\n                        ]\n                    }\n                }\n                else {\n                    tableConfiguration = {\n                        tableSettings: new TableSettings(TABLEFIELDMAPPING.clusterUri, true, '', '', false, false, false, TABLEFIELDMAPPING.highlight),\n                        primaryHeaders: [\n                            new HeaderConfig('Description', 'start', true, TABLEFIELDMAPPING.headline),\n                            new HeaderConfig('ID', 'start', true, TABLEFIELDMAPPING.id),\n                            new HeaderConfig('Types', 'start', true, TABLEFIELDMAPPING.types),\n                            new HeaderConfig('Arguments', 'center', true, TABLEFIELDMAPPING.entityCount),\n                            new HeaderConfig('', 'center', false, 'data-table-expand')\n                        ],\n                        secondaryHeaders: {\n                            caption: new SecondaryCaption(TABLEFIELDMAPPING.prototype, TABLEFIELDMAPPING.entityList, TABLEFIELDMAPPING.roles),\n                            expanded: new SecondaryExpand(TABLEFIELDMAPPING.prototype, TABLEFIELDMAPPING.entityList,\n                                [\n                                    new HeaderConfig('Name', 'start', false, TABLEFIELDMAPPING.headline),\n                                    new HeaderConfig('ID', 'start', false, TABLEFIELDMAPPING.clusterIdList),\n                                    new HeaderConfig('Roles', 'start', false, TABLEFIELDMAPPING.roles),\n                                    new HeaderConfig('Types', 'start', false, TABLEFIELDMAPPING.types)\n                                ]\n                            )\n                        }\n                    }\n                }\n                return tableConfiguration;\n            },\n            refreshData() {\n                this.updateHypothesisSelection({});\n                this.loading = true;\n                this.statusMessage = LOADINGMESSAGE;\n                const hypothesis = this.getSavedHypothesisById(decodeURIComponent(this.routeParams.id));\n                //If hypothesis has been edited and saved, retrieve the edited hypothesis from the VUE store, otherwise\n                //retrieve the hypothesis from the triplestore\n                if(hypothesis && Object.keys(hypothesis).length > 0) {\n                    this.hypothesisClusterDetails = hypothesis;\n                    this.updateHypothesisSelection(hypothesis);\n                    this.loading = false;\n                }\n                else {\n                    API.getClusterDetails(decodeURIComponent(this.routeParams.id), DATATYPES.hypothesis.id, this.currentDataSource).then((response) => {\n                        if (response.data && Object.keys(response.data).length > 0) {\n                            this.hypothesisClusterDetails = response.data;\n                            this.updateHypothesisSelection(formatHypothesisCluster(response.data, DATATYPES.hypothesis.id));\n                        } else if (response.statusMessage && response.statusMessage.length > 0) {\n                            this.statusMessage = response.statusMessage;\n                            this.updateHypothesisSelection({});\n                        }\n                        this.loading = false;\n                    });\n                }\n            },\n            getTableConfiguration(category) {\n                let tableConfig = this.getDefaultTableConfiguration(category);\n                tableConfig.tableSettings.tableHeading = prettyPluralize(category);\n                return tableConfig;\n            },\n            openDialog(category) {\n                this.selectedAddCategory = category;\n                this.crumbs.addCategory.text = 'Add ' + upperFirstLetter(category);\n                this.showAddDialog = true;\n            },\n            modifyDialog(crumbSelection) {\n                for (const crumb in this.crumbs) {\n                    this.crumbs[crumb].disabled = crumb !== crumbSelection;\n                }\n            },\n            setHypothesisFromStore() {\n                const hypothesis = this.getSavedHypothesisById(decodeURIComponent(this.routeParams.id));\n                if (hypothesis && Object.keys(hypothesis).length > 0) {\n                    this.hypothesisClusterDetails = hypothesis;\n                }\n            },\n            updateHypothesisDetails(clusterAdd) {\n                clusterAdd[[TABLEFIELDMAPPING.category]] = this.selectedAddCategory;\n                clusterAdd[TABLEFIELDMAPPING.highlight] = true;\n                const documents = clusterAdd.hasOwnProperty('members') ? [...new Set(clusterAdd.members.flatMap(member => member.docs))] : [];\n                const fillers = clusterAdd.hasOwnProperty(TABLEFIELDMAPPING.prototype) ? [...new Set(clusterAdd.prototype.arguments.flatMap(argument => {\n                    argument.fillers.map(filler => {\n                        filler.clusterIds = [filler.id];\n                        filler[TABLEFIELDMAPPING.highlight] = true;\n                    });\n                    return argument.fillers;\n                }))] : [];\n\n                //If the hypothesis does not have members, then it has already been formatted. In this case, in order\n                //to add a member, the member data must be formatted first. Otherwise, the data can be added as is\n                if(!this.hypothesisClusterDetails.members) {\n                    this.setHypothesisFromStore();\n                    const formatAddedCluster = formatCluster(clusterAdd, DATATYPES.hypothesis.id);\n                    const formatAddedEntities = formatHypothesisEntities(fillers);\n\n                    this.hypothesisClusterDetails[\n                        clusterAdd.category === DATATYPES.eventType.id ?\n                            TABLEFIELDMAPPING.eventList :\n                            TABLEFIELDMAPPING.relationList\n                        ].push(formatAddedCluster);\n\n                    this.hypothesisClusterDetails[TABLEFIELDMAPPING.entityList] =\n                        deduplicateArray([...this.hypothesisClusterDetails[TABLEFIELDMAPPING.entityList], ...formatAddedEntities]);\n                    this.hypothesisClusterDetails[TABLEFIELDMAPPING.documentList] =\n                        sortArrayOfObjects(deduplicateArray([...this.hypothesisClusterDetails[TABLEFIELDMAPPING.documentList], ...documents]));\n                    this.updateHypothesisSelection(this.hypothesisClusterDetails);\n                }\n                else {\n                    this.hypothesisClusterDetails.members.push(clusterAdd);\n                    this.hypothesisClusterDetails.fillers = deduplicateArray([...this.hypothesisClusterDetails.fillers, ...fillers]);\n                    this.hypothesisClusterDetails[TABLEFIELDMAPPING.documentList] = deduplicateArray([...this.hypothesisClusterDetails[TABLEFIELDMAPPING.documentList], ...documents]);\n                    this.updateHypothesisSelection(formatHypothesisCluster(this.hypothesisClusterDetails, DATATYPES.hypothesis.id));\n                }\n\n                this.updateSavedHypotheses({\n                    id: this.hypothesisSelection[TABLEFIELDMAPPING.idUri],\n                    details: this.hypothesisSelection\n                });\n            },\n            updateAddedStatus(rowItem) {\n                //Specifically for updating(removing the highlighting feature) a member of the saved hypothesis\n                const hypothesisUri = this.hypothesisSelection[TABLEFIELDMAPPING.idUri];\n                const item = rowItem ? rowItem : this.nodeSelection;\n                if(this.savedHypotheses.hasOwnProperty(hypothesisUri) && item.hasOwnProperty(TABLEFIELDMAPPING.clusterUri))\n                {\n                    let selectedItem =\n                        this.savedHypotheses[hypothesisUri][pluralize(item[TABLEFIELDMAPPING.category])].\n                        find((member) => member[TABLEFIELDMAPPING.clusterUri] === item[TABLEFIELDMAPPING.clusterUri]);\n                    selectedItem[TABLEFIELDMAPPING.highlight] = false;\n                    this.updateHypothesisMember({\n                        id: hypothesisUri,\n                        category: pluralize(selectedItem.category),\n                        details: selectedItem\n                    });\n                }\n            }\n        }\n\n    }\n</script>\n\n"],"sourceRoot":"src/views/analyze"}]}