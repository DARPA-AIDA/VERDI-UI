{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/eslint-loader/index.js??ref--14-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/mixins/QuerySubmissionMixin.js","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/mixins/QuerySubmissionMixin.js","mtime":1640207172532},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/eslint-loader/index.js","mtime":1641411772337}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZyI7CmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tICIvVXNlcnMvd29taXRvd29qdS93b3Jrc3BhY2UvYWlkYS9WRVJESS1VSS9HVUkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIi9Vc2Vycy93b21pdG93b2p1L3dvcmtzcGFjZS9haWRhL1ZFUkRJLVVJL0dVSS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyI7CgpmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1siQEBpdGVyYXRvciJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09ICJudW1iZXIiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH0KCmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9CgovKgogKiBDb3B5cmlnaHQgMjAxOSBOZXh0IENlbnR1cnkgQ29ycG9yYXRpb24vQ0FDSQogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqLwppbXBvcnQgeyBUQUJMRVNFTEVDVElPTlMsIFRBQkxFRklFTERNQVBQSU5HLCBEQVRBVFlQRVMsIFBBUkFNRVRFUk5BTUVTLCBRVUVSWU9QVElPTlMsIFRBMlRFUk1PUFRJT05TLCBUQTNURVJNT1BUSU9OUywgVlVFUk9VVEVTLCBmb3JtYXRDbHVzdGVyVGFibGVEYXRhLCBmb3JtYXRFU0RhdGEgfSBmcm9tICIuLi91dGlscyI7CmltcG9ydCB7IG1hcEFjdGlvbnMsIG1hcE11dGF0aW9ucywgbWFwU3RhdGUsIG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IEFQSSwgeyBBUElFUlJPUk1FU1NBR0UsIFVQUEVSQ0FTRUNBVEVHT1JZLCBzaW5DbGllbnQgfSBmcm9tICIuLi9hcGkiOwppbXBvcnQgUm91dGVQYXJhbWV0ZXJzTWl4aW4gZnJvbSAiLi9Sb3V0ZVBhcmFtZXRlcnNNaXhpbiI7CmV4cG9ydCBkZWZhdWx0IHsKICBtaXhpbnM6IFtSb3V0ZVBhcmFtZXRlcnNNaXhpbl0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGZpbHRlcmVkT3B0aW9uczogW10sCiAgICAgIGlucHV0VGV4dDogJycsCiAgICAgIHN0YXR1c01lc3NhZ2U6ICcnLAogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgcHJlc2V0UXVlcnlUeXBlOiAnJywKICAgICAgcm91dGVQYXJhbTogJycKICAgIH07CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5yb3V0ZVBhcmFtID0gUEFSQU1FVEVSTkFNRVMudGVybTsKICAgIHRoaXMuVEFCTEVGSUVMRE1BUFBJTkcgPSBUQUJMRUZJRUxETUFQUElORzsKICB9LAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwU3RhdGUoWydjdXJyZW50RGF0YVNvdXJjZScsICdjYXRlZ29yeUFyZ3VtZW50cycsICdleHBsb3JlU2VsZWN0aW9ucycsICd0ZXJtJywgJ2RlZmF1bHRLYkRhdGFTb3VyY2UnXSkpLCBtYXBHZXR0ZXJzKFsnZ2V0UXVlcnlQYXJhbXMnXSkpLCB7fSwgewogICAgc2VsZWN0ZWRUYWI6IGZ1bmN0aW9uIHNlbGVjdGVkVGFiKCkgewogICAgICAvL1RoaXMgd2lsbCBzd2l0Y2ggYmV0d2VlbiBFdmVudCBhbmQgUmVsYXRpb24gYmFzZWQgb24gdGhlIHRhYiBzZWxlY3Rpb24KICAgICAgcmV0dXJuIHRoaXMuZXhwbG9yZVNlbGVjdGlvbnNbVEFCTEVTRUxFQ1RJT05TLnRhYl0gPyB0aGlzLmV4cGxvcmVTZWxlY3Rpb25zW1RBQkxFU0VMRUNUSU9OUy50YWJdIDogVVBQRVJDQVNFQ0FURUdPUlkuZXZlbnQ7CiAgICB9LAogICAgaW5wdXRPcHRpb25zOiBmdW5jdGlvbiBpbnB1dE9wdGlvbnMoKSB7CiAgICAgIHJldHVybiB0aGlzLnNldElucHV0T3B0aW9ucygpOwogICAgfSwKICAgIGZpbHRlcmVkTGlzdDogZnVuY3Rpb24gZmlsdGVyZWRMaXN0KCkgewogICAgICByZXR1cm4gdGhpcy5maWx0ZXJlZE9wdGlvbnM7CiAgICB9LAogICAgcXVlcnlJZHM6IGZ1bmN0aW9uIHF1ZXJ5SWRzKCkgewogICAgICByZXR1cm4gT2JqZWN0LmtleXMoUVVFUllPUFRJT05TKTsKICAgIH0sCiAgICByb3V0ZVF1ZXJ5T3B0aW9uczogZnVuY3Rpb24gcm91dGVRdWVyeU9wdGlvbnMoKSB7CiAgICAgIHJldHVybiB0aGlzLmRhdGFTb3VyY2VSb3V0ZVR5cGUoKSA9PT0gVlVFUk9VVEVTLnRhMiA/IFRBMlRFUk1PUFRJT05TIDogVEEzVEVSTU9QVElPTlM7CiAgICB9LAogICAgcXVlcnlUeXBlSWQ6IHsKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgLy9jaGVjayBpZiB0aGUgdGVybSB0eXBlIGhhcyBiZWVuIHByb3ZpZGVkLiBJZiBzbywgcmV0dXJuIHRoZSB0ZXJtIHR5cGUuIElmIG5vdCwgcmV0dXJuIHRoZSBwcmVzZXQgdHlwZQogICAgICAgIHJldHVybiB0aGlzLnRlcm0gJiYgdGhpcy50ZXJtLnR5cGUgPyB0aGlzLnRlcm0udHlwZSA6IHRoaXMucHJlc2V0UXVlcnlUeXBlOwogICAgICB9LAogICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2KSB7CiAgICAgICAgdGhpcy5wcmVzZXRRdWVyeVR5cGUgPSB2OwogICAgICB9CiAgICB9LAogICAgcXVlcnlEaXNwbGF5TmFtZTogZnVuY3Rpb24gcXVlcnlEaXNwbGF5TmFtZSgpIHsKICAgICAgdGhpcy5xdWVyeVR5cGVJZCA9IHRoaXMuZGF0YVNvdXJjZVJvdXRlVHlwZSgpID09PSBWVUVST1VURVMudGEyID8gREFUQVRZUEVTLmFyZ3VtZW50TmFtZS5pZCA6IERBVEFUWVBFUy5zaW4uaWQ7CiAgICAgIHJldHVybiBRVUVSWU9QVElPTlNbdGhpcy5xdWVyeVR5cGVJZF07CiAgICB9LAogICAgcGxhY2Vob2xkZXI6IGZ1bmN0aW9uIHBsYWNlaG9sZGVyKCkgewogICAgICB2YXIgdGV4dCA9ICdTZWFyY2ggJzsKICAgICAgdmFyIG5hbWUgPSB0aGlzLnF1ZXJ5RGlzcGxheU5hbWUgPyB0aGlzLnF1ZXJ5RGlzcGxheU5hbWUgOiAnJzsKCiAgICAgIGlmIChuYW1lICYmIG5hbWUgIT09IERBVEFUWVBFUy5ldmVudFR5cGUuZGlzcGxheSAmJiBuYW1lICE9PSBEQVRBVFlQRVMuaHlwb3RoZXNpcy5kaXNwbGF5ICYmIG5hbWUgIT09IERBVEFUWVBFUy5zaW4uZGlzcGxheSkgewogICAgICAgIHRleHQgPSB0ZXh0ICsgdGhpcy5zZWxlY3RlZFRhYiArICcgJzsKICAgICAgfQoKICAgICAgcmV0dXJuIHRleHQgKyBuYW1lICsgJy4uLic7CiAgICB9CiAgfSksCiAgbWV0aG9kczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcE11dGF0aW9ucyhbJ3VwZGF0ZURhdGFLQicsICd1cGRhdGVTaW5TZWxlY3Rpb24nXSkpLCBtYXBBY3Rpb25zKFsndXBkYXRlU2VhcmNoVGVybSddKSksIHt9LCB7CiAgICBzZXRJbnB1dE9wdGlvbnM6IGZ1bmN0aW9uIHNldElucHV0T3B0aW9ucygpIHsKICAgICAgdmFyIG9wdGlvbnMgPSBbXTsKCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLnF1ZXJ5SWRzKSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGlkID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgaWYgKHRoaXMucXVlcnlUeXBlSWQgPT09IGlkICYmIGlkID09PSBEQVRBVFlQRVMuYXJndW1lbnROYW1lLmlkKSB7CiAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLnNlbGVjdGVkVGFiID09PSBVUFBFUkNBU0VDQVRFR09SWS5ldmVudCA/IHRoaXMuY2F0ZWdvcnlBcmd1bWVudHNbREFUQVRZUEVTLmV2ZW50VHlwZS5pZF0gOiB0aGlzLmNhdGVnb3J5QXJndW1lbnRzW0RBVEFUWVBFUy5yZWxhdGlvblR5cGUuaWRdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICB9CgogICAgICByZXR1cm4gb3B0aW9uczsKICAgIH0sCiAgICBpbnB1dENoYW5nZTogZnVuY3Rpb24gaW5wdXRDaGFuZ2UodGV4dCwgdHlwZSkgewogICAgICB0aGlzLmlucHV0VGV4dCA9IHRleHQ7CiAgICAgIHZhciBpbnB1dFR5cGUgPSB0eXBlID8gdHlwZSA6IHRoaXMucXVlcnlEaXNwbGF5TmFtZTsKCiAgICAgIGlmICh0ZXh0ICYmIHRleHQubGVuZ3RoID4gMSkgewogICAgICAgIGZvciAodmFyIF9pID0gMCwgX09iamVjdCRlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoUVVFUllPUFRJT05TKTsgX2kgPCBfT2JqZWN0JGVudHJpZXMubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgICB2YXIgX09iamVjdCRlbnRyaWVzJF9pID0gX3NsaWNlZFRvQXJyYXkoX09iamVjdCRlbnRyaWVzW19pXSwgMiksCiAgICAgICAgICAgICAga2V5ID0gX09iamVjdCRlbnRyaWVzJF9pWzBdLAogICAgICAgICAgICAgIHZhbHVlID0gX09iamVjdCRlbnRyaWVzJF9pWzFdOwoKICAgICAgICAgIGlmIChpbnB1dFR5cGUgPT09IHZhbHVlKSB7CiAgICAgICAgICAgIGlmIChrZXkgPT09IERBVEFUWVBFUy5hcmd1bWVudE5hbWUuaWQpIHsKICAgICAgICAgICAgICB0aGlzLnNldEFyZ3VtZW50TmFtZXModGV4dCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBEQVRBVFlQRVMuc2luLmlkKSB7Ly9kbyBub3RoaW5nCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdpbnZhbGlkIHF1ZXJ5IHR5cGUnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGV4ZWN1dGVRdWVyeTogZnVuY3Rpb24gZXhlY3V0ZVF1ZXJ5KCkgewogICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMucXVlcnlJZHMpLAogICAgICAgICAgX3N0ZXAyOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGlkID0gX3N0ZXAyLnZhbHVlOwoKICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5VHlwZUlkID09PSBpZCkgewogICAgICAgICAgICBpZiAoaWQgPT09IERBVEFUWVBFUy5hcmd1bWVudE5hbWUuaWQpIHsKICAgICAgICAgICAgICB0aGlzLnF1ZXJ5QWxsRGF0YSgpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlkID09PSBEQVRBVFlQRVMuc2luLmlkKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMudGVybSAmJiB0aGlzLnRlcm0uaW5wdXQpIHsKICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTSU5EYXRhKHRoaXMudGVybS5pbnB1dCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNvbnNvbGUud2FybignaW52YWxpZCBxdWVyeSBzdWJtaXNzaW9uJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICB9CiAgICB9LAogICAgc2V0QXJndW1lbnROYW1lczogZnVuY3Rpb24gc2V0QXJndW1lbnROYW1lcyh0ZXh0KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBBUEkuZ2V0Q2F0ZWdvcnlBcmd1bWVudHModGhpcy5jdXJyZW50RGF0YVNvdXJjZSwgdGhpcy5zZWxlY3RlZFRhYi50b0xvd2VyQ2FzZSgpLCB0ZXh0KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHJlc3BvbnNlLmRhdGE7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIF90aGlzLnN0YXR1c01lc3NhZ2UgPSBlcnJvci50b1N0cmluZygpICsgQVBJRVJST1JNRVNTQUdFOwogICAgICB9KTsKICAgIH0sCiAgICByZXNldExpc3Q6IGZ1bmN0aW9uIHJlc2V0TGlzdCgpIHsKICAgICAgdGhpcy5pbnB1dFRleHQgPSAnJzsKICAgICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmlucHV0T3B0aW9uczsKICAgIH0sCiAgICByZXNldFRhYkRhdGE6IGZ1bmN0aW9uIHJlc2V0VGFiRGF0YSgpIHsKICAgICAgdGhpcy5sb2FkRGF0YSh0aGlzLnNlbGVjdGVkVGFiLnRvTG93ZXJDYXNlKCkpOwogICAgfSwKICAgIHJlc2V0QWxsRGF0YTogZnVuY3Rpb24gcmVzZXRBbGxEYXRhKCkgewogICAgICBpZiAodGhpcy5kYXRhU291cmNlUm91dGVUeXBlKCkgPT09IFZVRVJPVVRFUy50YTIpIHsKICAgICAgICB0aGlzLmxvYWREYXRhKERBVEFUWVBFUy5ldmVudFR5cGUuaWQpOwogICAgICAgIHRoaXMubG9hZERhdGEoREFUQVRZUEVTLnJlbGF0aW9uVHlwZS5pZCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5sb2FkRGF0YShEQVRBVFlQRVMuaHlwb3RoZXNpcy5pZCk7CiAgICAgIH0KICAgIH0sCiAgICBxdWVyeUFsbERhdGE6IGZ1bmN0aW9uIHF1ZXJ5QWxsRGF0YSgpIHsKICAgICAgaWYgKHRoaXMuZGF0YVNvdXJjZVJvdXRlVHlwZSgpID09PSBWVUVST1VURVMudGEyKSB7CiAgICAgICAgdGhpcy5xdWVyeURhdGEoREFUQVRZUEVTLmV2ZW50VHlwZS5pZCk7CiAgICAgICAgdGhpcy5xdWVyeURhdGEoREFUQVRZUEVTLnJlbGF0aW9uVHlwZS5pZCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5xdWVyeURhdGEoREFUQVRZUEVTLmh5cG90aGVzaXMuaWQpOwogICAgICB9CiAgICB9LAogICAgbG9hZERhdGE6IGZ1bmN0aW9uIGxvYWREYXRhKGNhdGVnb3J5KSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGRlZmF1bHRTb3VyY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlOwogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICB0aGlzLnVwZGF0ZUtCKGNhdGVnb3J5LCBbXSk7CiAgICAgIEFQSS5nZXRDbHVzdGVyc0J5Q2F0ZWdvcnkoZGVmYXVsdFNvdXJjZSA/IHRoaXMuZGVmYXVsdEtiRGF0YVNvdXJjZSA6IHRoaXMuY3VycmVudERhdGFTb3VyY2UsIGNhdGVnb3J5KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzMi5mb3JtYXRDbHVzdGVycyhyZXNwb25zZSwgY2F0ZWdvcnkpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBfdGhpczIuc3RhdHVzTWVzc2FnZSA9IGVycm9yLnRvU3RyaW5nKCkgKyBBUElFUlJPUk1FU1NBR0U7CiAgICAgIH0pOwogICAgfSwKICAgIGxvYWRTSU5EYXRhOiBmdW5jdGlvbiBsb2FkU0lORGF0YShjYXRlZ29yeSkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgIHRoaXMudXBkYXRlS0IoY2F0ZWdvcnksIFtdKTsKICAgICAgQVBJLmdldEFsbFNpblF1ZXJ5UmVzdWx0cyh7fSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgX3RoaXMzLnVwZGF0ZUtCKGNhdGVnb3J5LCBmb3JtYXRFU0RhdGEoY2F0ZWdvcnksIHJlc3BvbnNlLmRhdGEpKTsKICAgICAgICB9CgogICAgICAgIF90aGlzMy5sb2FkaW5nID0gZmFsc2U7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIF90aGlzMy5zdGF0dXNNZXNzYWdlID0gZXJyb3IudG9TdHJpbmcoKSArIEFQSUVSUk9STUVTU0FHRTsKICAgICAgICBfdGhpczMubG9hZGluZyA9IGZhbHNlOwogICAgICB9KTsKICAgIH0sCiAgICBxdWVyeURhdGE6IGZ1bmN0aW9uIHF1ZXJ5RGF0YShjYXRlZ29yeSkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgIHRoaXMudXBkYXRlS0IoY2F0ZWdvcnksIFtdKTsKICAgICAgdmFyIHF1ZXJ5U2V0ID0gQVBJLmNvbXBpbGVBcGlQYXJhbXMoKTsKICAgICAgQVBJLmdldENsdXN0ZXJzQnlRdWVyeVBhcmFtcyh0aGlzLmN1cnJlbnREYXRhU291cmNlLCBjYXRlZ29yeSwgcXVlcnlTZXQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXM0LmZvcm1hdENsdXN0ZXJzKHJlc3BvbnNlLCBjYXRlZ29yeSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIF90aGlzNC5zdGF0dXNNZXNzYWdlID0gZXJyb3IudG9TdHJpbmcoKSArIEFQSUVSUk9STUVTU0FHRTsKICAgICAgfSk7CiAgICB9LAogICAgLy9UT0RPOiB0aGlzIGlzbid0IHdvcmtpbmcgYW55bW9yZS4gTWF5YmUgZmlndXJlIG91dCB3aHkgc2luY2Ugd2UgbWF5IGJlIHJlaW5zdGF0aW5nIHRoaXMgZmVhdHVyZS4KICAgIHF1ZXJ5U0lORGF0YTogZnVuY3Rpb24gcXVlcnlTSU5EYXRhKHRleHQpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB2YXIgcXVlcnlTdHJpbmdzID0gdGV4dC5zcGxpdCgnICcpOwogICAgICB2YXIgcXVlcnkgPSBbXTsKICAgICAgdmFyIGlkRmllbGQgPSAnc3NfZmllbGRfc2luX2lkJzsKICAgICAgdmFyIHRpdGxlRmllbGQgPSAndG1fWDNiX2VuX3RpdGxlJzsKICAgICAgdmFyIHF1ZXN0aW9uc0ZpZWxkID0gJ3RtX1gzYl9lbl9ib2R5JzsKCiAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9hcnIgPSBbcXVlc3Rpb25zRmllbGQsIHRpdGxlRmllbGRdOyBfaTIgPCBfYXJyLmxlbmd0aDsgX2kyKyspIHsKICAgICAgICB2YXIgZmllbGQgPSBfYXJyW19pMl07CiAgICAgICAgdmFyIGFwcGVuZGVkUXVlcnkgPSAnKCc7CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVlcnlTdHJpbmdzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAocXVlcnlTdHJpbmdzW2ldKSB7CiAgICAgICAgICAgIGFwcGVuZGVkUXVlcnkgKz0gZmllbGQgKyAnOicgKyBxdWVyeVN0cmluZ3NbaV07CgogICAgICAgICAgICBpZiAoaSAhPT0gcXVlcnlTdHJpbmdzLmxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICBhcHBlbmRlZFF1ZXJ5ICs9ICcgQU5EICc7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHF1ZXJ5LnB1c2goYXBwZW5kZWRRdWVyeSArICcpJyk7CiAgICAgIH0gLy9FbnN1cmUgdGhhdCB0aGUgc2luIGluZGV4IGlzIGJlaW5nIHNlYXJjaCBzaW5jZSBkb2N1bWVudHMgYW5kIHNpbnMgYXJlIGluIHRoZSBzYW1lIFNPTFIgY29sbGVjdGlvbgoKCiAgICAgIHF1ZXJ5ID0gJ2luZGV4X2lkOnNpbl9pbmRleCBBTkQgJyArIHF1ZXJ5LmpvaW4oJyBPUiAnKTsKICAgICAgc2luQ2xpZW50LmdldCgnY29sbGVjdGlvbjEvc2VsZWN0P2ZsPScgKyBpZEZpZWxkICsgJyZxPScgKyBxdWVyeSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICB2YXIgY2xhaW1zID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZS5kb2NzOwogICAgICAgIHZhciBpZHMgPSBbXTsKCiAgICAgICAgdmFyIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihjbGFpbXMpLAogICAgICAgICAgICBfc3RlcDM7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgY2xhaW0gPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICAgIHZhciBzaW5OYW1lID0gY2xhaW1baWRGaWVsZF07CiAgICAgICAgICAgIHZhciBzaW5JZCA9IHNpbk5hbWUuc3Vic3RyaW5nKHNpbk5hbWUubGFzdEluZGV4T2YoJ18nKSArIDEpOwogICAgICAgICAgICBpZHMucHVzaChzaW5JZC5zdWJzdHJpbmcoMCwgNCkpOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjMuZigpOwogICAgICAgIH0KCiAgICAgICAgX3RoaXM1LnVwZGF0ZVNpblNlbGVjdGlvbihfZGVmaW5lUHJvcGVydHkoe30sIFRBQkxFRklFTERNQVBQSU5HLnNpbkxpc3QsIGlkcykpOwoKICAgICAgICBfdGhpczUudXBkYXRlUm91dGVQYXJhbXMoUEFSQU1FVEVSTkFNRVMudGVybSwgX3RoaXM1LiRyb3V0ZS5xdWVyeVtQQVJBTUVURVJOQU1FUy50ZXJtXSwgJ2NsYWltcycpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IpOwogICAgICB9KTsKICAgIH0sCiAgICBmb3JtYXRDbHVzdGVyczogZnVuY3Rpb24gZm9ybWF0Q2x1c3RlcnMocmVzcG9uc2UsIGNhdGVnb3J5KSB7CiAgICAgIGlmIChyZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGEubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBjbHVzdGVyUmVzcG9uc2UgPSBmb3JtYXRDbHVzdGVyVGFibGVEYXRhKHJlc3BvbnNlLmRhdGEsIGNhdGVnb3J5KTsKICAgICAgICB2YXIgZGF0YUFkZGVkID0gZmFsc2U7CgogICAgICAgIGlmIChjbHVzdGVyUmVzcG9uc2UpIHsKICAgICAgICAgIHRoaXMudXBkYXRlS0IoY2F0ZWdvcnksIGNsdXN0ZXJSZXNwb25zZSk7CiAgICAgICAgICBkYXRhQWRkZWQgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFkYXRhQWRkZWQpIHsKICAgICAgICAgIHRoaXMuc3RhdHVzTWVzc2FnZSA9ICdObyByZXN1bHRzIGZvdW5kJzsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSkgewogICAgICAgIHRoaXMuc3RhdHVzTWVzc2FnZSA9IHJlc3BvbnNlLnN0YXR1c01lc3NhZ2U7CiAgICAgIH0KICAgIH0sCiAgICB1cGRhdGVLQjogZnVuY3Rpb24gdXBkYXRlS0IoY2F0ZWdvcnksIGRhdGEpIHsKICAgICAgdGhpcy51cGRhdGVEYXRhS0IoewogICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSwKICAgICAgICByZXNwb25zZTogZGF0YQogICAgICB9KTsKICAgIH0sCiAgICBub1F1ZXJ5UGFyYW1zOiBmdW5jdGlvbiBub1F1ZXJ5UGFyYW1zKCkgewogICAgICByZXR1cm4gIXRoaXMuZ2V0UXVlcnlQYXJhbXNbUEFSQU1FVEVSTkFNRVMudGVybV0gJiYgT2JqZWN0LmtleXModGhpcy5nZXRRdWVyeVBhcmFtc1tQQVJBTUVURVJOQU1FUy5maWx0ZXJdKS5sZW5ndGggPT09IDA7CiAgICB9LAogICAgdXBkYXRlUXVlcnlSZXN1bHRzOiBmdW5jdGlvbiB1cGRhdGVRdWVyeVJlc3VsdHMoKSB7CiAgICAgIGlmICh0aGlzLm5vUXVlcnlQYXJhbXMoKSkgewogICAgICAgIHRoaXMucmVzZXRBbGxEYXRhKCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5nZXRRdWVyeVBhcmFtc1tQQVJBTUVURVJOQU1FUy50ZXJtXSAmJiBPYmplY3Qua2V5cyh0aGlzLmdldFF1ZXJ5UGFyYW1zW1BBUkFNRVRFUk5BTUVTLnRlcm1dKS5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5leGVjdXRlUXVlcnkoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnF1ZXJ5QWxsRGF0YSgpOwogICAgICB9CiAgICB9LAogICAgZ2V0SWRCeURpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXRJZEJ5RGlzcGxheU5hbWUobmFtZSkgewogICAgICByZXR1cm4gdGhpcy5xdWVyeUlkcy5maW5kKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gUVVFUllPUFRJT05TW2tleV0gPT09IG5hbWU7CiAgICAgIH0pOwogICAgfSwKICAgIHNldFF1ZXJ5VHlwZTogZnVuY3Rpb24gc2V0UXVlcnlUeXBlKHR5cGUpIHsKICAgICAgdGhpcy5wcmVzZXRRdWVyeVR5cGUgPSB0eXBlOwogICAgICB0aGlzLnVwZGF0ZVNlYXJjaFRlcm0oewogICAgICAgIHR5cGU6IHRoaXMucHJlc2V0UXVlcnlUeXBlCiAgICAgIH0pOwogICAgfSwKICAgIGdldERlZmF1bHRUeXBlSWRCeVJvdXRlOiBmdW5jdGlvbiBnZXREZWZhdWx0VHlwZUlkQnlSb3V0ZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHJvdXRlLnBhdGggJiYgKHRoaXMuJHJvdXRlLnBhdGguaW5jbHVkZXMoVlVFUk9VVEVTLnRhMykgPyBEQVRBVFlQRVMuc2luLmlkIDogREFUQVRZUEVTLmFyZ3VtZW50TmFtZS5pZCk7CiAgICB9CiAgfSkKfTs="},{"version":3,"sources":["/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/mixins/QuerySubmissionMixin.js"],"names":["TABLESELECTIONS","TABLEFIELDMAPPING","DATATYPES","PARAMETERNAMES","QUERYOPTIONS","TA2TERMOPTIONS","TA3TERMOPTIONS","VUEROUTES","formatClusterTableData","formatESData","mapActions","mapMutations","mapState","mapGetters","API","APIERRORMESSAGE","UPPERCASECATEGORY","sinClient","RouteParametersMixin","mixins","data","filteredOptions","inputText","statusMessage","loading","presetQueryType","routeParam","created","term","computed","selectedTab","exploreSelections","tab","event","inputOptions","setInputOptions","filteredList","queryIds","Object","keys","routeQueryOptions","dataSourceRouteType","ta2","queryTypeId","get","type","set","v","queryDisplayName","argumentName","id","sin","placeholder","text","name","eventType","display","hypothesis","methods","options","categoryArguments","relationType","inputChange","inputType","length","entries","key","value","setArgumentNames","console","warn","executeQuery","queryAllData","input","querySINData","getCategoryArguments","currentDataSource","toLowerCase","then","response","catch","error","toString","resetList","resetTabData","loadData","resetAllData","queryData","category","defaultSource","updateKB","getClustersByCategory","defaultKbDataSource","formatClusters","loadSINData","getAllSinQueryResults","querySet","compileApiParams","getClustersByQueryParams","queryStrings","split","query","idField","titleField","questionsField","field","appendedQuery","i","push","join","claims","docs","ids","claim","sinName","sinId","substring","lastIndexOf","updateSinSelection","sinList","updateRouteParams","$route","clusterResponse","dataAdded","updateDataKB","noQueryParams","getQueryParams","filter","updateQueryResults","getIdByDisplayName","find","setQueryType","updateSearchTerm","getDefaultTypeIdByRoute","path","includes","ta3"],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 Next Century Corporation/CACI\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n    TABLESELECTIONS,\n    TABLEFIELDMAPPING,\n    DATATYPES,\n    PARAMETERNAMES,\n    QUERYOPTIONS,\n    TA2TERMOPTIONS,\n    TA3TERMOPTIONS,\n    VUEROUTES,\n    formatClusterTableData,\n    formatESData\n} from '../utils'\nimport {mapActions, mapMutations, mapState, mapGetters} from 'vuex';\nimport API, {APIERRORMESSAGE, UPPERCASECATEGORY, sinClient} from '../api';\nimport RouteParametersMixin from './RouteParametersMixin';\n\nexport default {\n    mixins: [RouteParametersMixin],\n    data: () => ({\n        filteredOptions: [],\n        inputText: '',\n        statusMessage: '',\n        loading: false,\n        presetQueryType: '',\n        routeParam: ''\n    }),\n    created() {\n        this.routeParam = PARAMETERNAMES.term;\n        this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n    },\n    computed: {\n        ...mapState(['currentDataSource', 'categoryArguments', 'exploreSelections', 'term', 'defaultKbDataSource']),\n        ...mapGetters(['getQueryParams']),\n        selectedTab() { //This will switch between Event and Relation based on the tab selection\n            return this.exploreSelections[TABLESELECTIONS.tab] ? this.exploreSelections[TABLESELECTIONS.tab] : UPPERCASECATEGORY.event;\n        },\n        inputOptions() {\n            return this.setInputOptions();\n        },\n        filteredList() {\n            return this.filteredOptions;\n        },\n        queryIds() {\n            return Object.keys(QUERYOPTIONS);\n        },\n        routeQueryOptions() {\n            return this.dataSourceRouteType() === VUEROUTES.ta2 ? TA2TERMOPTIONS : TA3TERMOPTIONS;\n        },\n        queryTypeId: {\n            get: function () {\n                //check if the term type has been provided. If so, return the term type. If not, return the preset type\n                return this.term && this.term.type ? this.term.type : this.presetQueryType;\n            },\n            set: function (v) {\n                this.presetQueryType = v;\n            }\n        },\n        queryDisplayName() {\n            this.queryTypeId = this.dataSourceRouteType() === VUEROUTES.ta2 ? DATATYPES.argumentName.id : DATATYPES.sin.id;\n            return QUERYOPTIONS[this.queryTypeId];\n        },\n        placeholder() {\n            let text = 'Search ';\n            const name = this.queryDisplayName ? this.queryDisplayName : '';\n            if(name && name !== DATATYPES.eventType.display && name !== DATATYPES.hypothesis.display && name !== DATATYPES.sin.display) {\n                text = text + this.selectedTab + ' ';\n            }\n            return text + name  + '...';\n        }\n    },\n    methods: {\n        ...mapMutations(['updateDataKB', 'updateSinSelection']),\n        ...mapActions(['updateSearchTerm']),\n        setInputOptions() {\n            let options = [];\n            for (const id of this.queryIds) {\n                if (this.queryTypeId === id && id === DATATYPES.argumentName.id) {\n                    options = this.selectedTab === UPPERCASECATEGORY.event ? this.categoryArguments[DATATYPES.eventType.id] : this.categoryArguments[DATATYPES.relationType.id];\n                }\n            }\n            return options;\n        },\n        inputChange(text, type) {\n            this.inputText = text;\n            let inputType = type ? type : this.queryDisplayName;\n            if(text && text.length > 1) {\n                for(const [key, value] of Object.entries(QUERYOPTIONS)) {\n                    if(inputType === value) {\n                        if (key === DATATYPES.argumentName.id) {\n                            this.setArgumentNames(text);\n                        }\n                        else if (key === DATATYPES.sin.id) {\n                            //do nothing\n                        }\n                        else {\n                            console.warn('invalid query type')\n                        }\n                    }\n                }\n            }\n        },\n        executeQuery() {\n            for (const id of this.queryIds) {\n                if (this.queryTypeId === id) {\n                    if (id === DATATYPES.argumentName.id) {\n                        this.queryAllData();\n                    }\n                    else if(id === DATATYPES.sin.id) {\n                        if(this.term && this.term.input) {\n                            this.querySINData(this.term.input);\n                        }\n                    }\n                    else {\n                        console.warn('invalid query submission')\n                    }\n                }\n            }\n        },\n        setArgumentNames(text) {\n            API.getCategoryArguments(\n                this.currentDataSource, this.selectedTab.toLowerCase(), text\n            ).then((response) => {\n                this.filteredOptions = response.data;\n            }).catch((error) => {\n                this.statusMessage = error.toString() + APIERRORMESSAGE;\n            });\n        },\n        resetList() {\n            this.inputText = '';\n            this.filteredOptions = this.inputOptions;\n        },\n        resetTabData() {\n            this.loadData(this.selectedTab.toLowerCase());\n        },\n        resetAllData() {\n            if(this.dataSourceRouteType() === VUEROUTES.ta2) {\n                this.loadData(DATATYPES.eventType.id);\n                this.loadData(DATATYPES.relationType.id);\n            }\n            else {\n                this.loadData(DATATYPES.hypothesis.id)\n            }\n        },\n        queryAllData() {\n            if(this.dataSourceRouteType() === VUEROUTES.ta2) {\n            this.queryData(DATATYPES.eventType.id);\n            this.queryData(DATATYPES.relationType.id);\n            }\n            else {\n                this.queryData(DATATYPES.hypothesis.id)\n            }\n        },\n        loadData(category, defaultSource=false) {\n            this.loading = true;\n            this.updateKB(category, []);\n            API.getClustersByCategory(\n                defaultSource ? this.defaultKbDataSource : this.currentDataSource,\n                category\n            ).then((response) => {\n                this.formatClusters(response, category);\n            }).catch((error) => {\n                this.statusMessage = error.toString() + APIERRORMESSAGE;\n            });\n        },\n        loadSINData(category) {\n            this.loading = true;\n            this.updateKB(category, []);\n            API.getAllSinQueryResults({}).then(response => {\n                if(response.data) {\n                    this.updateKB(category, formatESData(category, response.data));\n                }\n                this.loading = false;\n            }).catch((error) => {\n                this.statusMessage = error.toString() + APIERRORMESSAGE;\n                this.loading = false;\n            });\n        },\n        queryData(category) {\n            this.loading = true;\n            this.updateKB(category, []);\n            const querySet = API.compileApiParams();\n            API.getClustersByQueryParams(\n                this.currentDataSource, category, querySet\n            ).then((response) => {\n                this.formatClusters(response, category);\n            }).catch((error) => {\n                this.statusMessage = error.toString() + APIERRORMESSAGE;\n            });\n        },\n        //TODO: this isn't working anymore. Maybe figure out why since we may be reinstating this feature.\n        querySINData(text) {\n            const queryStrings = text.split(' ');\n            let query = [];\n            const idField = 'ss_field_sin_id';\n            const titleField = 'tm_X3b_en_title';\n            const questionsField = 'tm_X3b_en_body';\n\n            for (const field of [questionsField, titleField]) {\n                let appendedQuery = '(';\n                for (let i=0; i<queryStrings.length; i++) {\n                    if(queryStrings[i]) {\n                        appendedQuery += field + ':' + queryStrings[i];\n                        if (i !== queryStrings.length - 1) {\n                            appendedQuery += ' AND ';\n                        }\n                    }\n                }\n                query.push(appendedQuery + ')');\n            }\n\n            //Ensure that the sin index is being search since documents and sins are in the same SOLR collection\n            query = 'index_id:sin_index AND '  + query.join(' OR ');\n            sinClient.get('collection1/select?fl=' + idField + '&q=' + query).then((response) => {\n                let claims = response.data.response.docs;\n                let ids = [];\n                for(const claim of claims) {\n                    const sinName = claim[idField];\n                    const sinId = sinName.substring(sinName.lastIndexOf('_') + 1);\n                    ids.push(sinId.substring(0, 4));\n                }\n\n                this.updateSinSelection({[TABLEFIELDMAPPING.sinList]: ids});\n                this.updateRouteParams(PARAMETERNAMES.term, this.$route.query[PARAMETERNAMES.term], 'claims');\n            }).catch((error) => {\n                console.warn(error)\n            });\n        },\n        formatClusters(response, category) {\n                if (response.data && response.data.length > 0) {\n                    let clusterResponse = formatClusterTableData(response.data, category);\n                    let dataAdded = false;\n                    if(clusterResponse) {\n                        this.updateKB(category, clusterResponse);\n                        dataAdded = true;\n                    }\n\n                    if (!dataAdded) {\n                        this.statusMessage = 'No results found';\n                    }\n                } else if (response.statusMessage) {\n                    this.statusMessage = response.statusMessage;\n                }\n        },\n        updateKB(category, data) {\n            this.updateDataKB(\n                {\n                    category: category,\n                    response: data\n                });\n        },\n        noQueryParams() {\n            return !this.getQueryParams[PARAMETERNAMES.term] && Object.keys(this.getQueryParams[PARAMETERNAMES.filter]).length === 0;\n        },\n        updateQueryResults() {\n            if(this.noQueryParams()) {\n                this.resetAllData();\n            }\n            else if(this.getQueryParams[PARAMETERNAMES.term] && Object.keys(this.getQueryParams[PARAMETERNAMES.term]).length > 0) {\n                this.executeQuery();\n            }\n            else {\n                this.queryAllData();\n            }\n        },\n        getIdByDisplayName(name) {\n            return this.queryIds.find(key => QUERYOPTIONS[key] === name);\n        },\n        setQueryType(type) {\n            this.presetQueryType = type;\n            this.updateSearchTerm({type: this.presetQueryType});\n        },\n        getDefaultTypeIdByRoute() {\n            return this.$route.path && (this.$route.path.includes(VUEROUTES.ta3) ? DATATYPES.sin.id : DATATYPES.argumentName.id);\n        }\n    }\n};\n\n"]}]}