{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/eval/IncidentSearch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/eval/IncidentSearch.vue","mtime":1640207172536},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["IncidentSearch.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2021 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  - Created by s.nordt on 6/23/21\n-->\n\n<template>\n    <div class=\"page-content\">\n        <div class=\"kb-details\">\n            <div class=\"kb-description-wrapper\">\n                <div class=\"element-list-header\">\n                    <div class=\"primary-page-header-left\">Incident Search</div>\n                    <div class=\"page-header-right\">\n                        <button id=\"compare_button\" class=\"dark-app-button\" @click=\"linkToIncidentDetails()\">\n                            <v-icon class=\"button-icon\">mdi-compare</v-icon>\n                            Incident Details\n                        </button>\n                        <button id=\"doc_button\" class=\"dark-app-button\" @click=\"linkToEvalDocSearch()\">\n                            <v-icon class=\"button-icon\">mdi-file-document-box-search-outline</v-icon>\n                            Document Search\n                        </button>\n                    </div>\n                </div>\n                <span class=\"element-list-header\">Begin query by adding a named entity, role, and/or an event type</span>\n                <div class=\"query-div\">\n                    <div class=\"query-field-column-wrapper\">\n                        <MultiSelectAutoComplete\n                             :items=\"namedEntities\"\n                             :required=\"false\"\n                             :placeholder=\"'Named Entities'\"\n                             :index=2\n                             :message=\"'No named entities available'\"\n                             @autoCompleteSubmission=\"updateEntityNames($event)\"\n                             @autoCompleteClear=\"updateEntityNames($event)\"\n                        ></MultiSelectAutoComplete>\n                        <MultiSelectAutoComplete\n                            :items=\"roles\"\n                            :required=\"false\"\n                            :placeholder=\"'Roles'\"\n                            :index=1\n                            :message=\"'No roles available'\"\n                            @autoCompleteSubmission=\"updateRoles($event)\"\n                            @autoCompleteClear=\"updateRoles($event)\"\n                        ></MultiSelectAutoComplete>\n                        <MultiSelectAutoComplete\n                             :items=\"eventTypes\"\n                             :required=\"false\"\n                             :placeholder=\"'Event Types'\"\n                             :index=0\n                             :message=\"'No event types available'\"\n                             @autoCompleteSubmission=\"updateEventTypes($event)\"\n                             @autoCompleteClear=\"updateEventTypes($event)\"\n                        ></MultiSelectAutoComplete>\n                    </div>\n                    <div class=\"footer-button-wrapper\">\n                        <div>\n                            <button type=\"submit\" class=\"dark-gray-submit-button\" @click.prevent=\"updateSearchForm(views.resetQuery.type)\">\n                                Reset\n                            </button>\n                            <button type=\"submit\" ref=\"searchButton\" class=\"dark-teal-submit-button\" @click.prevent=\"updateSearchForm(views.claimResults.type)\">\n                                Search\n                            </button>\n                        </div>\n                        <hr class=\"hr-fade\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        <Claims :ref=\"resultsAnchor\" :searchType=\"SEARCHTYPES.multi\" :claimSearchFilters=\"formattedClaims\" @completedSearch=completedSearch($event) ></Claims>\n    </div>\n</template>\n\n<script>\n    import MultiSelectAutoComplete from '@/components/MultiSelectAutoComplete';\n    import Claims from '@/views/analyze/Claims';\n    import {mapMutations} from 'vuex';\n    import {\n        SEARCHTYPES,\n        INCIDENTMAPPING,\n        getType,\n        getRole,\n        cleanName,\n        sortCaseInsensitive\n    } from '../../utils';\n    import API from '../../api';\n\n    //const currentRequests = new Map();\n    const CLAIMFILTERS = {\n        event: 'eventFilter',\n        entity: 'entityFilter',\n        role: 'roleFilter'\n    };\n\n    class View {\n        constructor (type, disabled) {\n            this.type = type;\n            this.disabled = disabled;\n        }\n    }\n\n     class Filter {\n         constructor() {\n             this.entityIds = [];\n             this.eventTypes = [];\n             this.roles = [];\n         }\n     }\n\n    class QueryValues {\n        constructor() {\n            this[CLAIMFILTERS.entity] = {};\n            this[CLAIMFILTERS.event] = {};\n            this[CLAIMFILTERS.role] = {};\n        }\n    }\n\n    function initialState() {\n        return {\n            claimFilters: {},\n            formattedFilters: [],\n            queryEventTypes : {},\n            queryNamedEntities: {},\n            queryRoles: {},\n            allQueryValues: {},\n            resultsAnchor: 'claim_results',\n            views: {\n                resetQuery: new View('resetQuery', false),\n                claimResults: new View('claimResults', true)\n            }\n        }\n    }\n    export default {\n        name: 'IncidentSearch',\n        components: {Claims, MultiSelectAutoComplete},\n        data: () => (initialState()),\n        created() {\n            this.CLAIMFILTERS = CLAIMFILTERS;\n            this.SEARCHTYPES = SEARCHTYPES;\n            this.INCIDENTMAPPING = INCIDENTMAPPING;\n        },\n        mounted() {\n            window.scroll({\n                top: 0,\n                behavior: 'smooth'\n            });\n            this.resetQueryForm();\n        },\n        computed: {\n           eventTypes() {\n               return this.getPrettyLabels(this.queryEventTypes);\n           },\n            namedEntities() {\n               return this.getPrettyLabels(this.queryNamedEntities);\n            },\n            roles() {\n                return this.getPrettyLabels(this.queryRoles);\n            },\n            formattedClaims() {\n               return this.formattedFilters;\n            },\n            sinIds() {\n                return INCIDENTMAPPING.map(v => v.id);\n            }\n        },\n        methods: {\n            ...mapMutations(['updateSinSelection']),\n            linkToEvalDocSearch () {\n                window.open('https://blackbox.verdi.nextcentury.com/', '_blank');\n            },\n            linkToIncidentDetails () {\n                this.$router.push('/eval/incident_detail');\n            },\n            completedSearch(value) {\n                this.$refs.searchButton.disabled = !value\n            },\n            getPrettyLabels(items) {\n                //remove duplicates and sort\n               return  Object.keys(items) ? sortCaseInsensitive([...Object.keys(items)]) : items;\n            },\n            scrollToResults() {\n                this.$nextTick(() => {\n                    const el = this.$refs[this.resultsAnchor].$el;\n                    if(el) {\n                        el.scrollIntoView({ top: 'position', behavior: 'smooth' })\n                    }\n                });\n            },\n            setClaimFilters(keys, querySet, filter) {\n                let filters = [];\n                for (const key of keys) {\n                    const URIs = this[querySet][key] ? this[querySet][key] : [];\n                    filters = [...filters, ...URIs];\n                }\n                this.claimFilters[filter] = [...new Set(filters)];\n            },\n            updateEventTypes(types) {\n                this.claimFilters.eventTypes = [];\n                if(types.length > 0) {\n                    this.setClaimFilters(types, 'queryEventTypes', 'eventTypes');\n                    const entityIds = [...new Set(this.claimFilters.entityIds.flatMap(entity => entity.ids))];\n                    const roleIds = [...new Set(this.claimFilters.roles.flatMap(role => role.ids))];\n                    const eventTypeIds = [...new Set(this.claimFilters.eventTypes.flatMap(e => e.ids))];\n                    //update roles and names for the claimFilter if they don't have selected values already\n                    if(this.claimFilters.roles.length === 0) {\n                        this.getRoles(eventTypeIds, entityIds);\n                    }\n                    if(this.claimFilters.entityIds.length === 0) {\n                        this.getEntityNames(eventTypeIds, roleIds);\n                    }\n                }\n                else {\n                    //no type filters submitted, reset roles and names\n                    this.getRoles();\n                    this.getEntityNames();\n                }\n            },\n            updateRoles(roles) {\n                this.claimFilters.roles = [];\n                if(roles.length > 0) {\n                    this.setClaimFilters(roles, 'queryRoles', 'roles');\n                    const entityIds = [...new Set(this.claimFilters.entityIds.flatMap(entity => entity.ids))];\n                    const roleIds = [...new Set(this.claimFilters.roles.flatMap(role => role.ids))];\n                    const eventTypeIds = [...new Set(this.claimFilters.eventTypes.flatMap(e => e.ids))];\n\n                    //update event types and names for the claimFilter if they don't have selected values already\n                    if(this.claimFilters.eventTypes.length === 0) {\n                        this.getEventTypes(roleIds, entityIds);\n                    }\n                    if(this.claimFilters.entityIds.length === 0) {\n                        this.getEntityNames(eventTypeIds, roleIds);\n                    }\n                }\n                else {\n                    //no type filters submitted, reset event types and names\n                    this.getEventTypes();\n                    this.getEntityNames();\n                }\n            },\n            updateEntityNames(names) {\n                this.claimFilters.entityIds = [];\n                if(names.length > 0) {\n                    //When events change, clear filters and add new ones\n                    this.setClaimFilters(names, 'queryNamedEntities', 'entityIds');\n                    const entityIds = [...new Set(this.claimFilters.entityIds.flatMap(entity => entity.ids))];\n                    const roleIds = [...new Set(this.claimFilters.roles.flatMap(role => role.ids))];\n                    const eventTypeIds = [...new Set(this.claimFilters.eventTypes.flatMap(e => e.ids))];\n\n                    //update event types and roles for the claimFilter if they don't have selected values already\n                    if(this.claimFilters.eventTypes.length === 0) {\n                        this.getEventTypes(roleIds,  entityIds);\n                    }\n                    if(this.claimFilters.roles.length === 0) {\n                        this.getRoles(eventTypeIds, entityIds);\n                    }\n                }\n                else {\n                    //no type filters submitted, reset event types and role\n                    this.getEventTypes();\n                    this.getRoles();\n                }\n            },\n            getEventTypes(roles = [], ids = []) {\n                const noFilters = roles.length === 0 && ids.length === 0;\n                //No need to re-run API for the original query values\n                if(Object.keys(this.allQueryValues[CLAIMFILTERS.event]).length > 0 && noFilters) {\n                    this.queryEventTypes = this.allQueryValues[CLAIMFILTERS.event];\n                }\n                else {\n                    API.getAllSinEventTypes(roles, ids).then(response => {\n                        if (response.data.length > 0) {\n                            //event type keys are the clean event types with URI removed\n                            let types = {};\n                            for (const type of response.data) {\n                                const transformedType = getType(type);\n                                const typeIdObject = {type: transformedType, ids: type};\n                                if (types.hasOwnProperty(transformedType)) {\n                                    types[transformedType] = [...types[transformedType], typeIdObject];\n                                }\n                                else {\n                                    types[transformedType] = [typeIdObject];\n                                }\n                            }\n                            //if there are no filters and the original query values haven't been set, set allQueryValues\n                            if (noFilters) {\n                                this.allQueryValues[CLAIMFILTERS.event] = types;\n                            }\n\n                            this.queryEventTypes = types;\n                        }\n                        else {\n                            this.queryEventTypes = {};\n                        }\n                    }).catch((error) => {\n                        console.warn(error)\n                    });\n                }\n            },\n            getRoles(eventTypes = [], ids = []) {\n                const noFilters = eventTypes.length === 0 && ids.length === 0;\n                //No need to re-run API for the original query values\n                if(Object.keys(this.allQueryValues[CLAIMFILTERS.role]).length > 0 && noFilters) {\n                    this.queryRoles = this.allQueryValues[CLAIMFILTERS.role];\n                }\n                else {\n                    API.getAllSinRoles(eventTypes, ids).then(response => {\n                        if(response.data.length > 0 ) {\n                            //role URIs will be grouped by the truncated role name\n                            let roles = {};\n                            for (const d of response.data) {\n                                const truncRole = getRole(d);\n                                const roleIdObject = {role: truncRole, ids: d};\n                                if(roles.hasOwnProperty(truncRole)) {\n                                    roles[truncRole] = [...roles[truncRole], roleIdObject];\n                                }\n                                else {\n                                    roles[truncRole] = [roleIdObject];\n                                }\n                            }\n                            //if there are no filters and the original query values haven't been set, set allQueryValues\n                            if(noFilters) {\n                                this.allQueryValues[CLAIMFILTERS.role] = roles;\n                            }\n                            this.queryRoles = roles;\n                        }\n                        else {\n                            this.queryRoles = {};\n                        }\n                    }).catch((error) => {\n                        console.warn(error)\n                    });\n                }\n            },\n            getEntityNames(eventTypes = [], roles = []) {\n                const noFilters = roles.length === 0 && eventTypes.length === 0;\n                //No need to re-run API for the original query values\n                if(Object.keys(this.allQueryValues[CLAIMFILTERS.entity]).length > 0 && noFilters) {\n                    this.queryNamedEntities = this.allQueryValues[CLAIMFILTERS.entity];\n                }\n                else {\n                    //event types and roles need to be cleaned up for the ElasticSearch API\n                    const esEventTypes = eventTypes.map(t => getType(t));\n                    const esRoles = roles.map(r => getRole(r));\n                    API.getAllSinNames(esEventTypes, esRoles).then(response => {\n                        if (response.data.length > 0) {\n                            //name keys are the actual name while the\n                            let names = {};\n                            for (const name of response.data) {\n                                //clean name in order to sort for multi-select autocomplete\n                                const canonicalName = cleanName(name.id);\n                                const nameIdObject = {name: name.id, ids: name.entities};\n                                if (names.hasOwnProperty(canonicalName)) {\n                                    //No longer using entityIds, names[canonicalName] = [...new Set([...names[canonicalName], ...name.entities])];\n                                    names[canonicalName] = [...names[canonicalName], nameIdObject];\n                                } else {\n                                    //No longer using entityIds, - names[canonicalName] = name.entities;\n                                    names[canonicalName] = [nameIdObject];\n                                }\n                            }\n\n                            //if there are no filters and the original query values haven't been set, set allQueryValues\n                            if (noFilters) {\n                                this.allQueryValues[CLAIMFILTERS.entity] = names;\n                            }\n\n                            this.queryNamedEntities = names;\n                        }\n                        else {\n                            this.queryNamedEntities = {};\n                        }\n                    }).catch((error) => {\n                        console.warn(error)\n                    });\n                }\n            },\n            updateSearchForm(viewType) {\n                if(viewType === this.views.resetQuery.type) {\n                    Object.assign(this.$data, initialState());\n                    this.resetQueryForm();\n                }\n                else if(viewType === this.views.claimResults.type) {\n                    this.views[viewType].disabled = false;\n                    this.formattedFilters = this.formatClaimFilters();\n                    this.scrollToResults();\n                }\n            },\n            resetQueryForm() {\n                this.claimFilters = new Filter();\n                this.allQueryValues = new QueryValues();\n\n                //fetch the query values for all SINs/Incidents\n                this.getEventTypes();\n                this.getRoles();\n                this.getEntityNames();\n            },\n            formatClaimFilters() {\n                let formattedFilters = [];\n                //event type filters were submitted\n                if(this.claimFilters.eventTypes.length > 0) {\n                    //for each event type add a filter object. For each role, add an arguments array to the event filter object. If entity ids exist, add them to the argument object in the array\n                    const eventTypes = [...new Set(this.claimFilters.eventTypes.flatMap(e => e.type))];\n                    for (const eventType of eventTypes) {\n                        if (this.claimFilters.roles.length > 0) {\n                            //Create arguments for each role and id pair\n                            const roles = [...new Set(this.claimFilters.roles.flatMap(r => r.role))];\n                            for (const role of roles) {\n                                if (this.claimFilters.entityIds.length > 0) {\n                                    //changing to names since ES query accepts names\n                                    const entityNames = [...new Set(this.claimFilters.entityIds.flatMap(entity => entity.name))];\n                                    for (const name of entityNames) {\n                                        let filterObject = {['eventType']: eventType, ['arguments'] : []};\n                                        let argumentObject = {['role'] : role};\n                                        argumentObject['ids'] = [name];\n                                        filterObject['arguments'].push(argumentObject);\n                                        formattedFilters.push(filterObject);\n                                    }\n                                }\n                                else {\n                                    let filterObject = {['eventType']: eventType, ['arguments'] : []};\n                                    filterObject['arguments'].push({['role'] : role});\n                                    formattedFilters.push(filterObject);\n                                }\n                            }\n                        }\n                        else if (this.claimFilters.entityIds.length > 0) {\n                            //changing to names since ES query accepts names\n                            const entityNames = [...new Set(this.claimFilters.entityIds.flatMap(entity => entity.name))];\n                            for(const name of entityNames) {\n                                let filterObject = {['eventType']: eventType, ['arguments'] : []};\n                                let argumentObject = {['ids'] : [name]};\n                                filterObject['arguments'].push(argumentObject);\n                                formattedFilters.push(filterObject);\n                            }\n                        }\n                        else {\n                            //only add event type\n                            let reformat = {['eventType']: eventType};\n                            formattedFilters.push(reformat);\n\n                        }\n                    }\n                }\n                //role filters were submitted without event types\n                else if(this.claimFilters.roles.length > 0) {\n                    //for each role and id pair, add an argument to the arguments array\n                    const roles = [...new Set(this.claimFilters.roles.flatMap(r => r.role))];\n                    for (const role of roles) {\n                        if (this.claimFilters.entityIds.length > 0) {\n                            //changing to names since ES query accepts names\n                            const entityNames = [...new Set(this.claimFilters.entityIds.flatMap(entity => entity.name))];\n                            for (const name of entityNames) {\n                                let filterObject = {['arguments'] : []};\n                                let argumentObject = {['role'] : role};\n                                argumentObject['ids'] = [name];\n                                filterObject['arguments'].push(argumentObject);\n                                formattedFilters.push(filterObject);\n                            }\n                        }\n                        else {\n                            let filterObject = {['arguments'] : []};\n                            filterObject['arguments'].push({['role'] : role});\n                            formattedFilters.push(filterObject);\n                        }\n                    }\n                }\n                //named entity filters were submitted without event types or roles\n                else if(this.claimFilters.entityIds.length > 0) {\n                    const entityNames = [...new Set(this.claimFilters.entityIds.flatMap(entity => entity.name))];\n                    for(const name of entityNames) {\n                        let filterObject = {['arguments'] : []};\n                        let argumentObject = {['ids'] : [name]};\n                        filterObject['arguments'].push(argumentObject);\n                        formattedFilters.push(filterObject);\n                    }\n                }\n                else {\n                    console.warn('no filters submitted')\n                }\n                return formattedFilters;\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .query-div {\n        @extend .kb-description-wrapper;\n        padding: 10px 0;\n        justify-content: space-between;\n    }\n\n    .query-field-column-wrapper{\n        @include flex-column-nowrap;\n        padding : 0 4px 6px 0;\n    }\n</style>\n\n"],"sourceRoot":"src/views/eval"}]}