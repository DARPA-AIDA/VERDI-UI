{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/ClaimFilterController.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/ClaimFilterController.vue","mtime":1640207172526},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ClaimFilterController.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  - Created by snordt on 12/7/21\n-->\n\n<template>\n    <div class=\"full-width\">\n        <div v-for=\"(component, cIndex) in Object.keys(componentDisplay)\" :key=\"component + cIndex\">\n            <div v-if=\"component === COMPONENTNAMES.multiSelect\">\n                <div v-for=\"(data, dIndex) in componentDisplay[component]\" :key=\"dIndex\" class=\"pad-horizontally\">\n                    <div class=\"multi-claim-autocomplete-input\">\n                        <MultiSelectAutoComplete class=\"multi-claim-filter-input\"\n                                                 :items=\"data.items\"\n                                                 :required=\"data.required\"\n                                                 :placeholder=\"data.placeholder\"\n                                                 :index=\"dIndex\"\n                                                 :message=\"'No ' + data.messageString +  ' available'\"\n                                                 :showAllChips=false\n                                                 @autoCompleteSubmission=\"updateMultiSelect($event,component, data.id)\"\n                                                 @autoCompleteClear=\"updateMultiSelect($event, component, data.id)\"\n                        ></MultiSelectAutoComplete>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import MultiSelectAutoComplete from '@/components/MultiSelectAutoComplete';\n    import { COMPONENTNAMES, DATATYPES, PARAMETERNAMES, arraysMatch } from '../utils';\n    import API from '../api';\n    import { mapActions, mapGetters, mapMutations, mapState } from 'vuex';\n    import RouteParametersMixin from '@/mixins/RouteParametersMixin';\n\n    class ComponentData {\n        constructor(id, items, placeholder, messageString, required) {\n            this.id = id;\n            this.items = items;\n            this.placeholder = placeholder;\n            this.messageString = messageString;\n            this.required = required;\n        }\n    }\n\n    function initialState() {\n        return {\n            displayData: [], //MultiSelect : [{id:'', items:[], placeholder:'', messageString: '', required: ''}]\n            responseData: [],\n            filterTypes: []\n        }\n    }\n\n    export default {\n        name: 'ClaimFilterController',\n        components: {MultiSelectAutoComplete},\n        mixins: [RouteParametersMixin],\n        data: () => (initialState()),\n        created() {\n            this.COMPONENTNAMES  = COMPONENTNAMES;\n            this.DATATYPES = DATATYPES;\n        },\n        mounted() {\n            this.resetQueryForm();\n        },\n        computed: {\n            ...mapState(['filterReset', 'filters']),\n            ...mapGetters(['getFilterByType', 'getFilterKeys']),\n            componentDisplay() {\n                if(this.filterReset) {\n                    this.resetQueryForm();\n                }\n                return this.displayData;\n            }\n        },\n        methods: {\n            ...mapMutations(['updateFilterReset', 'updateFilterSubmission']),\n            ...mapActions(['updateFilters', 'removeFilter']),\n            updateMultiSelect(values, componentName, filterType) {\n                //update displayData with selected values\n                if(values.length > 0) {\n                    let selectedData = [];\n\n                    //find the data that matches the selected values\n                    for (const value of values) {\n                        selectedData = [...selectedData, ...this.responseData.filter(d => d[filterType] === value)];\n                    }\n\n                    for (const type of this.filterTypes) {\n                        //This code allows for updating the options for all other select components when one component is updated\n                        if(type !== filterType) {\n                            let filterIndex = this.displayData[componentName].findIndex(d => d.id === type);\n                            //create a deep clone of the displayData for this type and collect unique values from the selected data\n                            let selectedObject = {...this.displayData[componentName].find(d => d.id === type)};\n                            selectedObject.items = [...new Set(selectedData.map(d => d[type]))];\n\n                            //If the component items do not match the selectedData items, update the component items with the selectedData values\n                            if(!arraysMatch(this.displayData[componentName][filterIndex].items, selectedObject.items)) {\n                                this.displayData[componentName][filterIndex].items = selectedObject.items;\n                            }\n\n                            //the component items should all be valid based on the selectedData. If they are not update filters with only the valid component items\n                            const typeFilterExists = this.getFilterKeys.find(k => k === type);\n                            if(typeFilterExists) {\n                                if(!arraysMatch(this.filters[type], selectedObject.items)) {\n                                    const diffValues = this.filters[type].filter(element => !selectedObject.items.includes(element));\n                                    if(diffValues.length === 0) {\n                                        this.updateFilters({type: type, filter: selectedObject.items});\n                                    }\n                                    else {\n                                        const validValues = this.filters[type].filter(element => !diffValues.includes(element));\n                                        this.updateFilters({type: type, filter: validValues});\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            //update the filter values for the current component selections\n                            this.updateFilters({type: type, filter: values});\n                        }\n                    }\n                }\n                else {\n                    const existingFilters = this.getFilterKeys.filter(k => k !== filterType);\n                    for (const type of this.filterTypes) {\n                         if (type !== filterType) {\n                             let filterIndex = this.displayData[componentName].findIndex(d => d.id === type);\n                             //create a deep clone of the displayData for this type and collect unique values from the original data\n                             let responseObject = {...this.displayData[componentName].find(d => d.id === type)};\n                             responseObject.items = [...new Set(this.responseData.map(d => d[type]))];\n                             //If the component items do not match the original items, update the component items with the original values\n                             if (!existingFilters && !arraysMatch(this.displayData[componentName][filterIndex].items, responseObject.items)) {\n                                 this.displayData[componentName][filterIndex].items = responseObject.items;\n                             }\n                         } else if (this.getFilterByType(type) && this.getFilterByType(type).length > 0) {\n                             this.removeFilter({type: type});\n                         }\n                    }\n                }\n            },\n            resetQueryForm() {\n                //fetch the query values for all claim frames\n                Object.assign(this.$data, initialState());\n                this.filterTypes = [DATATYPES.topic.id, DATATYPES.subtopic.id];\n                this.getFilterValues();\n\n                //update the store variables in order to remove the filters\n                for (const filter of this.filterTypes) {\n                    this.removeFilter({type: filter});\n                }\n                this.updateFilterReset(false);\n                this.updateFilterSubmission(true);\n                this.updateRouteParams(PARAMETERNAMES.filter);\n            },\n            getFilterValues() {\n                //As more components get added, this code will need to change in order to support API requests for the various components.\n                const componentName = COMPONENTNAMES.multiSelect;\n                API.getClaimFrameFilterValues().then(response => {\n                    if (response.data.length > 0) {\n                        this.displayData = {[componentName] : []};\n                        this.responseData = response.data;\n                        for (const type of [DATATYPES.topic, DATATYPES.subtopic]) {\n                            //remove duplicate values by creating a new set\n                            this.displayData[componentName].push(\n                                new ComponentData(\n                                    type.id,\n                                    [...new Set(response.data.map(k => k[type.id]))],\n                                    type.display,\n                                    type.display.toLowerCase(),\n                                    false\n                                )\n                            )\n                        }\n                    }\n                    else {\n                        this.displayData = [];\n                    }\n                }).catch((error) => {\n                    console.warn(error)\n                });\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    .multi-claim-filter-input .v-chip .v-chip__content {\n        display: inline-block !important;\n        overflow: hidden;\n        white-space: nowrap;\n        direction: ltr;\n        text-overflow: ellipsis;\n        line-height: 2.3em;\n        vertical-align: middle;\n    }\n</style>\n"],"sourceRoot":"src/components"}]}