{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/claims/ClaimFrameDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/claims/ClaimFrameDetails.vue","mtime":1641326767935},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ClaimFrameDetails.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2021 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  - Created by Nate Deml on 12/07/21\n-->\n\n<template>\n    <div class=\"page-content\">\n        <div v-if=\"loading===true\" class=\"loading-section\">\n            <v-progress-linear indeterminate></v-progress-linear>\n            <div class=\"loading-message-clear\">{{statusMessage}}</div>\n        </div>\n        <div>\n            <div class=\"tableContainer\">\n                <div class=\"kb-details\">\n                    <div class=\"kb-description-wrapper\">\n                        <div class=\"element-list-header\">\n                            <div class=\"primary-page-header-left\">Claim Frame Details</div>\n                        </div>\n                    </div>\n                </div>\n                <table class=\"claimFrameDetailsTable\">\n                    <tr>\n                        <td class=\"tableKeyCol\">Topic</td>\n                        <td class=\"tableKValCol\">{{topic}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">Subtopic</td>\n                        <td class=\"tableKValCol\">{{subTopic}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">Claim Template</td>\n                        <td class=\"tableKValCol\">{{template}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">Decription</td>\n                        <td class=\"tableKValCol\">{{description}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">Location</td>\n                        <td class=\"tableKValCol\">{{location}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">Importance</td>\n                        <td class=\"tableKValCol\">{{importance}}%</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">Date:Time</td>\n                        <td class=\"tableKValCol\">{{dateTime}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">Epestemic</td>\n                        <td class=\"tableKValCol\">{{epestemic}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">Sentiment</td>\n                        <td class=\"tableKValCol\">{{sentiment}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"tableKeyCol\">System</td>\n                        <td class=\"tableKValCol\">{{system}}</td>\n                    </tr>\n                </table>\n                <br/>\n                <DataTable\n                    :data=\"this.xVaribleData\"\n                    :tableConfiguration=\"buildXVarTableConfiguration()\"\n                    :statusMessage=\"statusMessage\"\n                    :paging=\"paging\"\n                    :hideFooter=true\n                ></DataTable>\n\n                <DataTable\n                    :data=\"this.provenanceData\"\n                    :tableConfiguration=\"buildProvenanceTableConfiguration()\"\n                    :statusMessage=\"statusMessage\"\n                    :paging=\"paging\"\n                    :hideFooter=true\n                ></DataTable>\n\n                <br>\n                <h3>Perspective</h3>\n\n                <DataTable\n                    :data=\"this.dupClaimsData\"\n                    :tableConfiguration=\"buildRelatedClaimTableConfiguration('Identical Claims', this.dupClaimTopic, this.dupClaimSubtopic , this.dupClaimTemplate)\"\n                    :statusMessage=\"statusMessage\"\n                    :paging=\"paging\"\n                    :hideFooter=true\n                ></DataTable>\n\n                <DataTable\n                    :data=\"this.suppClaimsData\"\n                    :tableConfiguration=\"buildRelatedClaimTableConfiguration('Supporting Claims', this.suppClaimTopic, this.suppClaimSubtopic, this.suppClaimTemplate)\"\n                    :statusMessage=\"statusMessage\"\n                    :paging=\"paging\"\n                    :hideFooter=true\n                ></DataTable>\n\n                <DataTable\n                    :data=\"this.relClaimsData\"\n                    :tableConfiguration=\"buildRelatedClaimTableConfiguration('Related Claims', this.relClaimTopic, this.relClaimSubtopic, this.relClaimTemplate)\"\n                    :statusMessage=\"statusMessage\"\n                    :paging=\"paging\"\n                    :hideFooter=true\n                ></DataTable>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import API from '../../api';\n    import DataTable from '@/components/DataTable';\n    import {\n        TABLEFIELDMAPPING,\n        TABLESELECTIONS,\n        NODATAMESSAGE,\n        TableSettings,\n        HeaderConfig,\n        getDateString,\n        makePercentage,\n        SecondaryExpand,\n        getId\n    } from '../../utils';\n\n    function initialState() {\n        return {\n            claim: null,\n            loading: false,\n            statusMessage: '',\n            topic: '',\n            subTopic: '',\n            template: '',\n            description: '',\n            xVaribleData: [],\n            provenanceData: [],\n            dupClaimsData: [],\n            dupClaimTopic: '',\n            dupClaimSubtopic: '',\n            dupClaimTemplate: '',\n            suppClaimsData: [],\n            suppClaimTopic: '',\n            suppClaimSubtopic: '',\n            suppClaimTemplate: '',\n            relClaimsData: [],\n            relClaimTopic: '',\n            relClaimSubtopic: '',\n            relClaimTemplate: '',\n            claimerData: [],\n            claimerAffilationData: [],\n            primaryHeaderData: [],\n            location: 'here',\n            importance: '',\n            dateTime: '',\n            tableData: null,\n            epestemic: '',\n            sentiment: '',\n            system: '',\n            paging: {[TABLESELECTIONS.itemsPerPage]:'All'}\n        }\n    }\n\n    export default {\n  components: { DataTable },\n        name: 'claimFrameDetails',\n        data: () => (initialState()),\n        created() {\n            this.NODATAMESSAGE = NODATAMESSAGE;\n            this.setClaimFrameDetails(this.$route.params.claimid);\n        },\n        methods: {\n            setClaimFrameDetails(claimFrameId) {\n                API.getClaimFrameById(claimFrameId).then(response => {\n                    const claimFrameDetails = response.data\n                    // eslint-disable-next-line no-console\n                    console.log(claimFrameDetails)\n\n                    if(Object.keys(claimFrameDetails).length > 0) {\n                        this.topic = claimFrameDetails.topic\n                        this.subTopic = claimFrameDetails.subtopic\n                        this.template = claimFrameDetails.claimTemplate\n                        this.description = claimFrameDetails.description\n                        this.importance = makePercentage(claimFrameDetails.importance, 0)\n                        this.tableData = claimFrameDetails.components\n                        this.epestemic = claimFrameDetails.epistemic\n                        this.sentiment = claimFrameDetails.sentiment\n                        this.system = claimFrameDetails.system\n                        this.dateTime = getDateString(claimFrameDetails.dates[0])\n\n                        for (const component of claimFrameDetails.components) {\n                            if(component.propertyName === 'xVariable') {\n                                for (const propComponent of component.values) {\n                                    let tempXVar = {}\n\n                                    tempXVar[TABLEFIELDMAPPING.names] = propComponent.componentName\n                                    tempXVar[TABLEFIELDMAPPING.id] = propComponent.componentId\n                                    tempXVar[TABLEFIELDMAPPING.types] = propComponent.componentTypes\n                                    tempXVar[TABLEFIELDMAPPING.provenance] = propComponent.componentProvenance\n                                    tempXVar[TABLEFIELDMAPPING.ke] = propComponent.componentKE\n\n                                    this.xVaribleData.push(tempXVar)\n                                }\n                            } else if(component.propertyName === 'claimer') {\n                                for (const propComponent of component.values) {\n                                    let tempClaimer = {}\n\n                                    tempClaimer[TABLEFIELDMAPPING.category] = 'Claimer'\n                                    tempClaimer[TABLEFIELDMAPPING.names] = propComponent.componentName\n                                    tempClaimer[TABLEFIELDMAPPING.id] = propComponent.componentId\n                                    tempClaimer[TABLEFIELDMAPPING.types] = propComponent.componentTypes\n                                    tempClaimer[TABLEFIELDMAPPING.provenance] = propComponent.componentProvenance\n                                    tempClaimer[TABLEFIELDMAPPING.ke] = getId(propComponent.componentKE)\n\n                                    if(this.primaryHeaderData[TABLEFIELDMAPPING.claimerList] == undefined) {\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.claimerList] = [propComponent.componentName]\n                                    } else {\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.claimerList].push(propComponent.componentName)\n                                    }\n\n                                    this.claimerData.push(tempClaimer)\n                                }\n                            } else if(component.propertyName === 'claimerAffiliation') {\n                                for (const propComponent of component.values) {\n                                    let tempClaimerAff = {}\n\n                                    tempClaimerAff[TABLEFIELDMAPPING.category] = 'Claimer Affiliation'\n                                    tempClaimerAff[TABLEFIELDMAPPING.names] = propComponent.componentName\n                                    tempClaimerAff[TABLEFIELDMAPPING.id] = propComponent.componentId\n                                    tempClaimerAff[TABLEFIELDMAPPING.types] = propComponent.componentTypes\n                                    tempClaimerAff[TABLEFIELDMAPPING.provenance] = propComponent.componentProvenance\n                                    tempClaimerAff[TABLEFIELDMAPPING.ke] = getId(propComponent.componentKE)\n\n                                    if(this.primaryHeaderData[TABLEFIELDMAPPING.affiliation] == undefined) {\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.affiliation] = [propComponent.componentName]\n                                    } else {\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.affiliation].push(propComponent.componentName)\n                                    }\n\n                                    this.claimerAffilationData.push(tempClaimerAff)\n                                }\n                            } else if(component.propertyName === 'claimLocation') {\n                                this.location = component.values[0].componentName\n                            }\n                        }\n\n                        for (const tempProvenance of claimFrameDetails.provenances) {\n                            if(tempProvenance.propertyName === 'associatedKEs') {\n                                for (const provArray of tempProvenance.values) {\n                                    if(this.primaryHeaderData[TABLEFIELDMAPPING.variableList] == undefined) {\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.variableList] = []\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.variableList].push(getId(provArray.keId))\n                                    } else {\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.variableList].push(getId(provArray.keId))\n                                    }\n                                }\n                            } else if(tempProvenance.propertyName === 'claimSemantics') {\n                                for (const provArray of tempProvenance.values) {\n                                    if(this.primaryHeaderData[TABLEFIELDMAPPING.semantics] == undefined) {\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.semantics] = []\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.semantics].push(getId(provArray.keId))\n                                    } else {\n                                        this.primaryHeaderData[TABLEFIELDMAPPING.semantics].push(getId(provArray.keId))\n                                    }\n                                }\n                            }\n                        }\n\n                        let secondaryData = this.claimerData;\n                        secondaryData = secondaryData.concat(this.claimerAffilationData);\n                        this.primaryHeaderData[TABLEFIELDMAPPING.entityList] = claimFrameDetails.sourceDocument.id\n\n                        this.primaryHeaderData[TABLEFIELDMAPPING.documentList] = secondaryData;\n\n                        // this.provenanceData = secondaryData\n                        this.provenanceData = [this.primaryHeaderData];\n\n                        // eslint-disable-next-line no-console\n                        console.log(this.primaryHeaderData)\n\n                        for (const relatedClaims of claimFrameDetails.relations) {\n                            if(relatedClaims.propertyName == 'identicalClaims') {\n                                for (const relatedValues of relatedClaims.values) {\n                                    let tempDupClaim = {}\n\n                                    this.dupClaimTopic = relatedValues.topic\n                                    this.dupClaimSubtopic = relatedValues.subtopic\n                                    this.dupClaimTemplate = relatedValues.claimTemplate\n\n                                    tempDupClaim[TABLEFIELDMAPPING.headline] = relatedValues.description\n                                    tempDupClaim[TABLEFIELDMAPPING.variableList] = 'X'\n                                    tempDupClaim[TABLEFIELDMAPPING.location] = 'place'\n                                    tempDupClaim[TABLEFIELDMAPPING.percentage] = 'important'\n                                    tempDupClaim[TABLEFIELDMAPPING.dates] = 'D'\n\n                                    this.dupClaimsData.push(tempDupClaim)\n                                }\n                            } else if(relatedClaims.propertyName == 'supportingClaims') {\n                                for (const relatedValues of relatedClaims.values) {\n                                    let tempSuppClaim = {}\n\n                                    this.suppClaimTopic = relatedValues.topic\n                                    this.suppClaimSubtopic = relatedValues.subtopic\n                                    this.suppClaimTemplate = relatedValues.claimTemplate\n\n                                    tempSuppClaim[TABLEFIELDMAPPING.headline] = relatedValues.description\n                                    tempSuppClaim[TABLEFIELDMAPPING.variableList] = 'X'\n                                    tempSuppClaim[TABLEFIELDMAPPING.location] = 'place'\n                                    tempSuppClaim[TABLEFIELDMAPPING.percentage] = 'important'\n                                    tempSuppClaim[TABLEFIELDMAPPING.dates] = 'd'\n\n                                    this.suppClaimsData.push(tempSuppClaim)\n                                }\n                            } else if(relatedClaims.propertyName == 'relatedClaims') {\n                                for (const relatedValues of relatedClaims.values) {\n                                    let tempRelClaim = {}\n\n                                    this.relClaimTopic = relatedValues.topic\n                                    this.relClaimSubtopic = relatedValues.subtopic\n                                    this.relClaimTemplate = relatedValues.claimTemplate\n\n                                    tempRelClaim[TABLEFIELDMAPPING.headline] = relatedValues.description\n                                    tempRelClaim[TABLEFIELDMAPPING.variableList] = 'X'\n                                    tempRelClaim[TABLEFIELDMAPPING.location] = 'place'\n                                    tempRelClaim[TABLEFIELDMAPPING.percentage] = 'important'\n                                    tempRelClaim[TABLEFIELDMAPPING.dates] = 'd'\n\n                                    this.relClaimsData.push(tempRelClaim)\n                                }\n                            }\n                        }\n\n                    } else {\n                        this.statusMessage = this.NODATAMESSAGE;\n                        this.loading = false;\n                    }\n                })\n            },\n            buildXVarTableConfiguration() {\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.id, false, 'X-varible', '', false, false, false, false, false, TABLEFIELDMAPPING.percentage, true),\n                    primaryHeaders: [\n                        new HeaderConfig('Name', 'start', true, TABLEFIELDMAPPING.names),\n                        new HeaderConfig('Identity', 'start', true, TABLEFIELDMAPPING.id),\n                        new HeaderConfig('Type', 'start', true, TABLEFIELDMAPPING.types),\n                        new HeaderConfig('Provenance', 'start', true, TABLEFIELDMAPPING.provenance),\n                        new HeaderConfig('KE', 'start', true, TABLEFIELDMAPPING.ke)\n                    ]\n                };\n            },\n            buildProvenanceTableConfiguration() {\n                // Use primarery and secondary headers format the data for the secondary headers.\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.id, true, 'Provenance', '', false, false, false, false, false, TABLEFIELDMAPPING.percentage, true),\n                    primaryHeaders: [\n                        new HeaderConfig('Claimer', 'start', true, TABLEFIELDMAPPING.claimerList),\n                        new HeaderConfig('Claimer Affiliation', 'start', true, TABLEFIELDMAPPING.affiliation),\n                        new HeaderConfig('Source', 'start', true, TABLEFIELDMAPPING.entityList),\n                        new HeaderConfig('Associated KE', 'start', true, TABLEFIELDMAPPING.variableList),\n                        new HeaderConfig('Claim Semantics', 'start', true, TABLEFIELDMAPPING.semantics),\n                        new HeaderConfig('', 'center', false, 'data-table-expand')\n                    ],\n                    secondaryHeaders: {\n                        expanded: new SecondaryExpand('', TABLEFIELDMAPPING.documentList,\n                            [\n                                new HeaderConfig('Component', 'start', false, TABLEFIELDMAPPING.category),\n                                new HeaderConfig('Name', 'start', false, TABLEFIELDMAPPING.names),\n                                new HeaderConfig('Identity', 'start', false, TABLEFIELDMAPPING.id),\n                                new HeaderConfig('Type', 'start', false, TABLEFIELDMAPPING.types),\n                                new HeaderConfig('Provenance', 'start', false, TABLEFIELDMAPPING.provenance),\n                                new HeaderConfig('KE', 'start', false, TABLEFIELDMAPPING.ke)\n                            ]\n                        )\n                    }\n                };\n            },\n            buildRelatedClaimTableConfiguration(relationship, topic, subtopic, template) {\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.id, false, relationship, topic + ' - ' + subtopic + ' - ' + template, false, false, false, false, false, TABLEFIELDMAPPING.percentage, true),\n                    primaryHeaders: [\n                        new HeaderConfig('Description', 'start', true, TABLEFIELDMAPPING.headline),\n                        new HeaderConfig('X-variable', 'start', true, TABLEFIELDMAPPING.variableList),\n                        new HeaderConfig('Location', 'start', true, TABLEFIELDMAPPING.location),\n                        new HeaderConfig('Importance', 'start', true, TABLEFIELDMAPPING.percentage),\n                        new HeaderConfig('Date:Time', 'start', true, TABLEFIELDMAPPING.dates)\n                    ]\n                };\n            }\n        },\n    }\n</script>\n"],"sourceRoot":"src/views/claims"}]}