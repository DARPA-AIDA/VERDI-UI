{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/forms/HypothesisDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/components/forms/HypothesisDialog.vue","mtime":1640207172531},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["HypothesisDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2019 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  -->\n\n<template>\n    <Dialog position=\"absolute\" :showDialog=\"openDialog\" @closeDialog=\"resetDialog()\">\n        <template #title>Build a Hypothesis:</template>\n        <template #breadcrumbs><BreadCrumbs :crumbs=\"crumbs\" :clickable=\"false\" @crumbSelection=\"setActiveCrumb($event)\"></BreadCrumbs></template>\n        <template #description>\n            <span class=\"form-label bold-text\"><label>Hypothesis ID</label></span>\n            <p>{{hypothesisSelection[TABLEFIELDMAPPING.idUri]}}</p>\n            <div v-if=\"crumbSelection !== crumbs.addCategory.id\">\n                <span class=\"form-label bold-text\"><label>{{selectedCatgory}} ID</label></span>\n                <p>{{selectedCluster}}</p>\n                <span class=\"form-label bold-text\"><label>{{selectedCatgory}} Description</label></span>\n                <textarea v-if=\"crumbSelection === crumbs.addArgument.id\" class=\"dialog-text-input\" rows=\"2\" cols=\"50\" v-model=\"description\"></textarea>\n                <div v-if=\"crumbSelection === crumbs.review.id\" class=\"row-wrapper-flex\">\n                    <p class=\"page-header-left\">{{description}}</p>\n                    <span class=\"icon-wrapper-div page-header-right\" @click.prevent=\"updateDialogPage(paging.previous)\">\n                        <InfoTooltip :iconStyle=\"'dark-header'\" :icon=\"'mdi-pencil'\" :message=\"'Edit Description'\" ></InfoTooltip>\n                    </span>\n                </div>\n            </div>\n        </template>\n        <template #body-label><div v-if=\"crumbSelection === crumbs.addCategory.id\" class=\"body-label\">Select the {{category}} from the knowledge base to add to the hypothesis</div></template>\n        <template #body>\n            <div v-if=\"crumbSelection === crumbs.addCategory.id\">\n                <div class=\"filter-field-wrapper\">\n                    <div class=\"filter-field-label\"><label>Type: </label></div>\n                    <div class=\"filter-wrapper flex-grow-1\">\n                        <div class=\"filter-input-box\">\n                            <AutoComplete class=\"filter-input\"\n                                          :inputValue=\"selectedType\"\n                                          :items=\"types\"\n                                          :required=\"false\"\n                                          :placeholder=\"'Search ' + selectedCatgory + ' by Type'\"\n                                          :enterKeySubmit=false\n                                          @autoCompleteSubmission=\"onFilterSubmission({[category]: $event})\"\n                                          @autoCompleteClear=\"onFilterDelete({[category]: $event})\"\n                            ></AutoComplete>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"filter-field-wrapper\">\n                    <span class=\"filter-field-label\"><label>Argument: </label></span>\n                    <div class=\"filter-wrapper flex-grow-1\">\n                        <div class=\"filter-input-box\">\n                            <AutoComplete class=\"filter-input\"\n                                          :inputValue=\"selectedArgumentName\"\n                                          :items=\"argumentNames\"\n                                          :required=\"false\"\n                                          :placeholder=\"'Search ' + selectedCatgory + ' by Argument Name'\"\n                                          :enterKeySubmit=false\n                                          @autoCompleteInputChange=\"!selectedType && argumentInputChange($event)\"\n                                          @autoCompleteSubmission=\"onFilterSubmission({[DATATYPES.argumentName.id]: $event})\"\n                                          @autoCompleteClear=\"onFilterDelete({[DATATYPES.argumentName.id]: $event})\"\n                            ></AutoComplete>\n                        </div>\n                    </div>\n                </div>\n                <span class=\"validation-wrapper\">\n                    <div class=\"validation-field-wrapper\">\n                        <span class=\"filter-field-label\"><label><span class=\"red--text\">* </span>{{selectedCatgory}}:</label></span>\n                        <div class=\"filter-wrapper flex-grow-1\">\n                            <div class=\"filter-input-box\">\n                                <AutoComplete class=\"filter-input\"\n                                              :inputValue=\"selectedCluster\"\n                                              :items=\"clusters\"\n                                              :required=\"requestToValidate\"\n                                              :message=\"loadingMessage\"\n                                              :placeholder=\"'Select ' + selectedCatgory + ' by Cluster ID'\"\n                                              :enterKeySubmit=false\n                                              @autoCompleteInputChange=\"getClusterDetails($event)\"\n                                              @autoCompleteSubmission=\"onClusterSubmission()\"\n                                              @autoCompleteClear=\"clusterId = $event\"\n                                ></AutoComplete>\n                            </div>\n                        </div>\n                    </div>\n                    <ValidationTooltip :icon=\"'mdi-alert-box'\" :message=\"'Please fill out this field.'\" :displayClass=\"'autocomplete'\" :showTooltip=\"validate\" @updateShowTooltip=\"updateShowTooltip($event)\"></ValidationTooltip>\n                </span>\n            </div>\n            <div v-if=\"crumbSelection !== crumbs.addCategory.id\">\n                <span class=\"form-label bold-text\"><label>Arguments ({{selectedClusterArguments.length}})</label></span>\n                <SimpleTable class=\"table-scroll-display\" :headers=\"argumentTableHeaders\" :data=\"selectedClusterArguments\" :scrollOn=\"false\"></SimpleTable>\n            </div>\n            <div class=\"dialog-button-wrapper\">\n                <button v-if=\"crumbSelection !== crumbs.review.id\" type=\"submit\" class=\"light-gray-submit-button\" @click.stop=\"resetDialog()\">\n                    Cancel\n                </button>\n                <button v-if=\"crumbSelection === crumbs.review.id\" type=\"submit\" class=\"light-teal-submit-button\" @click=\"updateDialogPage(paging.add)\">\n                    Add Another\n                </button>\n                <button v-if=\"crumbSelection !== crumbs.addCategory.id\" type=\"submit\" class=\"dark-teal-submit-button\" @click=\"updateDialogPage(paging.previous)\">\n                    Previous\n                </button>\n                <button v-if=\"crumbSelection !== crumbs.review.id\" type=\"submit\" class=\"dark-teal-submit-button\" @click=\"updateDialogPage(paging.next)\">\n                    Next\n                </button>\n                <button v-if=\"crumbSelection === crumbs.review.id\" type=\"submit\" class=\"dark-teal-submit-button\" @click.stop=\"addCluster()\">\n                    Done\n                </button>\n            </div>\n        </template>\n    </Dialog>\n</template>\n\n<script>\n    import {\n        TABLEFIELDMAPPING,\n        DATATYPES,\n        NODATAMESSAGE,\n        LOADINGMESSAGE,\n        getSortedTypes,\n        sortCaseInsensitive,\n        formatPrototypeArguments,\n        upperFirstLetter,\n        HeaderConfig\n    } from '../../utils';\n    import Dialog from '@/components/Dialog';\n    import BreadCrumbs from '@/components/BreadCrumbs';\n    import AutoComplete from '@/components/AutoComplete';\n    import SimpleTable from '@/components/SimpleTable';\n    import InfoTooltip from '@/components/InfoTooltip';\n    import QuerySubmissionMixin from '@/mixins/QuerySubmissionMixin';\n    import API from '../../api';\n    import ValidationTooltip from '@/components/ValidationTooltip';\n    import {mapState} from 'vuex';\n\n\n\n    function initialState() {\n        return {\n            TABLEFIELDMAPPING: TABLEFIELDMAPPING,\n            DATATYPES: DATATYPES,\n            clusterOptions: [],\n            typeOptions: [],\n            argumentOptions: [],\n            clusterId: null,\n            typeValue: null,\n            argumentValue: null,\n            activeCrumb: null,\n            categoryDescription: null,\n            query: {},\n            argumentTableHeaders : [\n                new HeaderConfig('Name', 'start', false, TABLEFIELDMAPPING.headline),\n                new HeaderConfig('Roles', 'start', false, TABLEFIELDMAPPING.roles),\n                new HeaderConfig('Types', 'start', false, TABLEFIELDMAPPING.types)\n            ],\n            selectedClusterDetails: {},\n            selectedClusterArguments: [],\n            requestToValidate: false,\n            paging: { previous: 'previous', next: 'next', add: 'add'},\n            loadingMessage: NODATAMESSAGE\n        }\n    }\n\n    export default {\n        name: 'HypothesisDialog',\n        mixins: [QuerySubmissionMixin],\n        components: {BreadCrumbs, AutoComplete, Dialog, SimpleTable, ValidationTooltip, InfoTooltip},\n        props: {\n            category: String,\n            showDialog: Boolean,\n            crumbs: Object\n        },\n        data: () => (initialState()),\n        computed: {\n            ...mapState(['hypothesisSelection', 'categoryArguments', 'categoryTypes', 'knowledgeBase', 'defaultKbDataSource']),\n            clusters() {\n                return this.clusterOptions.length === 0 && this.knowledgeBase[this.category] ? Object.keys(this.knowledgeBase[this.category]) : this.clusterOptions;\n            },\n            types() {\n                return this.typeOptions.length === 0 ? this.categoryTypes[this.category] : this.typeOptions;\n            },\n            argumentNames() {\n                return this.argumentOptions.length === 0 ? this.categoryArguments[this.category] : this.argumentOptions;\n            },\n            selectedCluster() {\n                return this.clusterId;\n            },\n            selectedCatgory() {\n                return upperFirstLetter(this.category)\n            },\n            selectedType() {\n               return this.typeValue;\n            },\n            selectedArgumentName() {\n                return this.argumentValue;\n            },\n            openDialog() {\n                this.setActiveCrumb(this.crumbs.addCategory.id);\n                return this.showDialog;\n            },\n            crumbSelection() {\n                return this.activeCrumb;\n            },\n            validate() {\n                return this.requestToValidate;\n            },\n            description: {\n                get: function () {\n                    return this.categoryDescription != null ? this.categoryDescription : this.clusterId;\n                },\n                set: function (v) {\n                    this.categoryDescription = v;\n                }\n            }\n        },\n        methods: {\n            argumentInputChange(text) {\n                //To requery for arguments - the argument name must be longer than 2 characters,\n                // not equal to the previously entered argument name\n                if(text && text.length > 2 && text !== this.argumentValue) {\n                    API.getCategoryArguments(\n                        this.defaultKbDataSource, this.category, text\n                    ).then((response) => {\n                        this.argumentOptions = response.data;\n                    });\n                }\n            },\n            onFilterSubmission(selection) {\n                //if a type or argument name is selected, set the value for the autocomplete input\n                // and add it to the query object\n                if(selection[DATATYPES.argumentName.id]) {\n                    this.argumentValue = selection[DATATYPES.argumentName.id];\n                    this.query[DATATYPES.argumentName.id] = this.argumentValue;\n                    this.getClusters();\n                }\n                else if(selection[this.category]) {\n                    this.typeValue = selection[this.category];\n                    this.query[this.category] = this.typeValue;\n                    this.getClusters();\n                }\n            },\n            onFilterDelete(selection) {\n                //empty types or arguments so that the values can be reset in the computed variables\n                if(selection[DATATYPES.argumentName.id] === '') {\n                    delete this.query[DATATYPES.argumentName.id];\n                    this.argumentValue = null;\n                    this.typeOptions = [];\n                }\n                else if(selection[this.category] === '') {\n                    delete this.query[this.category];\n                    this.typeValue = null;\n                    this.argumentOptions = [];\n                }\n                this.getClusters();\n\n            },\n            onClusterSubmission() {\n                if(!this.clusterId || this.clusterId === '' && Object.keys(this.selectedClusterDetails).length === 0) {\n                    this.getClusterDetails(this.clusterId);\n                }\n            },\n            getClusters() {\n                //query for clusters of a specific type and/or argument\n                API.getClustersByQueryParams(\n                    this.defaultKbDataSource, this.category, this.query\n                ).then((response) => {\n                    this.clusterOptions = [];\n                    this.clusterId = null;\n                    //if there is no current argument selected, update arguments\n                    //if there is no current type selected, update types\n                    if(response.data) {\n                        for(const r of response.data) {\n                            this.clusterOptions.push(r.cluster);\n                            if(!this.typeValue) {\n                                this.typeOptions = [...this.typeOptions, ...r.types];\n                            }\n                            if(!this.argumentValue) {\n                                this.argumentOptions = [...this.argumentOptions, ...r.names];\n                            }\n                        }\n\n                        this.typeOptions = getSortedTypes(this.typeOptions);\n                        this.argumentOptions = sortCaseInsensitive(this.argumentOptions);\n\n                        //if there is only one option in the clusterOptions list, automatically populate inputValue for autocomplete\n                        if(this.clusterOptions.length === 1) {\n                            this.clusterId = this.clusterOptions[0];\n                        }\n                        else {\n                            this.clusterOptions = sortCaseInsensitive(this.clusterOptions);\n                        }\n                    }\n                });\n            },\n            getClusterDetails(id) {\n                if(id && id.length > 2 && id !== this.clusterId) {\n                    this.loadingMessage = LOADINGMESSAGE;\n                    API.getClusterDetails(\n                        id, this.category, this.defaultKbDataSource\n                    ).then((response) => {\n                        if(response.data) {\n                            this.selectedClusterDetails = response.data;\n                            this.selectedClusterArguments = formatPrototypeArguments(response.data.prototype.arguments);\n                            this.clusterId = id;\n                        }\n                        else{\n                            throw new Error(response.statusText);\n                        }\n                    }).catch(e => {\n                        this.loadingMessage = NODATAMESSAGE;\n                        console.warn('the cluster id could not be retrieved: ', e);\n                    });\n                }\n            },\n            setActiveCrumb(crumb) {\n                this.activeCrumb = crumb;\n                this.$emit('crumbSelection',crumb);\n            },\n            resetDialog() {\n                this.$emit('closeDialog');\n                Object.assign(this.$data, initialState());\n            },\n            addCluster() {\n                this.selectedClusterDetails['handle']  = this.categoryDescription ? this.categoryDescription : this.clusterId;\n                this.$emit('addCluster', this.selectedClusterDetails);\n                this.resetDialog();\n            },\n            updateShowTooltip(value) {\n                this.requestToValidate = value;\n            },\n            updateDialogPage(option) {\n                if(option === this.paging.next) {\n                    this.requestToValidate = !this.clusterId && !this.categoryDescription;\n                    if(!this.requestToValidate) {\n                        if(this.activeCrumb === this.crumbs.addCategory.id) {\n                            this.setActiveCrumb(this.crumbs.addArgument.id);\n                        }\n                        else if(this.activeCrumb === this.crumbs.addArgument.id) {\n                            this.setActiveCrumb(this.crumbs.review.id);\n                        }\n                    }\n                }\n                else if(option === this.paging.previous) {\n                    if(this.activeCrumb === this.crumbs.review.id) {\n                        this.setActiveCrumb(this.crumbs.addArgument.id);\n                    }\n                    else if(this.activeCrumb === this.crumbs.addArgument.id) {\n                        this.setActiveCrumb(this.crumbs.addCategory.id);\n                    }\n                }\n                else if(option === this.paging.add) {\n                    this.selectedClusterDetails['handle']  = this.description;\n                    this.$emit('addCluster', this.selectedClusterDetails);\n\n                    Object.assign(this.$data, initialState());\n                    this.setActiveCrumb(this.crumbs.addCategory.id);\n                }\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\n    .dialog-button-wrapper{\n        display: flex;\n        align-content: center;\n        justify-content: center;\n        position: absolute;\n        bottom: 0;\n        width: 90%;\n        margin: 60px 0 28px;\n\n        button {\n            width: 100px;\n        }\n    }\n\n    .filter-field-wrapper{\n        @extend .section-space;\n        @extend .row-wrapper-flex;\n        align-items: baseline;\n    }\n    .filter-field-label{\n        @extend .bold-text;\n        width: 80px;\n    }\n    .dialog-text-input {\n        padding: 4px;\n        background-color: #FFF;\n        color: $theme-primary-color;\n        border: solid 2px $theme-light-teal-transparent;\n        width: 100%;\n        resize: none;\n        margin-bottom: 16px;\n    }\n    .body-label {\n        margin: 60px 0 4px 0;\n    }\n    .validation-wrapper {\n        display: flex;\n        flex-flow: column nowrap;\n        align-content: center;\n        margin: 0;\n        justify-content: space-around;\n    }\n    .table-scroll-display {\n        max-height: 136px;\n        overflow-y: auto;\n    }\n</style>\n\n"],"sourceRoot":"src/components/forms"}]}