{"remainingRequest":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/claims/ClaimFramesList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/src/views/claims/ClaimFramesList.vue","mtime":1641326767935},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/babel.config.js","mtime":1639107483667},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/babel-loader/lib/index.js","mtime":1641411773354},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/cache-loader/dist/cjs.js","mtime":1641411772188},{"path":"/Users/womitowoju/workspace/aida/VERDI-UI/GUI/node_modules/vue-loader/lib/index.js","mtime":1641411773606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ClaimFramesList.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  - Copyright 2021 Next Century Corporation/CACI\n  -\n  - Licensed under the Apache License, Version 2.0 (the \"License\");\n  - you may not use this file except in compliance with the License.\n  - You may obtain a copy of the License at\n  -\n  -       http://www.apache.org/licenses/LICENSE-2.0\n  -\n  - Unless required by applicable law or agreed to in writing, software\n  - distributed under the License is distributed on an \"AS IS\" BASIS,\n  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  - See the License for the specific language governing permissions and\n  - limitations under the License.\n  -\n  - Created by s.nordt on 11/23/21\n-->\n\n<template>\n    <div class=\"page-content\">\n        <div class=\"kb-details\">\n            <div class=\"kb-description-wrapper\">\n                <div class=\"element-list-header\">\n                    <div class=\"primary-page-header-left\">Claim Frames</div>\n                </div>\n            </div>\n        </div>\n <!--       <Claims :searchType=\"SEARCHTYPES.multi\" :claimSearchFilters=\"formattedClaims\" @completedSearch=completedSearch($event) ></Claims>-->\n        <div v-if=\"loading===true\" class=\"loading-section\">\n            <v-progress-linear indeterminate></v-progress-linear>\n            <div class=\"loading-message-clear\">{{statusMessage}}</div>\n        </div>\n        <div v-else>\n            <div v-if=\"statusMessage === NODATAMESSAGE\"  class=\"loading-message-clear\">{{statusMessage}}</div>\n            <div v-else-if=\"topics && Object.keys(topics).length > 0 && claimFrames && Object.keys(claimFrames).length > 0\">\n                <div v-for=\"(topic, topicIndex) in Object.keys(topics)\" :key=\"topicIndex\" class=\"topic-space\">\n                    <div class=\"element-list-header\">\n                        <div class=\"page-header-left topic-title\">{{topic}}</div>\n                        <div class=\"page-header-right\">\n                            <div class=\"button-icon\" @click=\"toggleTopicSection(topicIndex)\">\n                                <InfoTooltip :ref=\"getRefId(topicIndex)\" :message=\"toggleTopics[getRefId(topicIndex)].message\" :icon=\"toggleTopics[getRefId(topicIndex)].icon\" :iconStyle=\"'teal-large'\"></InfoTooltip>\n                            </div>\n                        </div>\n                    </div>\n                    <div v-for=\"(subTopic, subTopicIndex) in topics[topic]\" :key=\"subTopicIndex\" :class=\"subTopicIndex > 0 && !toggleTopics[getRefId(topicIndex)].closed ? 'section-space' : ''\">\n                        <DataTable\n                                :data=\"claimFrames[topic][subTopic]\"\n                                :sort=\"sort\"\n                                :loading=\"Object.keys(claimFrames[topic][subTopic]).length === 0\"\n                                :paging=\"paging\"\n                                :tableConfiguration=\"buildTableConfiguration(subTopic, claimFrames[topic][subTopic][subTopicIndex][TABLEFIELDMAPPING.claimTemplate])\"\n                                :statusMessage=\"statusMessage\"\n                                :hideData=\"toggleTopics[getRefId(topicIndex)].closed\"\n                                :hideFooter=true\n                        ></DataTable>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import API from '../../api';\n    import DataTable from '@/components/DataTable';\n    import InfoTooltip from '@/components/InfoTooltip';\n    import { mapGetters, mapMutations, mapState } from 'vuex';\n    import {\n        TABLEFIELDMAPPING,\n        TABLESELECTIONS,\n        NODATAMESSAGE,\n        DATATYPES,\n        sortCaseInsensitive,\n        getDateString,\n        pluralize,\n        TableSettings,\n        HeaderConfig,\n        makePercentage\n    } from '../../utils';\n\n    function initialState() {\n        return {\n            sort: {[TABLESELECTIONS.sortBy]: TABLEFIELDMAPPING.headline, [TABLESELECTIONS.sortDesc]: false},\n            paging: {[TABLESELECTIONS.itemsPerPage]:'All'},\n            statusMessage: '',\n            claims: {},\n            claimTopics: {},\n            filterTypes: [],\n            SIN: {},\n            loading: false,\n            toggleTables: {},\n            toggleSettings: {minimize: {message:'Minimize Section', icon:'mdi-chevron-down'}, maximize: {message:'Maximize Section', icon:'mdi-chevron-up'}}\n        }\n    }\n    export default {\n        name: 'ClaimFramesList',\n        components: {DataTable, InfoTooltip},\n        data: () => (initialState()),\n        created() {\n            this.NODATAMESSAGE = NODATAMESSAGE;\n            this.TABLEFIELDMAPPING = TABLEFIELDMAPPING;\n            this.filterTypes = [DATATYPES.topic.id, DATATYPES.subtopic.id];\n        },\n        mounted() {\n            this.setClaims();\n        },\n        computed: {\n            ...mapGetters(['getFilterKeys']),\n            ...mapState(['filters', 'filterSubmission']),\n            claimFrames() {\n                if(this.filterSubmission) {\n                    this.setClaims();\n                }\n\n                return Object.keys(this.claims).length > 0 ? this.claims : null;\n            },\n            topics() {\n                return this.claimTopics;\n            },\n            toggleTopics() {\n                return Object.keys(this.toggleTables).length > 0 ? this.toggleTables : null;\n            }\n        },\n        methods: {\n            ...mapMutations(['updateFilterSubmission']),\n            completedSearch(value) {\n                console.warn('completed search', value)\n            },\n            getPrettyLabels(items) {\n                //remove duplicates and sort\n               return  Object.keys(items) ? sortCaseInsensitive([...Object.keys(items)]) : items;\n            },\n            getRefId(id) {\n                return 'claimTopicTooltip' + id;\n            },\n            buildTableConfiguration(subTopic, claimTemplate) {\n                return {\n                    tableSettings: new TableSettings(TABLEFIELDMAPPING.id, false, subTopic, claimTemplate, false, false, false, false, false, TABLEFIELDMAPPING.percentage, true),\n                    primaryHeaders: [\n                        new HeaderConfig('Description', 'start', true, TABLEFIELDMAPPING.headline),\n                        new HeaderConfig('Claimer', 'start', true, TABLEFIELDMAPPING.claimer),\n                        new HeaderConfig('Variable X', 'start', true, TABLEFIELDMAPPING.variableList),\n                        new HeaderConfig('Location', 'start', true, TABLEFIELDMAPPING.location),\n                        new HeaderConfig('Date', 'start', true, TABLEFIELDMAPPING.dates),\n                        new HeaderConfig('Importance', 'center', true, TABLEFIELDMAPPING.percentage)\n                    ]\n                };\n            },\n            toggleTopicSection(index) {\n                const toggleId = this.getRefId(index);\n                if(this.$refs[toggleId].length > 0) {\n                    const el = this.$refs[toggleId][0];\n                    if(this.toggleTables.hasOwnProperty(toggleId)) {\n                        if(el.icon === 'mdi-chevron-down') {\n                            this.toggleTables[toggleId].message = this.toggleSettings.maximize.message;\n                            this.toggleTables[toggleId].icon = this.toggleSettings.maximize.icon;\n                        }\n                        else {\n                            this.toggleTables[toggleId].message = this.toggleSettings.minimize.message;\n                            this.toggleTables[toggleId].icon = this.toggleSettings.minimize.icon;\n                        }\n                        this.toggleTables[toggleId].closed = !this.toggleTables[toggleId].closed;\n                    }\n                }\n            },\n            setClaims() {\n                //updates the claims data and member types\n                let formattedData = {};\n                this.claimTopics = {};\n                this.claims = {};\n                let toggleData = {};\n                this.loading = true;\n                this.updateFilterSubmission(false);\n                const claimFilters = {};\n\n                //if filters exist, create formatted claims to submit as API parameters\n                const filterKeys = this.getFilterKeys;\n                if (filterKeys.length > 0) {\n                    for (const type of this.filterTypes) {\n                        if(filterKeys.includes(type)) {\n                            claimFilters[pluralize(type)] = this.filters[type];\n                        }\n                    }\n                }\n\n                API.getClaimFrames(claimFilters).then(response => {\n                    const claimFrameData = response.data;\n                    if (Object.keys(claimFrameData).length > 0) {\n                        //Map claims based on topic and then subtopic\n                        for (const claimFrame of claimFrameData) {\n                            const topic = claimFrame[TABLEFIELDMAPPING.topic];\n                            const subTopic = claimFrame[TABLEFIELDMAPPING.subtopic];\n\n                            //Create nested object's topic key\n                            if (!Object.keys(formattedData).includes(topic)) {\n                                formattedData[topic] = {};\n                            }\n\n                            //Create nested object's subtopic key under topic\n                            if (!Object.keys(formattedData[topic]).length) {\n                                formattedData[topic] = {[subTopic] : {}};\n                            }\n                            else if(!Object.keys(formattedData[topic]).includes(subTopic)) {\n                                formattedData[topic][subTopic] = {};\n                            }\n\n                            //Add names for xVariables\n                            let xVariables = [];\n                            for (const component of claimFrame.components) {\n                                if(component.propertyName === 'xVariable') {\n                                    for (const propComponent of component.values) {\n                                        xVariables.push(propComponent.componentName);\n                                    }\n                                }\n                            }\n                            claimFrame[TABLEFIELDMAPPING.variableList] = xVariables;\n\n                            claimFrame[TABLEFIELDMAPPING.headline] = claimFrame.description;\n                            claimFrame[TABLEFIELDMAPPING.percentage] = makePercentage(claimFrame.importance, 0);\n                            claimFrame[TABLEFIELDMAPPING.dates] = claimFrame.dates && [...new Set(claimFrame.dates.map(getDateString))].sort();\n                            claimFrame[TABLEFIELDMAPPING.category] = DATATYPES.topic.id\n                            const date = claimFrame.dates ? claimFrame.dates.toString() : null;\n                            const key = claimFrame.claimId + date;\n                            claimFrame[TABLEFIELDMAPPING.id] = claimFrame.claimId;\n\n                            //deduplicate\n                            if(!formattedData[topic][subTopic].hasOwnProperty(key)) {\n                                formattedData[topic][subTopic][key] = claimFrame;\n                            }\n                        }\n\n                        //remove keys from event object\n                        for(let dataTopic in formattedData) {\n                            if(formattedData.hasOwnProperty(dataTopic)) {\n                                for (let dataSubTopic in formattedData[dataTopic]) {\n                                    if (formattedData[dataTopic].hasOwnProperty(dataSubTopic)) {\n                                        formattedData[dataTopic][dataSubTopic] = Object.values(formattedData[dataTopic][dataSubTopic]);\n                                    }\n                                }\n                            }\n                        }\n\n                        this.claims = formattedData;\n\n                        for(const [cTopic, cSubTopic] of Object.entries(this.claims)) {\n                            this.claimTopics[cTopic] = Object.keys(cSubTopic).sort();\n                        }\n\n                        //default set up for topic sections\n                        for(let i=0; i <Object.keys(this.claimTopics).length; i++) {\n                            toggleData[this.getRefId(i)] = {message : this.toggleSettings.maximize.message, icon : this.toggleSettings.maximize.icon, closed : (Object.keys(claimFilters).length === 0)};\n                        }\n                        this.toggleTables = toggleData;\n                        this.loading = false;\n                    }\n                    else {\n                        this.statusMessage = this.NODATAMESSAGE;\n                        this.loading = false;\n                    }\n                }).catch((error) => {\n                    console.warn(error)\n                });\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .query-div {\n        @extend .kb-description-wrapper;\n        padding: 10px 0;\n        justify-content: space-between;\n    }\n\n    .query-field-column-wrapper{\n        @include flex-column-nowrap;\n        padding : 0 4px 6px 0;\n    }\n\n    .loading-section {\n        margin: 48px 0;\n    }\n\n    .loading-message-clear {\n        @include flex-row-nowrap;\n        justify-content: center;\n        height: 60px;\n        padding: 16px;\n    }\n\n    .topic-space:not(:first-child) {\n        margin: 40px 0 32px;\n    }\n\n    .topic-title {\n        font-size: 18px;\n        @extend .bold-text;\n        width: 100%;\n        color: $theme-teal-text;\n        line-height: 32px;\n        font-style: italic;\n    }\n\n</style>\n\n"],"sourceRoot":"src/views/claims"}]}