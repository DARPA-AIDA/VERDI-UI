/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ncc.verdi.api;

import com.ncc.verdi.model.EventTypesFilterObject;
import com.ncc.verdi.model.HypothesisFilterObject;
import com.ncc.verdi.model.InlineResponse200;
import com.ncc.verdi.model.InlineResponse2001;
import com.ncc.verdi.model.SinDetail;
import com.ncc.verdi.model.TA3Event;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-05T11:12:00.154-05:00[America/New_York]")

@Validated
@Api(value = "sin", description = "the sin API")
public interface SinApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /sin/eventTypes : Return event types for a SIN
     * Return event types for a SIN by SIN id. Optional argument filter can be applied.
     *
     * @param eventTypesFilterObject filter JSON to retrieve SIN event types (optional)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return event types for a SIN", nickname = "allEventTypes", notes = "Return event types for a SIN by SIN id. Optional argument filter can be applied.", response = String.class, responseContainer = "List", tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/sin/eventTypes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<String>> allEventTypes(@ApiParam(value = "filter JSON to retrieve SIN event types"  )  @Valid @RequestBody(required = false) EventTypesFilterObject eventTypesFilterObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sin/names : Return names and prototypes for entire SIN
     * Return names and prototypes for entire SIN. Filters are mutually exclusive. If both type filters are specified, Event role takes precidence
     *
     * @param toComplete String to autocomplete (optional)
     * @param eventTypes Type of Event to limit search to (optional, default to new ArrayList&lt;&gt;())
     * @param roleTypes Type of Event role to limit search to (optional, default to new ArrayList&lt;&gt;())
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return names and prototypes for entire SIN", nickname = "allNames", notes = "Return names and prototypes for entire SIN. Filters are mutually exclusive. If both type filters are specified, Event role takes precidence", response = InlineResponse2001.class, responseContainer = "List", tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2001.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/sin/names",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<InlineResponse2001>> allNames(@ApiParam(value = "String to autocomplete") @Valid @RequestParam(value = "toComplete", required = false) String toComplete,@ApiParam(value = "Type of Event to limit search to") @Valid @RequestParam(value = "eventTypes", required = false) List<String> eventTypes,@ApiParam(value = "Type of Event role to limit search to") @Valid @RequestParam(value = "roleTypes", required = false) List<String> roleTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"entities\" : [ \"entities\", \"entities\" ], \"roles\" : [ \"roles\", \"roles\" ], \"id\" : \"id\", \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sin/roles : Returns all role types from all TA3 output for given SIN. Can be filtered by argument Entity ID or Event type.
     * Return all role types for SIN
     *
     * @param clusterIds ID of cluster to filter by (optional, default to new ArrayList&lt;&gt;())
     * @param eventTypes Type of Event to limit search to (optional, default to new ArrayList&lt;&gt;())
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Returns all role types from all TA3 output for given SIN. Can be filtered by argument Entity ID or Event type.", nickname = "allRoles", notes = "Return all role types for SIN", response = String.class, responseContainer = "List", tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/sin/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> allRoles(@ApiParam(value = "ID of cluster to filter by") @Valid @RequestParam(value = "clusterIds", required = false) List<String> clusterIds,@ApiParam(value = "Type of Event to limit search to") @Valid @RequestParam(value = "eventTypes", required = false) List<String> eventTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sin/{sinId}/names : Return names and prototypes for entire SIN
     * Return names and prototypes for entire SIN. Filters are mutually exclusive. If both type filters are specified, Event role takes precidence
     *
     * @param sinId ID of SIN to retrieve (required)
     * @param eventTypes Type of Event to limit search to (optional, default to new ArrayList&lt;&gt;())
     * @param roleTypes Type of Event role to limit search to (optional, default to new ArrayList&lt;&gt;())
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return names and prototypes for entire SIN", nickname = "getNames", notes = "Return names and prototypes for entire SIN. Filters are mutually exclusive. If both type filters are specified, Event role takes precidence", response = InlineResponse200.class, responseContainer = "List", tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse200.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/sin/{sinId}/names",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<InlineResponse200>> getNames(@ApiParam(value = "ID of SIN to retrieve",required=true) @PathVariable("sinId") String sinId,@ApiParam(value = "Type of Event to limit search to") @Valid @RequestParam(value = "eventTypes", required = false) List<String> eventTypes,@ApiParam(value = "Type of Event role to limit search to") @Valid @RequestParam(value = "roleTypes", required = false) List<String> roleTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"entities\" : [ \"entities\", \"entities\" ], \"name\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sin/{sinId}/search : Filter Hypotheses by SIN, Event Type, Roles and IDs
     * Return Hythothesis details and hypotheses filtered by claim query structured input
     *
     * @param sinId ID of SIN to retrieve (required)
     * @param hypothesisFilterObject Filter JSON for SIN (optional)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Filter Hypotheses by SIN, Event Type, Roles and IDs", nickname = "hypothesisFilter", notes = "Return Hythothesis details and hypotheses filtered by claim query structured input", response = SinDetail.class, tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SinDetail.class),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/sin/{sinId}/search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SinDetail> hypothesisFilter(@ApiParam(value = "ID of SIN to retrieve",required=true) @PathVariable("sinId") String sinId,@ApiParam(value = "Filter JSON for SIN"  )  @Valid @RequestBody(required = false) HypothesisFilterObject hypothesisFilterObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"hypotheses\" : [ { \"types\" : [ \"types\", \"types\" ], \"percentage\" : 0.8008281904610115, \"members\" : [ { \"node\" : \"node\", \"roles\" : [ { \"role\" : \"role\", \"arguments\" : [ { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" }, { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" } ] }, { \"role\" : \"role\", \"arguments\" : [ { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" }, { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" } ] } ], \"dates\" : [ { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" }, { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" } ], \"category\" : \"category\", \"type\" : \"type\", \"prototype\" : \"prototype\" }, { \"node\" : \"node\", \"roles\" : [ { \"role\" : \"role\", \"arguments\" : [ { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" }, { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" } ] }, { \"role\" : \"role\", \"arguments\" : [ { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" }, { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" } ] } ], \"dates\" : [ { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" }, { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" } ], \"category\" : \"category\", \"type\" : \"type\", \"prototype\" : \"prototype\" } ], \"hypothesis\" : \"hypothesis\" }, { \"types\" : [ \"types\", \"types\" ], \"percentage\" : 0.8008281904610115, \"members\" : [ { \"node\" : \"node\", \"roles\" : [ { \"role\" : \"role\", \"arguments\" : [ { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" }, { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" } ] }, { \"role\" : \"role\", \"arguments\" : [ { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" }, { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" } ] } ], \"dates\" : [ { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" }, { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" } ], \"category\" : \"category\", \"type\" : \"type\", \"prototype\" : \"prototype\" }, { \"node\" : \"node\", \"roles\" : [ { \"role\" : \"role\", \"arguments\" : [ { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" }, { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" } ] }, { \"role\" : \"role\", \"arguments\" : [ { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" }, { \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"id\" : \"id\", \"category\" : \"category\", \"prototype\" : \"prototype\" } ] } ], \"dates\" : [ { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" }, { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" } ], \"category\" : \"category\", \"type\" : \"type\", \"prototype\" : \"prototype\" } ], \"hypothesis\" : \"hypothesis\" } ], \"sin\" : \"sin\", \"description\" : \"description\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sin/{sinId}/eventTypes : Return event types for a SIN
     * Return event types for a SIN by SIN id. Optional argument filter can be applied.
     *
     * @param sinId ID of SIN to retrieve (required)
     * @param entityIds The id of the arguments that the event types will be filtered by (optional, default to new ArrayList&lt;&gt;())
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return event types for a SIN", nickname = "sinEventTypes", notes = "Return event types for a SIN by SIN id. Optional argument filter can be applied.", response = String.class, responseContainer = "List", tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/sin/{sinId}/eventTypes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> sinEventTypes(@ApiParam(value = "ID of SIN to retrieve",required=true) @PathVariable("sinId") String sinId,@ApiParam(value = "The id of the arguments that the event types will be filtered by") @Valid @RequestParam(value = "entityIds", required = false) List<String> entityIds) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sin/search : Filter Hypotheses by SIN, Event Type, Roles and IDs
     * Return Hythothesis details and hypotheses filtered by claim query structured input
     *
     * @param hypothesisFilterObject Filter JSON for SIN (optional)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Filter Hypotheses by SIN, Event Type, Roles and IDs", nickname = "sinHypothesisFilter", notes = "Return Hythothesis details and hypotheses filtered by claim query structured input", response = TA3Event.class, responseContainer = "List", tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TA3Event.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/sin/search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<TA3Event>> sinHypothesisFilter(@ApiParam(value = "Filter JSON for SIN"  )  @Valid @RequestBody(required = false) HypothesisFilterObject hypothesisFilterObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : [ \"date\", \"date\" ], \"cluster\" : \"cluster\", \"run\" : \"run\", \"cluster_category\" : \"cluster_category\", \"cluster_type\" : \"cluster_type\", \"prototype_uri\" : \"prototype_uri\", \"docs\" : [ { \"document_title\" : \"document_title\", \"document_contentDate\" : \"document_contentDate\", \"document_id\" : \"document_id\", \"document_downloadDate\" : \"document_downloadDate\", \"headline\" : \"headline\" }, { \"document_title\" : \"document_title\", \"document_contentDate\" : \"document_contentDate\", \"document_id\" : \"document_id\", \"document_downloadDate\" : \"document_downloadDate\", \"headline\" : \"headline\" } ], \"entities\" : [ { \"role_uri\" : [ \"role_uri\", \"role_uri\" ], \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"role\" : [ \"role\", \"role\" ], \"resolved_type\" : \"resolved_type\", \"id\" : \"id\", \"headline\" : \"headline\", \"prototype_uri\" : \"prototype_uri\" }, { \"role_uri\" : [ \"role_uri\", \"role_uri\" ], \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"role\" : [ \"role\", \"role\" ], \"resolved_type\" : \"resolved_type\", \"id\" : \"id\", \"headline\" : \"headline\", \"prototype_uri\" : \"prototype_uri\" } ], \"statement\" : \"statement\", \"sin\" : \"sin\", \"id\" : \"id\", \"category\" : \"category\", \"hypothesis\" : \"hypothesis\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sin/{sinId}/roles : Returns all role types from all TA3 output for given SIN. Can be filtered by argument Entity ID or Event type.
     * Return all role types for SIN
     *
     * @param sinId ID of SIN to retrieve (required)
     * @param prototypeIds ID of prototype to filter by (optional, default to new ArrayList&lt;&gt;())
     * @param eventTypes Type of Event to limit search to (optional, default to new ArrayList&lt;&gt;())
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Returns all role types from all TA3 output for given SIN. Can be filtered by argument Entity ID or Event type.", nickname = "sinRoles", notes = "Return all role types for SIN", response = String.class, responseContainer = "List", tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/sin/{sinId}/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> sinRoles(@ApiParam(value = "ID of SIN to retrieve",required=true) @PathVariable("sinId") String sinId,@ApiParam(value = "ID of prototype to filter by") @Valid @RequestParam(value = "prototypeIds", required = false) List<String> prototypeIds,@ApiParam(value = "Type of Event to limit search to") @Valid @RequestParam(value = "eventTypes", required = false) List<String> eventTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
