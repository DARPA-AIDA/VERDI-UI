/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ncc.verdi.api;

import com.ncc.verdi.model.CachedEvent;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-05T15:31:00.866110500-04:00[America/New_York]")

@Validated
@Api(value = "events", description = "the events API")
public interface EventsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /events/arguments : Return event argument names matching provided input
     * Return event argument names by graph and filter by specified input
     *
     * @param graph Which graph to query in (required)
     * @param argument Part or all of argument name (optional)
     * @param dataLimit The limit of the number of data returned. (optional, default to 500)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return event argument names matching provided input", nickname = "eventNames", notes = "Return event argument names by graph and filter by specified input", response = String.class, responseContainer = "List", tags={ "Event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/events/arguments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> eventNames(@NotNull @ApiParam(value = "Which graph to query in", required = true) @Valid @RequestParam(value = "graph", required = true) String graph,@ApiParam(value = "Part or all of argument name") @Valid @RequestParam(value = "argument", required = false) String argument,@Min(0)@ApiParam(value = "The limit of the number of data returned.", defaultValue = "500") @Valid @RequestParam(value = "dataLimit", required = false, defaultValue="500") Integer dataLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /events/types : Return event types matching provided input
     * Return event types by graph and filter by specified input
     *
     * @param graph Which graph to query in (required)
     * @param type Part or all of event type (optional)
     * @param dataLimit The limit of the number of data returned. (optional, default to 500)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return event types matching provided input", nickname = "eventTypes", notes = "Return event types by graph and filter by specified input", response = String.class, responseContainer = "List", tags={ "Event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/events/types",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> eventTypes(@NotNull @ApiParam(value = "Which graph to query in", required = true) @Valid @RequestParam(value = "graph", required = true) String graph,@ApiParam(value = "Part or all of event type") @Valid @RequestParam(value = "type", required = false) String type,@Min(0)@ApiParam(value = "The limit of the number of data returned.", defaultValue = "500") @Valid @RequestParam(value = "dataLimit", required = false, defaultValue="500") Integer dataLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /events : Return events matching provided query inputs
     * Return events by graph and filter by multiple query inputs.
     *
     * @param graph Which graph to query in (required)
     * @param arguments Participant names to filter by (optional, default to new ArrayList&lt;&gt;())
     * @param types The types to filter by (optional, default to new ArrayList&lt;&gt;())
     * @param dataLimit The limit of the number of data returned. (optional, default to 500)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return events matching provided query inputs", nickname = "events", notes = "Return events by graph and filter by multiple query inputs.", response = CachedEvent.class, responseContainer = "List", tags={ "Event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CachedEvent.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/events",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<CachedEvent>> events(@NotNull @ApiParam(value = "Which graph to query in", required = true) @Valid @RequestParam(value = "graph", required = true) String graph,@ApiParam(value = "Participant names to filter by") @Valid @RequestParam(value = "arguments", required = false) List<String> arguments,@ApiParam(value = "The types to filter by") @Valid @RequestParam(value = "types", required = false) List<String> types,@Min(0)@ApiParam(value = "The limit of the number of data returned.", defaultValue = "500") @Valid @RequestParam(value = "dataLimit", required = false, defaultValue="500") Integer dataLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cluster\" : \"cluster\", \"argumentCount\" : 0, \"types\" : [ \"types\", \"types\" ], \"names\" : [ \"names\", \"names\" ], \"handle\" : \"handle\", \"prototype\" : \"prototype\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
