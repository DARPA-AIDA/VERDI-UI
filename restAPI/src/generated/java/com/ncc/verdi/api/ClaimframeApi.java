/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ncc.verdi.api;

import com.ncc.verdi.model.ClaimFrame;
import com.ncc.verdi.model.ClaimFrameDetail;
import com.ncc.verdi.model.ClaimFrameFilterObject;
import com.ncc.verdi.model.ClaimFrameTopic;
import com.ncc.verdi.model.NodeDetail;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-05T11:12:00.154-05:00[America/New_York]")

@Validated
@Api(value = "claimframe", description = "the claimframe API")
public interface ClaimframeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /claimframe/{claimId} : Return claim frame details by id
     * Return detailed information about a claim frame by querying the claim id
     *
     * @param claimId ID of claim to retrieve (required)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return claim frame details by id", nickname = "claimFrameDetails", notes = "Return detailed information about a claim frame by querying the claim id", response = ClaimFrameDetail.class, tags={ "ClaimFrames", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ClaimFrameDetail.class),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/claimframe/{claimId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClaimFrameDetail> claimFrameDetails(@ApiParam(value = "ID of claim to retrieve",required=true) @PathVariable("claimId") String claimId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"epistemic\" : \"epistemic\", \"sourceDocument\" : { \"contentDate\" : \"contentDate\", \"downloadDate\" : \"downloadDate\", \"id\" : \"id\", \"title\" : \"title\" }, \"sentiment\" : \"sentiment\", \"components\" : [ { \"propertyName\" : \"propertyName\", \"values\" : [ { \"componentURI\" : \"componentURI\", \"componentId\" : \"componentId\", \"system\" : \"system\", \"componentTypes\" : [ \"componentTypes\", \"componentTypes\" ], \"componentProvenance\" : \"componentProvenance\", \"componentName\" : \"componentName\", \"componentKE\" : \"componentKE\" }, { \"componentURI\" : \"componentURI\", \"componentId\" : \"componentId\", \"system\" : \"system\", \"componentTypes\" : [ \"componentTypes\", \"componentTypes\" ], \"componentProvenance\" : \"componentProvenance\", \"componentName\" : \"componentName\", \"componentKE\" : \"componentKE\" } ] }, { \"propertyName\" : \"propertyName\", \"values\" : [ { \"componentURI\" : \"componentURI\", \"componentId\" : \"componentId\", \"system\" : \"system\", \"componentTypes\" : [ \"componentTypes\", \"componentTypes\" ], \"componentProvenance\" : \"componentProvenance\", \"componentName\" : \"componentName\", \"componentKE\" : \"componentKE\" }, { \"componentURI\" : \"componentURI\", \"componentId\" : \"componentId\", \"system\" : \"system\", \"componentTypes\" : [ \"componentTypes\", \"componentTypes\" ], \"componentProvenance\" : \"componentProvenance\", \"componentName\" : \"componentName\", \"componentKE\" : \"componentKE\" } ] } ], \"claimURI\" : \"claimURI\", \"importance\" : 0.8008281904610115, \"description\" : \"description\", \"claimTemplate\" : \"claimTemplate\", \"dates\" : [ { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" }, { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" } ], \"claimId\" : \"claimId\", \"queryId\" : \"queryId\", \"system\" : \"system\", \"topic\" : \"topic\", \"relations\" : [ { \"propertyName\" : \"propertyName\", \"values\" : [ { \"claimURI\" : \"claimURI\", \"description\" : \"description\", \"topic\" : \"topic\", \"claimTemplate\" : \"claimTemplate\", \"claimId\" : \"claimId\", \"subtopic\" : \"subtopic\" }, { \"claimURI\" : \"claimURI\", \"description\" : \"description\", \"topic\" : \"topic\", \"claimTemplate\" : \"claimTemplate\", \"claimId\" : \"claimId\", \"subtopic\" : \"subtopic\" } ] }, { \"propertyName\" : \"propertyName\", \"values\" : [ { \"claimURI\" : \"claimURI\", \"description\" : \"description\", \"topic\" : \"topic\", \"claimTemplate\" : \"claimTemplate\", \"claimId\" : \"claimId\", \"subtopic\" : \"subtopic\" }, { \"claimURI\" : \"claimURI\", \"description\" : \"description\", \"topic\" : \"topic\", \"claimTemplate\" : \"claimTemplate\", \"claimId\" : \"claimId\", \"subtopic\" : \"subtopic\" } ] } ], \"provenances\" : [ { \"propertyName\" : \"propertyName\", \"values\" : [ { \"types\" : [ \"types\", \"types\" ], \"keId\" : \"keId\", \"category\" : \"category\" }, { \"types\" : [ \"types\", \"types\" ], \"keId\" : \"keId\", \"category\" : \"category\" } ] }, { \"propertyName\" : \"propertyName\", \"values\" : [ { \"types\" : [ \"types\", \"types\" ], \"keId\" : \"keId\", \"category\" : \"category\" }, { \"types\" : [ \"types\", \"types\" ], \"keId\" : \"keId\", \"category\" : \"category\" } ] } ], \"subtopic\" : \"subtopic\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /claimframe/topics : Get topics, subtopics/claims, and claim templates.
     * Returns all distinct topics, subtopics/claims, and claim templates.
     *
     * @return successful operation (status code 200)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Get topics, subtopics/claims, and claim templates.", nickname = "claimFrameTopicalList", notes = "Returns all distinct topics, subtopics/claims, and claim templates.", response = ClaimFrameTopic.class, responseContainer = "List", tags={ "ClaimFrames", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ClaimFrameTopic.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/claimframe/topics",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ClaimFrameTopic>> claimFrameTopicalList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"template\" : \"template\", \"topic\" : \"topic\", \"subtopic\" : \"subtopic\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /claimframe/search : Retrieve Claim Frames - all or filtered
     * Return either all Claim Frames or filtered by graph, topic and/or subtopic
     *
     * @param claimFrameFilterObject Filter JSON for Claim Frame (optional)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Retrieve Claim Frames - all or filtered", nickname = "claimFrames", notes = "Return either all Claim Frames or filtered by graph, topic and/or subtopic", response = ClaimFrame.class, responseContainer = "List", tags={ "ClaimFrames", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ClaimFrame.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/claimframe/search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<ClaimFrame>> claimFrames(@ApiParam(value = "Filter JSON for Claim Frame"  )  @Valid @RequestBody(required = false) ClaimFrameFilterObject claimFrameFilterObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"components\" : [ { \"propertyName\" : \"propertyName\", \"values\" : [ { \"componentURI\" : \"componentURI\", \"componentId\" : \"componentId\", \"system\" : \"system\", \"componentTypes\" : [ \"componentTypes\", \"componentTypes\" ], \"componentProvenance\" : \"componentProvenance\", \"componentName\" : \"componentName\", \"componentKE\" : \"componentKE\" }, { \"componentURI\" : \"componentURI\", \"componentId\" : \"componentId\", \"system\" : \"system\", \"componentTypes\" : [ \"componentTypes\", \"componentTypes\" ], \"componentProvenance\" : \"componentProvenance\", \"componentName\" : \"componentName\", \"componentKE\" : \"componentKE\" } ] }, { \"propertyName\" : \"propertyName\", \"values\" : [ { \"componentURI\" : \"componentURI\", \"componentId\" : \"componentId\", \"system\" : \"system\", \"componentTypes\" : [ \"componentTypes\", \"componentTypes\" ], \"componentProvenance\" : \"componentProvenance\", \"componentName\" : \"componentName\", \"componentKE\" : \"componentKE\" }, { \"componentURI\" : \"componentURI\", \"componentId\" : \"componentId\", \"system\" : \"system\", \"componentTypes\" : [ \"componentTypes\", \"componentTypes\" ], \"componentProvenance\" : \"componentProvenance\", \"componentName\" : \"componentName\", \"componentKE\" : \"componentKE\" } ] } ], \"locationName\" : \"locationName\", \"claimURI\" : \"claimURI\", \"importance\" : 0.8008281904610115, \"description\" : \"description\", \"claimTemplate\" : \"claimTemplate\", \"dates\" : [ { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" }, { \"startAfter\" : \"startAfter\", \"endBefore\" : \"endBefore\", \"startBefore\" : \"startBefore\", \"endAfter\" : \"endAfter\" } ], \"claimId\" : \"claimId\", \"claimerKE\" : \"claimerKE\", \"queryId\" : \"queryId\", \"claimer\" : \"claimer\", \"topic\" : \"topic\", \"subtopic\" : \"subtopic\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /claimframe/qnode/{qnodeId} : Returns qnode deatails by id
     * Returns qnode or pnode details from the Knowledge Graph Toolkit API based on WikiData by querying the node id
     *
     * @param qnodeId ID of qnode or pnode to retrieve (required)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Returns qnode deatails by id", nickname = "qNodeDetails", notes = "Returns qnode or pnode details from the Knowledge Graph Toolkit API based on WikiData by querying the node id", response = NodeDetail.class, tags={ "ClaimFrames", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = NodeDetail.class),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/claimframe/qnode/{qnodeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<NodeDetail> qNodeDetails(@ApiParam(value = "ID of qnode or pnode to retrieve",required=true) @PathVariable("qnodeId") String qnodeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_type\" : \"data_type\", \"description\" : [ \"description\", \"description\" ], \"alias\" : [ \"alias\", \"alias\" ], \"label\" : [ \"label\", \"label\" ], \"qnode\" : \"qnode\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
