/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ncc.verdi.api;

import com.ncc.verdi.model.Element;
import com.ncc.verdi.model.Event;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-05T15:31:00.866110500-04:00[America/New_York]")

@Validated
@Api(value = "event", description = "the event API")
public interface EventApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /event : Return a single event
     * Return event by id
     *
     * @param id ID of event to retrieve (required)
     * @param graph Which graph to query in (optional)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return a single event", nickname = "event", notes = "Return event by id", response = Event.class, tags={ "Event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Event.class),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/event",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Event> event(@NotNull @ApiParam(value = "ID of event to retrieve", required = true) @Valid @RequestParam(value = "id", required = true) String id,@ApiParam(value = "Which graph to query in") @Valid @RequestParam(value = "graph", required = false) String graph) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cluster\" : \"cluster\", \"members\" : [ null, null ], \"handle\" : \"handle\", \"category\" : \"category\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /event/element : Return a single event element
     * Return event element by id
     *
     * @param id ID of event element to retrieve (required)
     * @param graph Which graph to query in (optional)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return a single event element", nickname = "eventElement", notes = "Return event element by id", response = Element.class, tags={ "Event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Element.class),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/event/element",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Element> eventElement(@NotNull @ApiParam(value = "ID of event element to retrieve", required = true) @Valid @RequestParam(value = "id", required = true) String id,@ApiParam(value = "Which graph to query in") @Valid @RequestParam(value = "graph", required = false) String graph) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
