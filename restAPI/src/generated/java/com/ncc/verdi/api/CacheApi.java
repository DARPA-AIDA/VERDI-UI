/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ncc.verdi.api;

import com.ncc.verdi.model.CacheObject;
import com.ncc.verdi.model.InlineResponse2002;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-05T11:12:00.154-05:00[America/New_York]")

@Validated
@Api(value = "cache", description = "the cache API")
public interface CacheApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /cache : Create cache from graph
     * Create cache from graph
     *
     * @param cacheObject JSON of Task Area, graph root URI, and overwrite switch (optional)
     * @return Successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Create cache from graph", nickname = "cacheCreate", notes = "Create cache from graph", response = InlineResponse2002.class, tags={ "ElasticSearch", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = InlineResponse2002.class),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/cache",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2002> cacheCreate(@ApiParam(value = "JSON of Task Area, graph root URI, and overwrite switch"  )  @Valid @RequestBody(required = false) CacheObject cacheObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /cache : Clears cache
     * Clears an indices from ElasticSearch
     *
     * @param graphURI Clear Cache for graphURI. If graphURI is empty, clear all cache. (optional)
     * @return Successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Clears cache", nickname = "cacheDelete", notes = "Clears an indices from ElasticSearch", response = InlineResponse2002.class, tags={ "ElasticSearch", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = InlineResponse2002.class),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/cache",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<InlineResponse2002> cacheDelete(@ApiParam(value = "Clear Cache for graphURI. If graphURI is empty, clear all cache.") @Valid @RequestParam(value = "graphURI", required = false) String graphURI) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
