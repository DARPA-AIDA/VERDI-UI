/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ncc.verdi.api;

import com.ncc.verdi.model.HypothesisDetail;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-05T11:12:00.154-05:00[America/New_York]")

@Validated
@Api(value = "hypothesis", description = "the hypothesis API")
public interface HypothesisApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /hypothesis : Return hypothesis content
     * Return hypothesis details and connections by graph and hypothesis id
     *
     * @param graph Which graph to query in (required)
     * @param id ID of hypothesis to retrieve (required)
     * @return successful operation (status code 200)
     *         or Invalid parameters (status code 400)
     *         or API not found (status code 404)
     */
    @ApiOperation(value = "Return hypothesis content", nickname = "hypothesis", notes = "Return hypothesis details and connections by graph and hypothesis id", response = HypothesisDetail.class, tags={ "Hypothesis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HypothesisDetail.class),
        @ApiResponse(code = 400, message = "Invalid parameters"),
        @ApiResponse(code = 404, message = "API not found") })
    @RequestMapping(value = "/hypothesis",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<HypothesisDetail> hypothesis(@NotNull @ApiParam(value = "Which graph to query in", required = true) @Valid @RequestParam(value = "graph", required = true) String graph,@NotNull @ApiParam(value = "ID of hypothesis to retrieve", required = true) @Valid @RequestParam(value = "id", required = true) String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"docs\" : [ { \"contentDate\" : \"contentDate\", \"downloadDate\" : \"downloadDate\", \"id\" : \"id\", \"title\" : \"title\" }, { \"contentDate\" : \"contentDate\", \"downloadDate\" : \"downloadDate\", \"id\" : \"id\", \"title\" : \"title\" } ], \"members\" : [ { \"cluster\" : \"cluster\", \"members\" : [ null, null ], \"handle\" : \"handle\", \"category\" : \"category\" }, { \"cluster\" : \"cluster\", \"members\" : [ null, null ], \"handle\" : \"handle\", \"category\" : \"category\" } ], \"hypothesis\" : \"hypothesis\", \"fillers\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
